
AT86RF233.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e6c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002ff4  08002ff4  00012ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800303c  0800303c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800303c  0800303c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800303c  0800303c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800303c  0800303c  0001303c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003040  08003040  00013040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  08003050  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08003050  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000853c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001571  00000000  00000000  00028578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  00029af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  0002a328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025197  00000000  00000000  0002aab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007fa4  00000000  00000000  0004fc4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e40cc  00000000  00000000  00057bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013bcbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002050  00000000  00000000  0013bd14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002fdc 	.word	0x08002fdc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002fdc 	.word	0x08002fdc

080001c8 <readRegister>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t readRegister(const uint8_t addr)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    uint8_t readCommand = addr | AT86RF2XX_ACCESS_REG | AT86RF2XX_ACCESS_READ;
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80001d8:	b2db      	uxtb	r3, r3
 80001da:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80001dc:	2200      	movs	r2, #0
 80001de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001e2:	4810      	ldr	r0, [pc, #64]	; (8000224 <readRegister+0x5c>)
 80001e4:	f001 f962 	bl	80014ac <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi3, &readCommand, &value, sizeof(value), HAL_MAX_DELAY);
 80001e8:	f107 020f 	add.w	r2, r7, #15
 80001ec:	f107 010e 	add.w	r1, r7, #14
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	9300      	str	r3, [sp, #0]
 80001f6:	2301      	movs	r3, #1
 80001f8:	480b      	ldr	r0, [pc, #44]	; (8000228 <readRegister+0x60>)
 80001fa:	f002 faf4 	bl	80027e6 <HAL_SPI_TransmitReceive>
    //HAL_SPI_Transmit(&hspi3, readCommand, 1, HAL_MAX_DELAY);
    HAL_SPI_Receive(&hspi3, &value, sizeof(value), HAL_MAX_DELAY);
 80001fe:	f107 010f 	add.w	r1, r7, #15
 8000202:	f04f 33ff 	mov.w	r3, #4294967295
 8000206:	2201      	movs	r2, #1
 8000208:	4807      	ldr	r0, [pc, #28]	; (8000228 <readRegister+0x60>)
 800020a:	f002 f9bc 	bl	8002586 <HAL_SPI_Receive>
    //HAL_SPI_TransmitReceive(&hspi3, 0x00, value, 1, HAL_MAX_DELAY);
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800020e:	2201      	movs	r2, #1
 8000210:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <readRegister+0x5c>)
 8000216:	f001 f949 	bl	80014ac <HAL_GPIO_WritePin>

    return (uint8_t)value;
 800021a:	7bfb      	ldrb	r3, [r7, #15]
}
 800021c:	4618      	mov	r0, r3
 800021e:	3710      	adds	r7, #16
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	48000800 	.word	0x48000800
 8000228:	20000034 	.word	0x20000034

0800022c <writeRegister>:

void writeRegister(const uint8_t addr,
        const uint8_t value)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	460a      	mov	r2, r1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	4613      	mov	r3, r2
 800023a:	71bb      	strb	r3, [r7, #6]
	uint8_t writeCommand = addr | AT86RF2XX_ACCESS_REG | AT86RF2XX_ACCESS_WRITE;
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000242:	b2db      	uxtb	r3, r3
 8000244:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000246:	2200      	movs	r2, #0
 8000248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800024c:	480d      	ldr	r0, [pc, #52]	; (8000284 <writeRegister+0x58>)
 800024e:	f001 f92d 	bl	80014ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &writeCommand, sizeof(writeCommand), HAL_MAX_DELAY);
 8000252:	f107 010f 	add.w	r1, r7, #15
 8000256:	f04f 33ff 	mov.w	r3, #4294967295
 800025a:	2201      	movs	r2, #1
 800025c:	480a      	ldr	r0, [pc, #40]	; (8000288 <writeRegister+0x5c>)
 800025e:	f002 f824 	bl	80022aa <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &value, sizeof(value), HAL_MAX_DELAY);
 8000262:	1db9      	adds	r1, r7, #6
 8000264:	f04f 33ff 	mov.w	r3, #4294967295
 8000268:	2201      	movs	r2, #1
 800026a:	4807      	ldr	r0, [pc, #28]	; (8000288 <writeRegister+0x5c>)
 800026c:	f002 f81d 	bl	80022aa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000270:	2201      	movs	r2, #1
 8000272:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000276:	4803      	ldr	r0, [pc, #12]	; (8000284 <writeRegister+0x58>)
 8000278:	f001 f918 	bl	80014ac <HAL_GPIO_WritePin>

}
 800027c:	bf00      	nop
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	48000800 	.word	0x48000800
 8000288:	20000034 	.word	0x20000034

0800028c <get_status>:

uint8_t get_status(void){
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	return readRegister(0x01);
 8000290:	2001      	movs	r0, #1
 8000292:	f7ff ff99 	bl	80001c8 <readRegister>
 8000296:	4603      	mov	r3, r0
}
 8000298:	4618      	mov	r0, r3
 800029a:	bd80      	pop	{r7, pc}

0800029c <set_csma_max_retries>:

void set_csma_max_retries(int8_t retries)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
    retries = (retries > 5) ? 5 : retries; /* valid values: 0-5 */
 80002a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002aa:	2b05      	cmp	r3, #5
 80002ac:	bfa8      	it	ge
 80002ae:	2305      	movge	r3, #5
 80002b0:	71fb      	strb	r3, [r7, #7]
    retries = (retries < 0) ? 7 : retries; /* max < 0 => disable CSMA (set to 7) */
 80002b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	db02      	blt.n	80002c0 <set_csma_max_retries+0x24>
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	e000      	b.n	80002c2 <set_csma_max_retries+0x26>
 80002c0:	2307      	movs	r3, #7
 80002c2:	71fb      	strb	r3, [r7, #7]
    //DEBUG("[at86rf2xx] opt: Set CSMA retries to %u\n", retries);

    uint8_t tmp = readRegister(AT86RF2XX_REG__XAH_CTRL_0);
 80002c4:	202c      	movs	r0, #44	; 0x2c
 80002c6:	f7ff ff7f 	bl	80001c8 <readRegister>
 80002ca:	4603      	mov	r3, r0
 80002cc:	73fb      	strb	r3, [r7, #15]
    tmp &= ~(AT86RF2XX_XAH_CTRL_0__MAX_CSMA_RETRIES);
 80002ce:	7bfb      	ldrb	r3, [r7, #15]
 80002d0:	f023 030e 	bic.w	r3, r3, #14
 80002d4:	73fb      	strb	r3, [r7, #15]
    tmp |= (retries << 1);
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	b25a      	sxtb	r2, r3
 80002de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80002e2:	4313      	orrs	r3, r2
 80002e4:	b25b      	sxtb	r3, r3
 80002e6:	73fb      	strb	r3, [r7, #15]
    writeRegister(AT86RF2XX_REG__XAH_CTRL_0, tmp);
 80002e8:	7bfb      	ldrb	r3, [r7, #15]
 80002ea:	4619      	mov	r1, r3
 80002ec:	202c      	movs	r0, #44	; 0x2c
 80002ee:	f7ff ff9d 	bl	800022c <writeRegister>
}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}

080002fa <set_csma_backoff_exp>:

void set_csma_backoff_exp(uint8_t min, uint8_t max)
{
 80002fa:	b580      	push	{r7, lr}
 80002fc:	b082      	sub	sp, #8
 80002fe:	af00      	add	r7, sp, #0
 8000300:	4603      	mov	r3, r0
 8000302:	460a      	mov	r2, r1
 8000304:	71fb      	strb	r3, [r7, #7]
 8000306:	4613      	mov	r3, r2
 8000308:	71bb      	strb	r3, [r7, #6]
    max = (max > 8) ? 8 : max;
 800030a:	79bb      	ldrb	r3, [r7, #6]
 800030c:	2b08      	cmp	r3, #8
 800030e:	bf28      	it	cs
 8000310:	2308      	movcs	r3, #8
 8000312:	71bb      	strb	r3, [r7, #6]
    min = (min > max) ? max : min;
 8000314:	79fa      	ldrb	r2, [r7, #7]
 8000316:	79bb      	ldrb	r3, [r7, #6]
 8000318:	4293      	cmp	r3, r2
 800031a:	bf28      	it	cs
 800031c:	4613      	movcs	r3, r2
 800031e:	71fb      	strb	r3, [r7, #7]
    //DEBUG("[at86rf2xx] opt: Set min BE=%u, max BE=%u\n", min, max);

    writeRegister(AT86RF2XX_REG__CSMA_BE, (max << 4) | (min));
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	011b      	lsls	r3, r3, #4
 8000324:	b25a      	sxtb	r2, r3
 8000326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032a:	4313      	orrs	r3, r2
 800032c:	b25b      	sxtb	r3, r3
 800032e:	b2db      	uxtb	r3, r3
 8000330:	4619      	mov	r1, r3
 8000332:	202f      	movs	r0, #47	; 0x2f
 8000334:	f7ff ff7a 	bl	800022c <writeRegister>
}
 8000338:	bf00      	nop
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}

08000340 <set_csma_seed>:

void set_csma_seed(uint8_t entropy[2])
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
    if(entropy == NULL) {
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d020      	beq.n	8000390 <set_csma_seed+0x50>
        //DEBUG("[at86rf2xx] opt: CSMA seed entropy is nullpointer\n");
        return;
    }
    //DEBUG("[at86rf2xx] opt: Set CSMA seed to 0x%x 0x%x\n", entropy[0], entropy[1]);

    writeRegister(AT86RF2XX_REG__CSMA_SEED_0, entropy[0]);
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	4619      	mov	r1, r3
 8000354:	202d      	movs	r0, #45	; 0x2d
 8000356:	f7ff ff69 	bl	800022c <writeRegister>

    uint8_t tmp = readRegister(AT86RF2XX_REG__CSMA_SEED_1);
 800035a:	202e      	movs	r0, #46	; 0x2e
 800035c:	f7ff ff34 	bl	80001c8 <readRegister>
 8000360:	4603      	mov	r3, r0
 8000362:	73fb      	strb	r3, [r7, #15]
    tmp &= ~(AT86RF2XX_CSMA_SEED_1__CSMA_SEED_1);
 8000364:	7bfb      	ldrb	r3, [r7, #15]
 8000366:	f023 0307 	bic.w	r3, r3, #7
 800036a:	73fb      	strb	r3, [r7, #15]
    tmp |= entropy[1] & AT86RF2XX_CSMA_SEED_1__CSMA_SEED_1;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3301      	adds	r3, #1
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	b25b      	sxtb	r3, r3
 8000374:	f003 0307 	and.w	r3, r3, #7
 8000378:	b25a      	sxtb	r2, r3
 800037a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800037e:	4313      	orrs	r3, r2
 8000380:	b25b      	sxtb	r3, r3
 8000382:	73fb      	strb	r3, [r7, #15]
    writeRegister(AT86RF2XX_REG__CSMA_SEED_1, tmp);
 8000384:	7bfb      	ldrb	r3, [r7, #15]
 8000386:	4619      	mov	r1, r3
 8000388:	202e      	movs	r0, #46	; 0x2e
 800038a:	f7ff ff4f 	bl	800022c <writeRegister>
 800038e:	e000      	b.n	8000392 <set_csma_seed+0x52>
        return;
 8000390:	bf00      	nop
}
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <set_option>:

void set_option(uint16_t option, int state)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	6039      	str	r1, [r7, #0]
 80003a2:	80fb      	strh	r3, [r7, #6]
    uint8_t tmp;

    //DEBUG("set option %i to %i\n", option, state);

    /* set option field */
    if (state) {
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d05c      	beq.n	8000464 <set_option+0xcc>
        options |= option;
 80003aa:	4b62      	ldr	r3, [pc, #392]	; (8000534 <set_option+0x19c>)
 80003ac:	881a      	ldrh	r2, [r3, #0]
 80003ae:	88fb      	ldrh	r3, [r7, #6]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b5f      	ldr	r3, [pc, #380]	; (8000534 <set_option+0x19c>)
 80003b6:	801a      	strh	r2, [r3, #0]
        /* trigger option specific actions */
        switch (option) {
 80003b8:	88fb      	ldrh	r3, [r7, #6]
 80003ba:	2b40      	cmp	r3, #64	; 0x40
 80003bc:	d043      	beq.n	8000446 <set_option+0xae>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	f300 80af 	bgt.w	8000522 <set_option+0x18a>
 80003c4:	2b04      	cmp	r3, #4
 80003c6:	d012      	beq.n	80003ee <set_option+0x56>
 80003c8:	2b04      	cmp	r3, #4
 80003ca:	f300 80aa 	bgt.w	8000522 <set_option+0x18a>
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d02a      	beq.n	8000428 <set_option+0x90>
 80003d2:	2b02      	cmp	r3, #2
 80003d4:	f040 80a5 	bne.w	8000522 <set_option+0x18a>
            case AT86RF2XX_OPT_CSMA:
                //DEBUG("[at86rf2xx] opt: enabling CSMA mode" \
                      "(4 retries, min BE: 3 max BE: 5)\n");
                /* Initialize CSMA seed with hardware address */
                set_csma_seed(0b101011);
 80003d8:	202b      	movs	r0, #43	; 0x2b
 80003da:	f7ff ffb1 	bl	8000340 <set_csma_seed>
                set_csma_max_retries(4);
 80003de:	2004      	movs	r0, #4
 80003e0:	f7ff ff5c 	bl	800029c <set_csma_max_retries>
                set_csma_backoff_exp(3, 5);
 80003e4:	2105      	movs	r1, #5
 80003e6:	2003      	movs	r0, #3
 80003e8:	f7ff ff87 	bl	80002fa <set_csma_backoff_exp>
                break;
 80003ec:	e09e      	b.n	800052c <set_option+0x194>
            case AT86RF2XX_OPT_PROMISCUOUS:
                //DEBUG("[at86rf2xx] opt: enabling PROMISCUOUS mode\n");
                /* disable auto ACKs in promiscuous mode */
                tmp = readRegister(AT86RF2XX_REG__CSMA_SEED_1);
 80003ee:	202e      	movs	r0, #46	; 0x2e
 80003f0:	f7ff feea 	bl	80001c8 <readRegister>
 80003f4:	4603      	mov	r3, r0
 80003f6:	73fb      	strb	r3, [r7, #15]
                tmp |= AT86RF2XX_CSMA_SEED_1__AACK_DIS_ACK;
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
 80003fa:	f043 0310 	orr.w	r3, r3, #16
 80003fe:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__CSMA_SEED_1, tmp);
 8000400:	7bfb      	ldrb	r3, [r7, #15]
 8000402:	4619      	mov	r1, r3
 8000404:	202e      	movs	r0, #46	; 0x2e
 8000406:	f7ff ff11 	bl	800022c <writeRegister>
                /* enable promiscuous mode */
                tmp = readRegister(AT86RF2XX_REG__XAH_CTRL_1);
 800040a:	2017      	movs	r0, #23
 800040c:	f7ff fedc 	bl	80001c8 <readRegister>
 8000410:	4603      	mov	r3, r0
 8000412:	73fb      	strb	r3, [r7, #15]
                tmp |= AT86RF2XX_XAH_CTRL_1__AACK_PROM_MODE;
 8000414:	7bfb      	ldrb	r3, [r7, #15]
 8000416:	f043 0302 	orr.w	r3, r3, #2
 800041a:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__XAH_CTRL_1, tmp);
 800041c:	7bfb      	ldrb	r3, [r7, #15]
 800041e:	4619      	mov	r1, r3
 8000420:	2017      	movs	r0, #23
 8000422:	f7ff ff03 	bl	800022c <writeRegister>
                break;
 8000426:	e081      	b.n	800052c <set_option+0x194>
            case AT86RF2XX_OPT_AUTOACK:
                //DEBUG("[at86rf2xx] opt: enabling auto ACKs\n");
                tmp = readRegister(AT86RF2XX_REG__CSMA_SEED_1);
 8000428:	202e      	movs	r0, #46	; 0x2e
 800042a:	f7ff fecd 	bl	80001c8 <readRegister>
 800042e:	4603      	mov	r3, r0
 8000430:	73fb      	strb	r3, [r7, #15]
                tmp &= ~(AT86RF2XX_CSMA_SEED_1__AACK_DIS_ACK);
 8000432:	7bfb      	ldrb	r3, [r7, #15]
 8000434:	f023 0310 	bic.w	r3, r3, #16
 8000438:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__CSMA_SEED_1, tmp);
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	4619      	mov	r1, r3
 800043e:	202e      	movs	r0, #46	; 0x2e
 8000440:	f7ff fef4 	bl	800022c <writeRegister>
                break;
 8000444:	e072      	b.n	800052c <set_option+0x194>
            case AT86RF2XX_OPT_TELL_RX_START:
                //DEBUG("[at86rf2xx] opt: enabling SFD IRQ\n");
                tmp = readRegister(AT86RF2XX_REG__IRQ_MASK);
 8000446:	200e      	movs	r0, #14
 8000448:	f7ff febe 	bl	80001c8 <readRegister>
 800044c:	4603      	mov	r3, r0
 800044e:	73fb      	strb	r3, [r7, #15]
                tmp |= AT86RF2XX_IRQ_STATUS_MASK__RX_START;
 8000450:	7bfb      	ldrb	r3, [r7, #15]
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__IRQ_MASK, tmp);
 8000458:	7bfb      	ldrb	r3, [r7, #15]
 800045a:	4619      	mov	r1, r3
 800045c:	200e      	movs	r0, #14
 800045e:	f7ff fee5 	bl	800022c <writeRegister>
                break;
 8000462:	e063      	b.n	800052c <set_option+0x194>
                /* do nothing */
                break;
        }
    }
    else {
        options &= ~(option);
 8000464:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000468:	43db      	mvns	r3, r3
 800046a:	b21a      	sxth	r2, r3
 800046c:	4b31      	ldr	r3, [pc, #196]	; (8000534 <set_option+0x19c>)
 800046e:	881b      	ldrh	r3, [r3, #0]
 8000470:	b21b      	sxth	r3, r3
 8000472:	4013      	ands	r3, r2
 8000474:	b21b      	sxth	r3, r3
 8000476:	b29a      	uxth	r2, r3
 8000478:	4b2e      	ldr	r3, [pc, #184]	; (8000534 <set_option+0x19c>)
 800047a:	801a      	strh	r2, [r3, #0]
        /* trigger option specific actions */
        switch (option) {
 800047c:	88fb      	ldrh	r3, [r7, #6]
 800047e:	2b40      	cmp	r3, #64	; 0x40
 8000480:	d040      	beq.n	8000504 <set_option+0x16c>
 8000482:	2b40      	cmp	r3, #64	; 0x40
 8000484:	dc4f      	bgt.n	8000526 <set_option+0x18e>
 8000486:	2b04      	cmp	r3, #4
 8000488:	d00a      	beq.n	80004a0 <set_option+0x108>
 800048a:	2b04      	cmp	r3, #4
 800048c:	dc4b      	bgt.n	8000526 <set_option+0x18e>
 800048e:	2b01      	cmp	r3, #1
 8000490:	d029      	beq.n	80004e6 <set_option+0x14e>
 8000492:	2b02      	cmp	r3, #2
 8000494:	d147      	bne.n	8000526 <set_option+0x18e>
            case AT86RF2XX_OPT_CSMA:
                //DEBUG("[at86rf2xx] opt: disabling CSMA mode\n");
                /* setting retries to -1 means CSMA disabled */
                set_csma_max_retries(-1);
 8000496:	f04f 30ff 	mov.w	r0, #4294967295
 800049a:	f7ff feff 	bl	800029c <set_csma_max_retries>
                break;
 800049e:	e045      	b.n	800052c <set_option+0x194>
            case AT86RF2XX_OPT_PROMISCUOUS:
                //DEBUG("[at86rf2xx] opt: disabling PROMISCUOUS mode\n");
                /* disable promiscuous mode */
                tmp = readRegister(AT86RF2XX_REG__XAH_CTRL_1);
 80004a0:	2017      	movs	r0, #23
 80004a2:	f7ff fe91 	bl	80001c8 <readRegister>
 80004a6:	4603      	mov	r3, r0
 80004a8:	73fb      	strb	r3, [r7, #15]
                tmp &= ~(AT86RF2XX_XAH_CTRL_1__AACK_PROM_MODE);
 80004aa:	7bfb      	ldrb	r3, [r7, #15]
 80004ac:	f023 0302 	bic.w	r3, r3, #2
 80004b0:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__XAH_CTRL_1, tmp);
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	4619      	mov	r1, r3
 80004b6:	2017      	movs	r0, #23
 80004b8:	f7ff feb8 	bl	800022c <writeRegister>
                /* re-enable AUTOACK only if the option is set */
                if (options & AT86RF2XX_OPT_AUTOACK) {
 80004bc:	4b1d      	ldr	r3, [pc, #116]	; (8000534 <set_option+0x19c>)
 80004be:	881b      	ldrh	r3, [r3, #0]
 80004c0:	f003 0301 	and.w	r3, r3, #1
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d030      	beq.n	800052a <set_option+0x192>
                    tmp = readRegister(AT86RF2XX_REG__CSMA_SEED_1);
 80004c8:	202e      	movs	r0, #46	; 0x2e
 80004ca:	f7ff fe7d 	bl	80001c8 <readRegister>
 80004ce:	4603      	mov	r3, r0
 80004d0:	73fb      	strb	r3, [r7, #15]
                    tmp &= ~(AT86RF2XX_CSMA_SEED_1__AACK_DIS_ACK);
 80004d2:	7bfb      	ldrb	r3, [r7, #15]
 80004d4:	f023 0310 	bic.w	r3, r3, #16
 80004d8:	73fb      	strb	r3, [r7, #15]
                    writeRegister(AT86RF2XX_REG__CSMA_SEED_1,
 80004da:	7bfb      	ldrb	r3, [r7, #15]
 80004dc:	4619      	mov	r1, r3
 80004de:	202e      	movs	r0, #46	; 0x2e
 80004e0:	f7ff fea4 	bl	800022c <writeRegister>
                                        tmp);
                }
                break;
 80004e4:	e021      	b.n	800052a <set_option+0x192>
            case AT86RF2XX_OPT_AUTOACK:
                //DEBUG("[at86rf2xx] opt: disabling auto ACKs\n");
                tmp = readRegister(AT86RF2XX_REG__CSMA_SEED_1);
 80004e6:	202e      	movs	r0, #46	; 0x2e
 80004e8:	f7ff fe6e 	bl	80001c8 <readRegister>
 80004ec:	4603      	mov	r3, r0
 80004ee:	73fb      	strb	r3, [r7, #15]
                tmp |= AT86RF2XX_CSMA_SEED_1__AACK_DIS_ACK;
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	f043 0310 	orr.w	r3, r3, #16
 80004f6:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__CSMA_SEED_1, tmp);
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
 80004fa:	4619      	mov	r1, r3
 80004fc:	202e      	movs	r0, #46	; 0x2e
 80004fe:	f7ff fe95 	bl	800022c <writeRegister>
                break;
 8000502:	e013      	b.n	800052c <set_option+0x194>
            case AT86RF2XX_OPT_TELL_RX_START:
                //DEBUG("[at86rf2xx] opt: disabling SFD IRQ\n");
                tmp = readRegister(AT86RF2XX_REG__IRQ_MASK);
 8000504:	200e      	movs	r0, #14
 8000506:	f7ff fe5f 	bl	80001c8 <readRegister>
 800050a:	4603      	mov	r3, r0
 800050c:	73fb      	strb	r3, [r7, #15]
                tmp &= ~AT86RF2XX_IRQ_STATUS_MASK__RX_START;
 800050e:	7bfb      	ldrb	r3, [r7, #15]
 8000510:	f023 0304 	bic.w	r3, r3, #4
 8000514:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__IRQ_MASK, tmp);
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	4619      	mov	r1, r3
 800051a:	200e      	movs	r0, #14
 800051c:	f7ff fe86 	bl	800022c <writeRegister>
                break;
 8000520:	e004      	b.n	800052c <set_option+0x194>
                break;
 8000522:	bf00      	nop
 8000524:	e002      	b.n	800052c <set_option+0x194>
            default:
                /* do nothing */
                break;
 8000526:	bf00      	nop
 8000528:	e000      	b.n	800052c <set_option+0x194>
                break;
 800052a:	bf00      	nop
        }
    }
}
 800052c:	bf00      	nop
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000098 	.word	0x20000098

08000538 <_set_state>:

void _set_state(uint8_t state_)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
	writeRegister(AT86RF2XX_REG__TRX_STATE, state_);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	4619      	mov	r1, r3
 8000546:	2002      	movs	r0, #2
 8000548:	f7ff fe70 	bl	800022c <writeRegister>
    while (get_status() != state_);
 800054c:	bf00      	nop
 800054e:	f7ff fe9d 	bl	800028c <get_status>
 8000552:	4603      	mov	r3, r0
 8000554:	461a      	mov	r2, r3
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4293      	cmp	r3, r2
 800055a:	d1f8      	bne.n	800054e <_set_state+0x16>
}
 800055c:	bf00      	nop
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <set_state>:

void set_state(uint8_t state_)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b084      	sub	sp, #16
 800056a:	af00      	add	r7, sp, #0
 800056c:	4603      	mov	r3, r0
 800056e:	71fb      	strb	r3, [r7, #7]
	_set_state(state_);
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ffe0 	bl	8000538 <_set_state>
    uint8_t old_state = get_status();
 8000578:	f7ff fe88 	bl	800028c <get_status>
 800057c:	4603      	mov	r3, r0
 800057e:	73fb      	strb	r3, [r7, #15]

    if (state_ == old_state) {
 8000580:	79fa      	ldrb	r2, [r7, #7]
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	429a      	cmp	r2, r3
 8000586:	d01d      	beq.n	80005c4 <set_state+0x5e>
        return;
    }
    /* make sure there is no ongoing transmission, or state transition already
     * in progress */
    while (old_state == AT86RF2XX_STATE_BUSY_RX_AACK ||
 8000588:	e003      	b.n	8000592 <set_state+0x2c>
           old_state == AT86RF2XX_STATE_BUSY_TX_ARET ||
           old_state == AT86RF2XX_STATE_IN_PROGRESS) {
        old_state = get_status();
 800058a:	f7ff fe7f 	bl	800028c <get_status>
 800058e:	4603      	mov	r3, r0
 8000590:	73fb      	strb	r3, [r7, #15]
    while (old_state == AT86RF2XX_STATE_BUSY_RX_AACK ||
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	2b11      	cmp	r3, #17
 8000596:	d0f8      	beq.n	800058a <set_state+0x24>
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	2b12      	cmp	r3, #18
 800059c:	d0f5      	beq.n	800058a <set_state+0x24>
           old_state == AT86RF2XX_STATE_BUSY_TX_ARET ||
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	2b1f      	cmp	r3, #31
 80005a2:	d0f2      	beq.n	800058a <set_state+0x24>
    }

    /* we need to go via PLL_ON if we are moving between RX_AACK_ON <-> TX_ARET_ON */
    if ((old_state == AT86RF2XX_STATE_RX_AACK_ON &&
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	2b16      	cmp	r3, #22
 80005a8:	d102      	bne.n	80005b0 <set_state+0x4a>
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	2b19      	cmp	r3, #25
 80005ae:	d005      	beq.n	80005bc <set_state+0x56>
             state_ == AT86RF2XX_STATE_TX_ARET_ON) ||
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b19      	cmp	r3, #25
 80005b4:	d107      	bne.n	80005c6 <set_state+0x60>
        (old_state == AT86RF2XX_STATE_TX_ARET_ON &&
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b16      	cmp	r3, #22
 80005ba:	d104      	bne.n	80005c6 <set_state+0x60>
             state_ == AT86RF2XX_STATE_RX_AACK_ON)) {
        _set_state(AT86RF2XX_STATE_PLL_ON);
 80005bc:	2009      	movs	r0, #9
 80005be:	f7ff ffbb 	bl	8000538 <_set_state>
 80005c2:	e000      	b.n	80005c6 <set_state+0x60>
        return;
 80005c4:	bf00      	nop
    /* check if we need to wake up from sleep mode */
    else if (old_state == AT86RF2XX_STATE_SLEEP) {
        //DEBUG("at86rf2xx: waking up from sleep mode\n");
        //assert_awake();
    }
}
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <set_addr_short>:

void set_addr_short(uint16_t addr)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
	uint8_t addr_short[2];
    addr_short[0] = addr >> 8;
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	0a1b      	lsrs	r3, r3, #8
 80005da:	b29b      	uxth	r3, r3
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	733b      	strb	r3, [r7, #12]
    addr_short[1] = addr & 0xff;
 80005e0:	88fb      	ldrh	r3, [r7, #6]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	737b      	strb	r3, [r7, #13]
    writeRegister(AT86RF2XX_REG__SHORT_ADDR_0,
 80005e6:	7b3b      	ldrb	r3, [r7, #12]
 80005e8:	4619      	mov	r1, r3
 80005ea:	2020      	movs	r0, #32
 80005ec:	f7ff fe1e 	bl	800022c <writeRegister>
                        addr_short[0]);
    writeRegister(AT86RF2XX_REG__SHORT_ADDR_1,
 80005f0:	7b7b      	ldrb	r3, [r7, #13]
 80005f2:	4619      	mov	r1, r3
 80005f4:	2021      	movs	r0, #33	; 0x21
 80005f6:	f7ff fe19 	bl	800022c <writeRegister>
                        addr_short[1]);
}
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <set_addr_long>:

void set_addr_long(uint64_t addr)
{
 8000602:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000604:	b087      	sub	sp, #28
 8000606:	af00      	add	r7, sp, #0
 8000608:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t addr_long[8];
    for (int i = 0; i < 8; i++) {
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	e029      	b.n	8000666 <set_addr_long+0x64>
        addr_long[i] = (addr >> ((7 - i) * 8));
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	f1c3 0307 	rsb	r3, r3, #7
 8000618:	00d9      	lsls	r1, r3, #3
 800061a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800061e:	f1c1 0620 	rsb	r6, r1, #32
 8000622:	f1a1 0020 	sub.w	r0, r1, #32
 8000626:	fa22 f401 	lsr.w	r4, r2, r1
 800062a:	fa03 f606 	lsl.w	r6, r3, r6
 800062e:	4334      	orrs	r4, r6
 8000630:	fa23 f000 	lsr.w	r0, r3, r0
 8000634:	4304      	orrs	r4, r0
 8000636:	fa23 f501 	lsr.w	r5, r3, r1
 800063a:	b2e1      	uxtb	r1, r4
 800063c:	f107 020c 	add.w	r2, r7, #12
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	4413      	add	r3, r2
 8000644:	460a      	mov	r2, r1
 8000646:	701a      	strb	r2, [r3, #0]
        writeRegister((AT86RF2XX_REG__IEEE_ADDR_0 + i), addr_long[i]);
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	3324      	adds	r3, #36	; 0x24
 800064e:	b2d8      	uxtb	r0, r3
 8000650:	f107 020c 	add.w	r2, r7, #12
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	4413      	add	r3, r2
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4619      	mov	r1, r3
 800065c:	f7ff fde6 	bl	800022c <writeRegister>
    for (int i = 0; i < 8; i++) {
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	3301      	adds	r3, #1
 8000664:	617b      	str	r3, [r7, #20]
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	2b07      	cmp	r3, #7
 800066a:	ddd2      	ble.n	8000612 <set_addr_long+0x10>
    }
}
 800066c:	bf00      	nop
 800066e:	bf00      	nop
 8000670:	371c      	adds	r7, #28
 8000672:	46bd      	mov	sp, r7
 8000674:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000676 <set_pan>:

void set_pan(uint16_t pan)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	4603      	mov	r3, r0
 800067e:	80fb      	strh	r3, [r7, #6]
    //pan = pan_;
    //DEBUG("pan0: %u, pan1: %u\n", (uint8_t)pan, pan >> 8);
    writeRegister(AT86RF2XX_REG__PAN_ID_0, (uint8_t)pan);
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	4619      	mov	r1, r3
 8000686:	2022      	movs	r0, #34	; 0x22
 8000688:	f7ff fdd0 	bl	800022c <writeRegister>
    writeRegister(AT86RF2XX_REG__PAN_ID_1, (pan >> 8));
 800068c:	88fb      	ldrh	r3, [r7, #6]
 800068e:	0a1b      	lsrs	r3, r3, #8
 8000690:	b29b      	uxth	r3, r3
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4619      	mov	r1, r3
 8000696:	2023      	movs	r0, #35	; 0x23
 8000698:	f7ff fdc8 	bl	800022c <writeRegister>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <set_chan>:

void set_chan(uint8_t channel)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp;

    if (channel < AT86RF2XX_MIN_CHANNEL
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	2b0a      	cmp	r3, #10
 80006b2:	d91b      	bls.n	80006ec <set_chan+0x48>
        || channel > AT86RF2XX_MAX_CHANNEL) {
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	2b1a      	cmp	r3, #26
 80006b8:	d818      	bhi.n	80006ec <set_chan+0x48>
        return;
    }
    //chan = channel;
    tmp = readRegister(AT86RF2XX_REG__PHY_CC_CCA);
 80006ba:	2008      	movs	r0, #8
 80006bc:	f7ff fd84 	bl	80001c8 <readRegister>
 80006c0:	4603      	mov	r3, r0
 80006c2:	73fb      	strb	r3, [r7, #15]
    tmp &= ~(AT86RF2XX_PHY_CC_CCA_MASK__CHANNEL);
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	f023 031f 	bic.w	r3, r3, #31
 80006ca:	73fb      	strb	r3, [r7, #15]
    tmp |= (channel & AT86RF2XX_PHY_CC_CCA_MASK__CHANNEL);
 80006cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d0:	f003 031f 	and.w	r3, r3, #31
 80006d4:	b25a      	sxtb	r2, r3
 80006d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006da:	4313      	orrs	r3, r2
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	73fb      	strb	r3, [r7, #15]
    writeRegister(AT86RF2XX_REG__PHY_CC_CCA, tmp);
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	4619      	mov	r1, r3
 80006e4:	2008      	movs	r0, #8
 80006e6:	f7ff fda1 	bl	800022c <writeRegister>
 80006ea:	e000      	b.n	80006ee <set_chan+0x4a>
        return;
 80006ec:	bf00      	nop
}
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	0000      	movs	r0, r0
	...

080006f8 <at86rf233_init>:

void at86rf233_init(){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0


	HAL_GPIO_WritePin(SLP_GPIO_Port, SLP_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2140      	movs	r1, #64	; 0x40
 8000702:	4839      	ldr	r0, [pc, #228]	; (80007e8 <at86rf233_init+0xf0>)
 8000704:	f000 fed2 	bl	80014ac <HAL_GPIO_WritePin>
	//digitalWrite(SLP_TR, LOW);
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800070e:	4836      	ldr	r0, [pc, #216]	; (80007e8 <at86rf233_init+0xf0>)
 8000710:	f000 fecc 	bl	80014ac <HAL_GPIO_WritePin>
	//digitalWrite(RESET, HIGH);
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071a:	4834      	ldr	r0, [pc, #208]	; (80007ec <at86rf233_init+0xf4>)
 800071c:	f000 fec6 	bl	80014ac <HAL_GPIO_WritePin>
	//digitalWrite(SEL, HIGH);

	uint8_t part_num = readRegister(AT86RF2XX_REG__PART_NUM);
 8000720:	201c      	movs	r0, #28
 8000722:	f7ff fd51 	bl	80001c8 <readRegister>
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
	    if (part_num != 0xb) {
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b0b      	cmp	r3, #11
 800072e:	d153      	bne.n	80007d8 <at86rf233_init+0xe0>

	        return -1;
	    }
	//
	hardware_reset();
 8000730:	f000 f882 	bl	8000838 <hardware_reset>
	reset_state_machine();
 8000734:	f000 f86f 	bl	8000816 <reset_state_machine>
	//

	 seq_nr = 0;
 8000738:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <at86rf233_init+0xf8>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
	 options = 0;
 800073e:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <at86rf233_init+0xfc>)
 8000740:	2200      	movs	r2, #0
 8000742:	801a      	strh	r2, [r3, #0]


	  // Enable promiscuous mode:
	set_addr_short(0x1);
 8000744:	2001      	movs	r0, #1
 8000746:	f7ff ff41 	bl	80005cc <set_addr_short>
	set_pan(0x0023);
 800074a:	2023      	movs	r0, #35	; 0x23
 800074c:	f7ff ff93 	bl	8000676 <set_pan>
	set_addr_long(0x1222334455667768);
 8000750:	a123      	add	r1, pc, #140	; (adr r1, 80007e0 <at86rf233_init+0xe8>)
 8000752:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000756:	f7ff ff54 	bl	8000602 <set_addr_long>


	set_chan(AT86RF2XX_DEFAULT_CHANNEL);
 800075a:	200b      	movs	r0, #11
 800075c:	f7ff ffa2 	bl	80006a4 <set_chan>


	writeRegister(0x05, 0x0); // tx power
 8000760:	2100      	movs	r1, #0
 8000762:	2005      	movs	r0, #5
 8000764:	f7ff fd62 	bl	800022c <writeRegister>

	/* set default options */
	 set_option(AT86RF2XX_OPT_PROMISCUOUS, 1);
 8000768:	2101      	movs	r1, #1
 800076a:	2004      	movs	r0, #4
 800076c:	f7ff fe14 	bl	8000398 <set_option>
	 set_option(AT86RF2XX_OPT_AUTOACK, 1);
 8000770:	2101      	movs	r1, #1
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff fe10 	bl	8000398 <set_option>
	 set_option(AT86RF2XX_OPT_CSMA, 1);
 8000778:	2101      	movs	r1, #1
 800077a:	2002      	movs	r0, #2
 800077c:	f7ff fe0c 	bl	8000398 <set_option>
	 set_option(AT86RF2XX_OPT_TELL_RX_START, 1);
 8000780:	2101      	movs	r1, #1
 8000782:	2040      	movs	r0, #64	; 0x40
 8000784:	f7ff fe08 	bl	8000398 <set_option>
	 set_option(AT86RF2XX_OPT_TELL_RX_END, 1);
 8000788:	2101      	movs	r1, #1
 800078a:	2080      	movs	r0, #128	; 0x80
 800078c:	f7ff fe04 	bl	8000398 <set_option>

	writeRegister(AT86RF2XX_REG__TRX_CTRL_2, AT86RF2XX_TRX_CTRL_2_MASK__RX_SAFE_MODE);
 8000790:	2180      	movs	r1, #128	; 0x80
 8000792:	200c      	movs	r0, #12
 8000794:	f7ff fd4a 	bl	800022c <writeRegister>



	/* disable clock output to save power */
    uint8_t tmp = readRegister(AT86RF2XX_REG__TRX_CTRL_0);
 8000798:	2003      	movs	r0, #3
 800079a:	f7ff fd15 	bl	80001c8 <readRegister>
 800079e:	4603      	mov	r3, r0
 80007a0:	71bb      	strb	r3, [r7, #6]
    tmp &= ~(AT86RF2XX_TRX_CTRL_0_MASK__CLKM_CTRL);
 80007a2:	79bb      	ldrb	r3, [r7, #6]
 80007a4:	f023 0307 	bic.w	r3, r3, #7
 80007a8:	71bb      	strb	r3, [r7, #6]
    tmp &= ~(AT86RF2XX_TRX_CTRL_0_MASK__CLKM_SHA_SEL);
 80007aa:	79bb      	ldrb	r3, [r7, #6]
 80007ac:	f023 0308 	bic.w	r3, r3, #8
 80007b0:	71bb      	strb	r3, [r7, #6]
    tmp |= (AT86RF2XX_TRX_CTRL_0_CLKM_CTRL__OFF);
    writeRegister(AT86RF2XX_REG__TRX_CTRL_0, tmp);
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	4619      	mov	r1, r3
 80007b6:	2003      	movs	r0, #3
 80007b8:	f7ff fd38 	bl	800022c <writeRegister>

	    /* enable interrupts */
	writeRegister(AT86RF2XX_REG__IRQ_MASK, AT86RF2XX_IRQ_STATUS_MASK__TRX_END);
 80007bc:	2108      	movs	r1, #8
 80007be:	200e      	movs	r0, #14
 80007c0:	f7ff fd34 	bl	800022c <writeRegister>

	    /* clear interrupt flags */
	readRegister(AT86RF2XX_REG__IRQ_STATUS);
 80007c4:	200f      	movs	r0, #15
 80007c6:	f7ff fcff 	bl	80001c8 <readRegister>

	set_state(25); //16 - RX_ACACK 6 - rx 25 - tx
 80007ca:	2019      	movs	r0, #25
 80007cc:	f7ff fecb 	bl	8000566 <set_state>
	  //Serial.print("Detected part nr: 0x");
	  //Serial.println(readRegister(0x1C), HEX);
	  //Serial.print("Version: 0x");
	  //Serial.println(readRegister(0x1D), HEX);

	HAL_Delay(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f000 fbb7 	bl	8000f44 <HAL_Delay>
 80007d6:	e000      	b.n	80007da <at86rf233_init+0xe2>
	        return -1;
 80007d8:	bf00      	nop
}
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	55667768 	.word	0x55667768
 80007e4:	12223344 	.word	0x12223344
 80007e8:	48000400 	.word	0x48000400
 80007ec:	48000800 	.word	0x48000800
 80007f0:	2000009a 	.word	0x2000009a
 80007f4:	20000098 	.word	0x20000098

080007f8 <force_trx_off>:
void force_trx_off()
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
    writeRegister(AT86RF2XX_REG__TRX_STATE, AT86RF2XX_TRX_STATE__FORCE_TRX_OFF);
 80007fc:	2103      	movs	r1, #3
 80007fe:	2002      	movs	r0, #2
 8000800:	f7ff fd14 	bl	800022c <writeRegister>
    while (get_status() != AT86RF2XX_STATE_TRX_OFF);
 8000804:	bf00      	nop
 8000806:	f7ff fd41 	bl	800028c <get_status>
 800080a:	4603      	mov	r3, r0
 800080c:	2b08      	cmp	r3, #8
 800080e:	d1fa      	bne.n	8000806 <force_trx_off+0xe>
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}

08000816 <reset_state_machine>:
void reset_state_machine()
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0

    //assert_awake();

    /* Wait for any state transitions to complete before forcing TRX_OFF */
    do {
        old_state = get_status();
 800081c:	f7ff fd36 	bl	800028c <get_status>
 8000820:	4603      	mov	r3, r0
 8000822:	71fb      	strb	r3, [r7, #7]
    } while (old_state == AT86RF2XX_STATE_IN_PROGRESS);
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	2b1f      	cmp	r3, #31
 8000828:	d0f8      	beq.n	800081c <reset_state_machine+0x6>

    force_trx_off();
 800082a:	f7ff ffe5 	bl	80007f8 <force_trx_off>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <hardware_reset>:

void hardware_reset(void){
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

	    /* trigger hardware reset */

		HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000842:	4808      	ldr	r0, [pc, #32]	; (8000864 <hardware_reset+0x2c>)
 8000844:	f000 fe32 	bl	80014ac <HAL_GPIO_WritePin>
	    HAL_Delay(AT86RF2XX_RESET_PULSE_WIDTH);
 8000848:	2001      	movs	r0, #1
 800084a:	f000 fb7b 	bl	8000f44 <HAL_Delay>
	    HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000854:	4803      	ldr	r0, [pc, #12]	; (8000864 <hardware_reset+0x2c>)
 8000856:	f000 fe29 	bl	80014ac <HAL_GPIO_WritePin>
	    HAL_Delay(AT86RF2XX_RESET_PULSE_WIDTH);
 800085a:	2001      	movs	r0, #1
 800085c:	f000 fb72 	bl	8000f44 <HAL_Delay>
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	48000400 	.word	0x48000400

08000868 <sram_write>:

void sram_write(const uint8_t offset,
                            const uint8_t *data,
                            const size_t len)
  {
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
 8000874:	73fb      	strb	r3, [r7, #15]
      uint8_t writeCommand = AT86RF2XX_ACCESS_SRAM | AT86RF2XX_ACCESS_WRITE;
 8000876:	2340      	movs	r3, #64	; 0x40
 8000878:	75fb      	strb	r3, [r7, #23]
      CSRESET;
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000880:	4811      	ldr	r0, [pc, #68]	; (80008c8 <sram_write+0x60>)
 8000882:	f000 fe13 	bl	80014ac <HAL_GPIO_WritePin>
      HAL_SPI_Transmit(&hspi3, &writeCommand, sizeof(writeCommand), HAL_MAX_DELAY);
 8000886:	f107 0117 	add.w	r1, r7, #23
 800088a:	f04f 33ff 	mov.w	r3, #4294967295
 800088e:	2201      	movs	r2, #1
 8000890:	480e      	ldr	r0, [pc, #56]	; (80008cc <sram_write+0x64>)
 8000892:	f001 fd0a 	bl	80022aa <HAL_SPI_Transmit>
     // SPI.transfer(writeCommand);
      HAL_SPI_Transmit(&hspi3, &offset, sizeof(offset), HAL_MAX_DELAY);
 8000896:	f107 010f 	add.w	r1, r7, #15
 800089a:	f04f 33ff 	mov.w	r3, #4294967295
 800089e:	2201      	movs	r2, #1
 80008a0:	480a      	ldr	r0, [pc, #40]	; (80008cc <sram_write+0x64>)
 80008a2:	f001 fd02 	bl	80022aa <HAL_SPI_Transmit>
      HAL_SPI_Transmit(&hspi3, data, sizeof(data), HAL_MAX_DELAY);
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	2204      	movs	r2, #4
 80008ac:	68b9      	ldr	r1, [r7, #8]
 80008ae:	4807      	ldr	r0, [pc, #28]	; (80008cc <sram_write+0x64>)
 80008b0:	f001 fcfb 	bl	80022aa <HAL_SPI_Transmit>
     // SPI.transfer((char)offset);
      //for (int b=0; b<len; b++) {
       // SPI.transfer(data[b]);
      //}
      CSSET;
 80008b4:	2201      	movs	r2, #1
 80008b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ba:	4803      	ldr	r0, [pc, #12]	; (80008c8 <sram_write+0x60>)
 80008bc:	f000 fdf6 	bl	80014ac <HAL_GPIO_WritePin>
  }
 80008c0:	bf00      	nop
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	48000800 	.word	0x48000800
 80008cc:	20000034 	.word	0x20000034

080008d0 <tx_prepare>:



 void tx_prepare(void){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
	 uint8_t state;
	     /* make sure ongoing transmissions are finished */
	 do {
	     state = get_status();
 80008d6:	f7ff fcd9 	bl	800028c <get_status>
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
	 }
	 while (state == AT86RF2XX_STATE_BUSY_TX_ARET);
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b12      	cmp	r3, #18
 80008e2:	d0f8      	beq.n	80008d6 <tx_prepare+0x6>

	     /* if receiving cancel */
	 if(state == AT86RF2XX_STATE_BUSY_RX_AACK) {
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b11      	cmp	r3, #17
 80008e8:	d103      	bne.n	80008f2 <tx_prepare+0x22>
		 //force_trx_off();
	 	 idle_state = AT86RF2XX_STATE_RX_AACK_ON;
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <tx_prepare+0x44>)
 80008ec:	2216      	movs	r2, #22
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	e005      	b.n	80008fe <tx_prepare+0x2e>
	 } else if (state != AT86RF2XX_STATE_TX_ARET_ON) {
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b19      	cmp	r3, #25
 80008f6:	d002      	beq.n	80008fe <tx_prepare+0x2e>
	 	 idle_state = state;
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	4a06      	ldr	r2, [pc, #24]	; (8000914 <tx_prepare+0x44>)
 80008fc:	6013      	str	r3, [r2, #0]
	 }
	 	 writeRegister(0x02,0x02);
 80008fe:	2102      	movs	r1, #2
 8000900:	2002      	movs	r0, #2
 8000902:	f7ff fc93 	bl	800022c <writeRegister>
	     frame_len = IEEE802154_FCS_LEN;
 8000906:	4b04      	ldr	r3, [pc, #16]	; (8000918 <tx_prepare+0x48>)
 8000908:	2202      	movs	r2, #2
 800090a:	601a      	str	r2, [r3, #0]
 }
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	2000002c 	.word	0x2000002c
 8000918:	20000028 	.word	0x20000028

0800091c <tx_load>:

size_t tx_load(uint8_t *data,
         size_t len, size_t offset)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
	frame_len += (uint8_t)len;
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	461a      	mov	r2, r3
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <tx_load+0x3c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4413      	add	r3, r2
 8000934:	4a08      	ldr	r2, [pc, #32]	; (8000958 <tx_load+0x3c>)
 8000936:	6013      	str	r3, [r2, #0]
	sram_write(offset + 1, data, len);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	3301      	adds	r3, #1
 800093e:	b2db      	uxtb	r3, r3
 8000940:	68ba      	ldr	r2, [r7, #8]
 8000942:	68f9      	ldr	r1, [r7, #12]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ff8f 	bl	8000868 <sram_write>
	return offset + len;
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	4413      	add	r3, r2
}
 8000950:	4618      	mov	r0, r3
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000028 	.word	0x20000028

0800095c <tx_exec>:

void tx_exec()
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
    /* write frame length field in FIFO */
    sram_write(0, &(frame_len), 1);
 8000960:	2201      	movs	r2, #1
 8000962:	4905      	ldr	r1, [pc, #20]	; (8000978 <tx_exec+0x1c>)
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff ff7f 	bl	8000868 <sram_write>
    /* trigger sending of pre-loaded frame */
    writeRegister(AT86RF2XX_REG__TRX_STATE, AT86RF2XX_TRX_STATE__TX_START);
 800096a:	2102      	movs	r1, #2
 800096c:	2002      	movs	r0, #2
 800096e:	f7ff fc5d 	bl	800022c <writeRegister>
    /*if (at86rf2xx.event_cb && (at86rf2xx.options & AT86RF2XX_OPT_TELL_TX_START)) {
        at86rf2xx.event_cb(NETDEV_EVENT_TX_STARTED, NULL);
    }*/
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000028 	.word	0x20000028

0800097c <send>:
 int send(uint8_t *data, size_t len)
  {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
	tx_prepare();
 8000986:	f7ff ffa3 	bl	80008d0 <tx_prepare>
	tx_load(data, len, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	6839      	ldr	r1, [r7, #0]
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff ffc4 	bl	800091c <tx_load>
	tx_exec();
 8000994:	f7ff ffe2 	bl	800095c <tx_exec>
    return len;
 8000998:	683b      	ldr	r3, [r7, #0]
  }
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009aa:	f000 fa56 	bl	8000e5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ae:	f000 f83b 	bl	8000a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b2:	f000 f8bd 	bl	8000b30 <MX_GPIO_Init>
  MX_SPI3_Init();
 80009b6:	f000 f87d 	bl	8000ab4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  at86rf233_init();
 80009ba:	f7ff fe9d 	bl	80006f8 <at86rf233_init>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80009be:	2180      	movs	r1, #128	; 0x80
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c4:	f000 fd8a 	bl	80014dc <HAL_GPIO_TogglePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //writeRegister(0x02,0x02);
	  //send("bla", sizeof("bla"));
	  uint8_t CurrentState = get_status(); //Page 37 of datasheet
 80009c8:	f7ff fc60 	bl	800028c <get_status>
 80009cc:	4603      	mov	r3, r0
 80009ce:	75fb      	strb	r3, [r7, #23]
	  uint8_t Interrupt = readRegister(0x0F);
 80009d0:	200f      	movs	r0, #15
 80009d2:	f7ff fbf9 	bl	80001c8 <readRegister>
 80009d6:	4603      	mov	r3, r0
 80009d8:	75bb      	strb	r3, [r7, #22]
	  uint8_t PHY_RSSI = readRegister(0x06); //if bit[7] = 1 (RX_CRC_VALID), FCS is valid
 80009da:	2006      	movs	r0, #6
 80009dc:	f7ff fbf4 	bl	80001c8 <readRegister>
 80009e0:	4603      	mov	r3, r0
 80009e2:	757b      	strb	r3, [r7, #21]

	  uint8_t irq_mask = readRegister(AT86RF2XX_REG__IRQ_STATUS);
 80009e4:	200f      	movs	r0, #15
 80009e6:	f7ff fbef 	bl	80001c8 <readRegister>
 80009ea:	4603      	mov	r3, r0
 80009ec:	753b      	strb	r3, [r7, #20]

	  if (irq_mask & AT86RF2XX_IRQ_STATUS_MASK__RX_START){
 80009ee:	7d3b      	ldrb	r3, [r7, #20]
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d006      	beq.n	8000a06 <main+0x62>
		  	uint8_t test = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	74fb      	strb	r3, [r7, #19]
		  	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80009fc:	2180      	movs	r1, #128	; 0x80
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a02:	f000 fd6b 	bl	80014dc <HAL_GPIO_TogglePin>
	  }
	  uint8_t data[] = {0xa7,0x1, 0x431, 'h', 'e', 'l', 'l', 'o'};
 8000a06:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <main+0x80>)
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a0e:	e883 0003 	stmia.w	r3, {r0, r1}
	  size_t len = 7; // Length of the data in bytes
 8000a12:	2307      	movs	r3, #7
 8000a14:	60fb      	str	r3, [r7, #12]
	  send(data, sizeof(data));
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2108      	movs	r1, #8
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ffae 	bl	800097c <send>
  {
 8000a20:	e7d2      	b.n	80009c8 <main+0x24>
 8000a22:	bf00      	nop
 8000a24:	08002ff4 	.word	0x08002ff4

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b096      	sub	sp, #88	; 0x58
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	2244      	movs	r2, #68	; 0x44
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f002 fac8 	bl	8002fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a4a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a4e:	f000 fd6d 	bl	800152c <HAL_PWREx_ControlVoltageScaling>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a58:	f000 f8f0 	bl	8000c3c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a5c:	2310      	movs	r3, #16
 8000a5e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a60:	2301      	movs	r3, #1
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a68:	2360      	movs	r3, #96	; 0x60
 8000a6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fdaf 	bl	80015d8 <HAL_RCC_OscConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000a80:	f000 f8dc 	bl	8000c3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a84:	230f      	movs	r3, #15
 8000a86:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a98:	463b      	mov	r3, r7
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 f975 	bl	8001d8c <HAL_RCC_ClockConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000aa8:	f000 f8c8 	bl	8000c3c <Error_Handler>
  }
}
 8000aac:	bf00      	nop
 8000aae:	3758      	adds	r7, #88	; 0x58
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <MX_SPI3_Init+0x74>)
 8000aba:	4a1c      	ldr	r2, [pc, #112]	; (8000b2c <MX_SPI3_Init+0x78>)
 8000abc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_SPI3_Init+0x74>)
 8000ac0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ac4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <MX_SPI3_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_SPI3_Init+0x74>)
 8000ace:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ad2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_SPI3_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_SPI3_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_SPI3_Init+0x74>)
 8000ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_SPI3_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_SPI3_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_SPI3_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_SPI3_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_SPI3_Init+0x74>)
 8000b02:	2207      	movs	r2, #7
 8000b04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_SPI3_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_SPI3_Init+0x74>)
 8000b0e:	2208      	movs	r2, #8
 8000b10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_SPI3_Init+0x74>)
 8000b14:	f001 fb26 	bl	8002164 <HAL_SPI_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b1e:	f000 f88d 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000034 	.word	0x20000034
 8000b2c:	40003c00 	.word	0x40003c00

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b3a      	ldr	r3, [pc, #232]	; (8000c30 <MX_GPIO_Init+0x100>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a39      	ldr	r2, [pc, #228]	; (8000c30 <MX_GPIO_Init+0x100>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b37      	ldr	r3, [pc, #220]	; (8000c30 <MX_GPIO_Init+0x100>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b34      	ldr	r3, [pc, #208]	; (8000c30 <MX_GPIO_Init+0x100>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	4a33      	ldr	r2, [pc, #204]	; (8000c30 <MX_GPIO_Init+0x100>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6a:	4b31      	ldr	r3, [pc, #196]	; (8000c30 <MX_GPIO_Init+0x100>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	4b2e      	ldr	r3, [pc, #184]	; (8000c30 <MX_GPIO_Init+0x100>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	4a2d      	ldr	r2, [pc, #180]	; (8000c30 <MX_GPIO_Init+0x100>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b82:	4b2b      	ldr	r3, [pc, #172]	; (8000c30 <MX_GPIO_Init+0x100>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b96:	f000 fc89 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ba0:	4824      	ldr	r0, [pc, #144]	; (8000c34 <MX_GPIO_Init+0x104>)
 8000ba2:	f000 fc83 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SLP_Pin|RESET_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000bac:	4822      	ldr	r0, [pc, #136]	; (8000c38 <MX_GPIO_Init+0x108>)
 8000bae:	f000 fc7d 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bcc:	f000 fac4 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	4619      	mov	r1, r3
 8000be4:	4813      	ldr	r0, [pc, #76]	; (8000c34 <MX_GPIO_Init+0x104>)
 8000be6:	f000 fab7 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000bea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	4619      	mov	r1, r3
 8000c02:	480c      	ldr	r0, [pc, #48]	; (8000c34 <MX_GPIO_Init+0x104>)
 8000c04:	f000 faa8 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : SLP_Pin RESET_Pin */
  GPIO_InitStruct.Pin = SLP_Pin|RESET_Pin;
 8000c08:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_GPIO_Init+0x108>)
 8000c22:	f000 fa99 	bl	8001158 <HAL_GPIO_Init>

}
 8000c26:	bf00      	nop
 8000c28:	3720      	adds	r7, #32
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000
 8000c34:	48000800 	.word	0x48000800
 8000c38:	48000400 	.word	0x48000400

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>
	...

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <HAL_MspInit+0x44>)
 8000c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c52:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <HAL_MspInit+0x44>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6613      	str	r3, [r2, #96]	; 0x60
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_MspInit+0x44>)
 8000c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_MspInit+0x44>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_MspInit+0x44>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	6593      	str	r3, [r2, #88]	; 0x58
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_MspInit+0x44>)
 8000c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	; 0x30
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a34      	ldr	r2, [pc, #208]	; (8000d80 <HAL_SPI_MspInit+0xf0>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d162      	bne.n	8000d78 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cb2:	4b34      	ldr	r3, [pc, #208]	; (8000d84 <HAL_SPI_MspInit+0xf4>)
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb6:	4a33      	ldr	r2, [pc, #204]	; (8000d84 <HAL_SPI_MspInit+0xf4>)
 8000cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cbe:	4b31      	ldr	r3, [pc, #196]	; (8000d84 <HAL_SPI_MspInit+0xf4>)
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cc6:	61bb      	str	r3, [r7, #24]
 8000cc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b2e      	ldr	r3, [pc, #184]	; (8000d84 <HAL_SPI_MspInit+0xf4>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	4a2d      	ldr	r2, [pc, #180]	; (8000d84 <HAL_SPI_MspInit+0xf4>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd6:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <HAL_SPI_MspInit+0xf4>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce2:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <HAL_SPI_MspInit+0xf4>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	4a27      	ldr	r2, [pc, #156]	; (8000d84 <HAL_SPI_MspInit+0xf4>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cee:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <HAL_SPI_MspInit+0xf4>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <HAL_SPI_MspInit+0xf4>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	4a21      	ldr	r2, [pc, #132]	; (8000d84 <HAL_SPI_MspInit+0xf4>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <HAL_SPI_MspInit+0xf4>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    PA15 (JTDI)     ------> SPI3_NSS
    PC12     ------> SPI3_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d24:	2306      	movs	r3, #6
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d32:	f000 fa11 	bl	8001158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d48:	2306      	movs	r3, #6
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	480d      	ldr	r0, [pc, #52]	; (8000d88 <HAL_SPI_MspInit+0xf8>)
 8000d54:	f000 fa00 	bl	8001158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000d58:	2318      	movs	r3, #24
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d68:	2306      	movs	r3, #6
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4619      	mov	r1, r3
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <HAL_SPI_MspInit+0xfc>)
 8000d74:	f000 f9f0 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d78:	bf00      	nop
 8000d7a:	3730      	adds	r7, #48	; 0x30
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40003c00 	.word	0x40003c00
 8000d84:	40021000 	.word	0x40021000
 8000d88:	48000800 	.word	0x48000800
 8000d8c:	48000400 	.word	0x48000400

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <NMI_Handler+0x4>

08000d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <MemManage_Handler+0x4>

08000da2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <UsageFault_Handler+0x4>

08000dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ddc:	f000 f892 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <SystemInit+0x20>)
 8000dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <SystemInit+0x20>)
 8000df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e0c:	f7ff ffea 	bl	8000de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e10:	480c      	ldr	r0, [pc, #48]	; (8000e44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e12:	490d      	ldr	r1, [pc, #52]	; (8000e48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <LoopForever+0xe>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e28:	4c0a      	ldr	r4, [pc, #40]	; (8000e54 <LoopForever+0x16>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e36:	f002 f8a5 	bl	8002f84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e3a:	f7ff fdb3 	bl	80009a4 <main>

08000e3e <LoopForever>:

LoopForever:
    b LoopForever
 8000e3e:	e7fe      	b.n	8000e3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e4c:	08003044 	.word	0x08003044
  ldr r2, =_sbss
 8000e50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e54:	200000a0 	.word	0x200000a0

08000e58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC1_2_IRQHandler>

08000e5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 f943 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6a:	200f      	movs	r0, #15
 8000e6c:	f000 f80e 	bl	8000e8c <HAL_InitTick>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d002      	beq.n	8000e7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	71fb      	strb	r3, [r7, #7]
 8000e7a:	e001      	b.n	8000e80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e7c:	f7ff fee4 	bl	8000c48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e80:	79fb      	ldrb	r3, [r7, #7]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e98:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <HAL_InitTick+0x6c>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d023      	beq.n	8000ee8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <HAL_InitTick+0x70>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <HAL_InitTick+0x6c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f941 	bl	800113e <HAL_SYSTICK_Config>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10f      	bne.n	8000ee2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d809      	bhi.n	8000edc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f000 f919 	bl	8001106 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <HAL_InitTick+0x74>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	e007      	b.n	8000eec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e004      	b.n	8000eec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e001      	b.n	8000eec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000000 	.word	0x20000000
 8000f00:	20000004 	.word	0x20000004

08000f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x20>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x24>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_IncTick+0x24>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008
 8000f28:	2000009c 	.word	0x2000009c

08000f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <HAL_GetTick+0x14>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	2000009c 	.word	0x2000009c

08000f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff ffee 	bl	8000f2c <HAL_GetTick>
 8000f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5c:	d005      	beq.n	8000f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_Delay+0x44>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4413      	add	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f6a:	bf00      	nop
 8000f6c:	f7ff ffde 	bl	8000f2c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d8f7      	bhi.n	8000f6c <HAL_Delay+0x28>
  {
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008

08000f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fbe:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	60d3      	str	r3, [r2, #12]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f7ff ff8e 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff47 	bl	8000f8c <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001118:	f7ff ff5c 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 800111c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff8e 	bl	8001044 <NVIC_EncodePriority>
 8001128:	4602      	mov	r2, r0
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5d 	bl	8000ff0 <__NVIC_SetPriority>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffb0 	bl	80010ac <SysTick_Config>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001166:	e17f      	b.n	8001468 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2101      	movs	r1, #1
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	fa01 f303 	lsl.w	r3, r1, r3
 8001174:	4013      	ands	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8171 	beq.w	8001462 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b01      	cmp	r3, #1
 800118a:	d005      	beq.n	8001198 <HAL_GPIO_Init+0x40>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d130      	bne.n	80011fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ce:	2201      	movs	r2, #1
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	091b      	lsrs	r3, r3, #4
 80011e4:	f003 0201 	and.w	r2, r3, #1
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	2b03      	cmp	r3, #3
 8001204:	d118      	bne.n	8001238 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800120c:	2201      	movs	r2, #1
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	08db      	lsrs	r3, r3, #3
 8001222:	f003 0201 	and.w	r2, r3, #1
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b03      	cmp	r3, #3
 8001242:	d017      	beq.n	8001274 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d123      	bne.n	80012c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	08da      	lsrs	r2, r3, #3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3208      	adds	r2, #8
 8001288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	220f      	movs	r2, #15
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	691a      	ldr	r2, [r3, #16]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	08da      	lsrs	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3208      	adds	r2, #8
 80012c2:	6939      	ldr	r1, [r7, #16]
 80012c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0203 	and.w	r2, r3, #3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80ac 	beq.w	8001462 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <HAL_GPIO_Init+0x330>)
 800130c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130e:	4a5e      	ldr	r2, [pc, #376]	; (8001488 <HAL_GPIO_Init+0x330>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6613      	str	r3, [r2, #96]	; 0x60
 8001316:	4b5c      	ldr	r3, [pc, #368]	; (8001488 <HAL_GPIO_Init+0x330>)
 8001318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001322:	4a5a      	ldr	r2, [pc, #360]	; (800148c <HAL_GPIO_Init+0x334>)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800134c:	d025      	beq.n	800139a <HAL_GPIO_Init+0x242>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4f      	ldr	r2, [pc, #316]	; (8001490 <HAL_GPIO_Init+0x338>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d01f      	beq.n	8001396 <HAL_GPIO_Init+0x23e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4e      	ldr	r2, [pc, #312]	; (8001494 <HAL_GPIO_Init+0x33c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d019      	beq.n	8001392 <HAL_GPIO_Init+0x23a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4d      	ldr	r2, [pc, #308]	; (8001498 <HAL_GPIO_Init+0x340>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x236>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4c      	ldr	r2, [pc, #304]	; (800149c <HAL_GPIO_Init+0x344>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x232>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4b      	ldr	r2, [pc, #300]	; (80014a0 <HAL_GPIO_Init+0x348>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x22e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4a      	ldr	r2, [pc, #296]	; (80014a4 <HAL_GPIO_Init+0x34c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x22a>
 800137e:	2306      	movs	r3, #6
 8001380:	e00c      	b.n	800139c <HAL_GPIO_Init+0x244>
 8001382:	2307      	movs	r3, #7
 8001384:	e00a      	b.n	800139c <HAL_GPIO_Init+0x244>
 8001386:	2305      	movs	r3, #5
 8001388:	e008      	b.n	800139c <HAL_GPIO_Init+0x244>
 800138a:	2304      	movs	r3, #4
 800138c:	e006      	b.n	800139c <HAL_GPIO_Init+0x244>
 800138e:	2303      	movs	r3, #3
 8001390:	e004      	b.n	800139c <HAL_GPIO_Init+0x244>
 8001392:	2302      	movs	r3, #2
 8001394:	e002      	b.n	800139c <HAL_GPIO_Init+0x244>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <HAL_GPIO_Init+0x244>
 800139a:	2300      	movs	r3, #0
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	f002 0203 	and.w	r2, r2, #3
 80013a2:	0092      	lsls	r2, r2, #2
 80013a4:	4093      	lsls	r3, r2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013ac:	4937      	ldr	r1, [pc, #220]	; (800148c <HAL_GPIO_Init+0x334>)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	089b      	lsrs	r3, r3, #2
 80013b2:	3302      	adds	r3, #2
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013ba:	4b3b      	ldr	r3, [pc, #236]	; (80014a8 <HAL_GPIO_Init+0x350>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013de:	4a32      	ldr	r2, [pc, #200]	; (80014a8 <HAL_GPIO_Init+0x350>)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013e4:	4b30      	ldr	r3, [pc, #192]	; (80014a8 <HAL_GPIO_Init+0x350>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001408:	4a27      	ldr	r2, [pc, #156]	; (80014a8 <HAL_GPIO_Init+0x350>)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800140e:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <HAL_GPIO_Init+0x350>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001432:	4a1d      	ldr	r2, [pc, #116]	; (80014a8 <HAL_GPIO_Init+0x350>)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_GPIO_Init+0x350>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800145c:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <HAL_GPIO_Init+0x350>)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	3301      	adds	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa22 f303 	lsr.w	r3, r2, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	f47f ae78 	bne.w	8001168 <HAL_GPIO_Init+0x10>
  }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000
 800148c:	40010000 	.word	0x40010000
 8001490:	48000400 	.word	0x48000400
 8001494:	48000800 	.word	0x48000800
 8001498:	48000c00 	.word	0x48000c00
 800149c:	48001000 	.word	0x48001000
 80014a0:	48001400 	.word	0x48001400
 80014a4:	48001800 	.word	0x48001800
 80014a8:	40010400 	.word	0x40010400

080014ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
 80014b8:	4613      	mov	r3, r2
 80014ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014bc:	787b      	ldrb	r3, [r7, #1]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014c8:	e002      	b.n	80014d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ca:	887a      	ldrh	r2, [r7, #2]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014ee:	887a      	ldrh	r2, [r7, #2]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4013      	ands	r3, r2
 80014f4:	041a      	lsls	r2, r3, #16
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	43d9      	mvns	r1, r3
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	400b      	ands	r3, r1
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	619a      	str	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <HAL_PWREx_GetVoltageRange+0x18>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40007000 	.word	0x40007000

0800152c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800153a:	d130      	bne.n	800159e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800153c:	4b23      	ldr	r3, [pc, #140]	; (80015cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001548:	d038      	beq.n	80015bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001552:	4a1e      	ldr	r2, [pc, #120]	; (80015cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001554:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001558:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800155a:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2232      	movs	r2, #50	; 0x32
 8001560:	fb02 f303 	mul.w	r3, r2, r3
 8001564:	4a1b      	ldr	r2, [pc, #108]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	0c9b      	lsrs	r3, r3, #18
 800156c:	3301      	adds	r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001570:	e002      	b.n	8001578 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	3b01      	subs	r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001584:	d102      	bne.n	800158c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f2      	bne.n	8001572 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001598:	d110      	bne.n	80015bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e00f      	b.n	80015be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015aa:	d007      	beq.n	80015bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015b4:	4a05      	ldr	r2, [pc, #20]	; (80015cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40007000 	.word	0x40007000
 80015d0:	20000000 	.word	0x20000000
 80015d4:	431bde83 	.word	0x431bde83

080015d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e3c6      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ea:	4ba1      	ldr	r3, [pc, #644]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015f4:	4b9e      	ldr	r3, [pc, #632]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 80e4 	beq.w	80017d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d007      	beq.n	8001622 <HAL_RCC_OscConfig+0x4a>
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	2b0c      	cmp	r3, #12
 8001616:	f040 808b 	bne.w	8001730 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2b01      	cmp	r3, #1
 800161e:	f040 8087 	bne.w	8001730 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001622:	4b93      	ldr	r3, [pc, #588]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d005      	beq.n	800163a <HAL_RCC_OscConfig+0x62>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e39e      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1a      	ldr	r2, [r3, #32]
 800163e:	4b8c      	ldr	r3, [pc, #560]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d004      	beq.n	8001654 <HAL_RCC_OscConfig+0x7c>
 800164a:	4b89      	ldr	r3, [pc, #548]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001652:	e005      	b.n	8001660 <HAL_RCC_OscConfig+0x88>
 8001654:	4b86      	ldr	r3, [pc, #536]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 8001656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001660:	4293      	cmp	r3, r2
 8001662:	d223      	bcs.n	80016ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fd1b 	bl	80020a4 <RCC_SetFlashLatencyFromMSIRange>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e37f      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001678:	4b7d      	ldr	r3, [pc, #500]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a7c      	ldr	r2, [pc, #496]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 800167e:	f043 0308 	orr.w	r3, r3, #8
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b7a      	ldr	r3, [pc, #488]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4977      	ldr	r1, [pc, #476]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001696:	4b76      	ldr	r3, [pc, #472]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	4972      	ldr	r1, [pc, #456]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	604b      	str	r3, [r1, #4]
 80016aa:	e025      	b.n	80016f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ac:	4b70      	ldr	r3, [pc, #448]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a6f      	ldr	r2, [pc, #444]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 80016b2:	f043 0308 	orr.w	r3, r3, #8
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b6d      	ldr	r3, [pc, #436]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	496a      	ldr	r1, [pc, #424]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ca:	4b69      	ldr	r3, [pc, #420]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	4965      	ldr	r1, [pc, #404]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d109      	bne.n	80016f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 fcdb 	bl	80020a4 <RCC_SetFlashLatencyFromMSIRange>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e33f      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016f8:	f000 fc48 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 80016fc:	4602      	mov	r2, r0
 80016fe:	4b5c      	ldr	r3, [pc, #368]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	091b      	lsrs	r3, r3, #4
 8001704:	f003 030f 	and.w	r3, r3, #15
 8001708:	495a      	ldr	r1, [pc, #360]	; (8001874 <HAL_RCC_OscConfig+0x29c>)
 800170a:	5ccb      	ldrb	r3, [r1, r3]
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
 8001714:	4a58      	ldr	r2, [pc, #352]	; (8001878 <HAL_RCC_OscConfig+0x2a0>)
 8001716:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001718:	4b58      	ldr	r3, [pc, #352]	; (800187c <HAL_RCC_OscConfig+0x2a4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fbb5 	bl	8000e8c <HAL_InitTick>
 8001722:	4603      	mov	r3, r0
 8001724:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d052      	beq.n	80017d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	e323      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d032      	beq.n	800179e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001738:	4b4d      	ldr	r3, [pc, #308]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a4c      	ldr	r2, [pc, #304]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001744:	f7ff fbf2 	bl	8000f2c <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800174c:	f7ff fbee 	bl	8000f2c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e30c      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800175e:	4b44      	ldr	r3, [pc, #272]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800176a:	4b41      	ldr	r3, [pc, #260]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a40      	ldr	r2, [pc, #256]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 8001770:	f043 0308 	orr.w	r3, r3, #8
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	493b      	ldr	r1, [pc, #236]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001788:	4b39      	ldr	r3, [pc, #228]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	4936      	ldr	r1, [pc, #216]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
 800179c:	e01a      	b.n	80017d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800179e:	4b34      	ldr	r3, [pc, #208]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a33      	ldr	r2, [pc, #204]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 80017a4:	f023 0301 	bic.w	r3, r3, #1
 80017a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017aa:	f7ff fbbf 	bl	8000f2c <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017b2:	f7ff fbbb 	bl	8000f2c <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e2d9      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017c4:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f0      	bne.n	80017b2 <HAL_RCC_OscConfig+0x1da>
 80017d0:	e000      	b.n	80017d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d074      	beq.n	80018ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	2b08      	cmp	r3, #8
 80017e4:	d005      	beq.n	80017f2 <HAL_RCC_OscConfig+0x21a>
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	2b0c      	cmp	r3, #12
 80017ea:	d10e      	bne.n	800180a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d10b      	bne.n	800180a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d064      	beq.n	80018c8 <HAL_RCC_OscConfig+0x2f0>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d160      	bne.n	80018c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e2b6      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001812:	d106      	bne.n	8001822 <HAL_RCC_OscConfig+0x24a>
 8001814:	4b16      	ldr	r3, [pc, #88]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a15      	ldr	r2, [pc, #84]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 800181a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	e01d      	b.n	800185e <HAL_RCC_OscConfig+0x286>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800182a:	d10c      	bne.n	8001846 <HAL_RCC_OscConfig+0x26e>
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0f      	ldr	r2, [pc, #60]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 8001832:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0c      	ldr	r2, [pc, #48]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 800183e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	e00b      	b.n	800185e <HAL_RCC_OscConfig+0x286>
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a09      	ldr	r2, [pc, #36]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 800184c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a06      	ldr	r2, [pc, #24]	; (8001870 <HAL_RCC_OscConfig+0x298>)
 8001858:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d01c      	beq.n	80018a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001866:	f7ff fb61 	bl	8000f2c <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800186c:	e011      	b.n	8001892 <HAL_RCC_OscConfig+0x2ba>
 800186e:	bf00      	nop
 8001870:	40021000 	.word	0x40021000
 8001874:	08002ffc 	.word	0x08002ffc
 8001878:	20000000 	.word	0x20000000
 800187c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff fb54 	bl	8000f2c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	; 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e272      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001892:	4baf      	ldr	r3, [pc, #700]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x2a8>
 800189e:	e014      	b.n	80018ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff fb44 	bl	8000f2c <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a8:	f7ff fb40 	bl	8000f2c <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e25e      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ba:	4ba5      	ldr	r3, [pc, #660]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x2d0>
 80018c6:	e000      	b.n	80018ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d060      	beq.n	8001998 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_OscConfig+0x310>
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	2b0c      	cmp	r3, #12
 80018e0:	d119      	bne.n	8001916 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d116      	bne.n	8001916 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e8:	4b99      	ldr	r3, [pc, #612]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_OscConfig+0x328>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e23b      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001900:	4b93      	ldr	r3, [pc, #588]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	061b      	lsls	r3, r3, #24
 800190e:	4990      	ldr	r1, [pc, #576]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001914:	e040      	b.n	8001998 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d023      	beq.n	8001966 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800191e:	4b8c      	ldr	r3, [pc, #560]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a8b      	ldr	r2, [pc, #556]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192a:	f7ff faff 	bl	8000f2c <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001932:	f7ff fafb 	bl	8000f2c <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e219      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001944:	4b82      	ldr	r3, [pc, #520]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001950:	4b7f      	ldr	r3, [pc, #508]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	061b      	lsls	r3, r3, #24
 800195e:	497c      	ldr	r1, [pc, #496]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
 8001964:	e018      	b.n	8001998 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001966:	4b7a      	ldr	r3, [pc, #488]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a79      	ldr	r2, [pc, #484]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 800196c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001972:	f7ff fadb 	bl	8000f2c <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800197a:	f7ff fad7 	bl	8000f2c <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e1f5      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800198c:	4b70      	ldr	r3, [pc, #448]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f0      	bne.n	800197a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d03c      	beq.n	8001a1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d01c      	beq.n	80019e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ac:	4b68      	ldr	r3, [pc, #416]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 80019ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b2:	4a67      	ldr	r2, [pc, #412]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019bc:	f7ff fab6 	bl	8000f2c <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c4:	f7ff fab2 	bl	8000f2c <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e1d0      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019d6:	4b5e      	ldr	r3, [pc, #376]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 80019d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0ef      	beq.n	80019c4 <HAL_RCC_OscConfig+0x3ec>
 80019e4:	e01b      	b.n	8001a1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e6:	4b5a      	ldr	r3, [pc, #360]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 80019e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ec:	4a58      	ldr	r2, [pc, #352]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 80019ee:	f023 0301 	bic.w	r3, r3, #1
 80019f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f6:	f7ff fa99 	bl	8000f2c <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019fe:	f7ff fa95 	bl	8000f2c <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e1b3      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a10:	4b4f      	ldr	r3, [pc, #316]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1ef      	bne.n	80019fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 80a6 	beq.w	8001b78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a30:	4b47      	ldr	r3, [pc, #284]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10d      	bne.n	8001a58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a3c:	4b44      	ldr	r3, [pc, #272]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	4a43      	ldr	r2, [pc, #268]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a46:	6593      	str	r3, [r2, #88]	; 0x58
 8001a48:	4b41      	ldr	r3, [pc, #260]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a54:	2301      	movs	r3, #1
 8001a56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a58:	4b3e      	ldr	r3, [pc, #248]	; (8001b54 <HAL_RCC_OscConfig+0x57c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d118      	bne.n	8001a96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a64:	4b3b      	ldr	r3, [pc, #236]	; (8001b54 <HAL_RCC_OscConfig+0x57c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a3a      	ldr	r2, [pc, #232]	; (8001b54 <HAL_RCC_OscConfig+0x57c>)
 8001a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a70:	f7ff fa5c 	bl	8000f2c <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a78:	f7ff fa58 	bl	8000f2c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e176      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a8a:	4b32      	ldr	r3, [pc, #200]	; (8001b54 <HAL_RCC_OscConfig+0x57c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d108      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4d8>
 8001a9e:	4b2c      	ldr	r3, [pc, #176]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa4:	4a2a      	ldr	r2, [pc, #168]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aae:	e024      	b.n	8001afa <HAL_RCC_OscConfig+0x522>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b05      	cmp	r3, #5
 8001ab6:	d110      	bne.n	8001ada <HAL_RCC_OscConfig+0x502>
 8001ab8:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abe:	4a24      	ldr	r2, [pc, #144]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001ac0:	f043 0304 	orr.w	r3, r3, #4
 8001ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ac8:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ace:	4a20      	ldr	r2, [pc, #128]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad8:	e00f      	b.n	8001afa <HAL_RCC_OscConfig+0x522>
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae0:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001ae2:	f023 0301 	bic.w	r3, r3, #1
 8001ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af0:	4a17      	ldr	r2, [pc, #92]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001af2:	f023 0304 	bic.w	r3, r3, #4
 8001af6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d016      	beq.n	8001b30 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b02:	f7ff fa13 	bl	8000f2c <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f7ff fa0f 	bl	8000f2c <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e12b      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCC_OscConfig+0x578>)
 8001b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0ed      	beq.n	8001b0a <HAL_RCC_OscConfig+0x532>
 8001b2e:	e01a      	b.n	8001b66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b30:	f7ff f9fc 	bl	8000f2c <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b36:	e00f      	b.n	8001b58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b38:	f7ff f9f8 	bl	8000f2c <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d906      	bls.n	8001b58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e114      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b58:	4b89      	ldr	r3, [pc, #548]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1e8      	bne.n	8001b38 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b66:	7ffb      	ldrb	r3, [r7, #31]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d105      	bne.n	8001b78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b6c:	4b84      	ldr	r3, [pc, #528]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	4a83      	ldr	r2, [pc, #524]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b76:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 80fa 	beq.w	8001d76 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	f040 80d0 	bne.w	8001d2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b8c:	4b7c      	ldr	r3, [pc, #496]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f003 0203 	and.w	r2, r3, #3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d130      	bne.n	8001c02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	3b01      	subs	r3, #1
 8001bac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d127      	bne.n	8001c02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d11f      	bne.n	8001c02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bcc:	2a07      	cmp	r2, #7
 8001bce:	bf14      	ite	ne
 8001bd0:	2201      	movne	r2, #1
 8001bd2:	2200      	moveq	r2, #0
 8001bd4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d113      	bne.n	8001c02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be4:	085b      	lsrs	r3, r3, #1
 8001be6:	3b01      	subs	r3, #1
 8001be8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d109      	bne.n	8001c02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	085b      	lsrs	r3, r3, #1
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d06e      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2b0c      	cmp	r3, #12
 8001c06:	d069      	beq.n	8001cdc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c08:	4b5d      	ldr	r3, [pc, #372]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d105      	bne.n	8001c20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c14:	4b5a      	ldr	r3, [pc, #360]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0a9      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c24:	4b56      	ldr	r3, [pc, #344]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a55      	ldr	r2, [pc, #340]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c30:	f7ff f97c 	bl	8000f2c <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff f978 	bl	8000f2c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e096      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c4a:	4b4d      	ldr	r3, [pc, #308]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c56:	4b4a      	ldr	r3, [pc, #296]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	4b4a      	ldr	r3, [pc, #296]	; (8001d84 <HAL_RCC_OscConfig+0x7ac>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c66:	3a01      	subs	r2, #1
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	4311      	orrs	r1, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c70:	0212      	lsls	r2, r2, #8
 8001c72:	4311      	orrs	r1, r2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c78:	0852      	lsrs	r2, r2, #1
 8001c7a:	3a01      	subs	r2, #1
 8001c7c:	0552      	lsls	r2, r2, #21
 8001c7e:	4311      	orrs	r1, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c84:	0852      	lsrs	r2, r2, #1
 8001c86:	3a01      	subs	r2, #1
 8001c88:	0652      	lsls	r2, r2, #25
 8001c8a:	4311      	orrs	r1, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c90:	0912      	lsrs	r2, r2, #4
 8001c92:	0452      	lsls	r2, r2, #17
 8001c94:	430a      	orrs	r2, r1
 8001c96:	493a      	ldr	r1, [pc, #232]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c9c:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a37      	ldr	r2, [pc, #220]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ca6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ca8:	4b35      	ldr	r3, [pc, #212]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	4a34      	ldr	r2, [pc, #208]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cb4:	f7ff f93a 	bl	8000f2c <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7ff f936 	bl	8000f2c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e054      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cce:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cda:	e04c      	b.n	8001d76 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e04b      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce0:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d144      	bne.n	8001d76 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cec:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a23      	ldr	r2, [pc, #140]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cf6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cf8:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	4a20      	ldr	r2, [pc, #128]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d04:	f7ff f912 	bl	8000f2c <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0c:	f7ff f90e 	bl	8000f2c <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e02c      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0x734>
 8001d2a:	e024      	b.n	8001d76 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2b0c      	cmp	r3, #12
 8001d30:	d01f      	beq.n	8001d72 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001d38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3e:	f7ff f8f5 	bl	8000f2c <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d46:	f7ff f8f1 	bl	8000f2c <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e00f      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f0      	bne.n	8001d46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	4905      	ldr	r1, [pc, #20]	; (8001d80 <HAL_RCC_OscConfig+0x7a8>)
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <HAL_RCC_OscConfig+0x7b0>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60cb      	str	r3, [r1, #12]
 8001d70:	e001      	b.n	8001d76 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	f99d808c 	.word	0xf99d808c
 8001d88:	feeefffc 	.word	0xfeeefffc

08001d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0e7      	b.n	8001f70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da0:	4b75      	ldr	r3, [pc, #468]	; (8001f78 <HAL_RCC_ClockConfig+0x1ec>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d910      	bls.n	8001dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b72      	ldr	r3, [pc, #456]	; (8001f78 <HAL_RCC_ClockConfig+0x1ec>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 0207 	bic.w	r2, r3, #7
 8001db6:	4970      	ldr	r1, [pc, #448]	; (8001f78 <HAL_RCC_ClockConfig+0x1ec>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b6e      	ldr	r3, [pc, #440]	; (8001f78 <HAL_RCC_ClockConfig+0x1ec>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0cf      	b.n	8001f70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d010      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	4b66      	ldr	r3, [pc, #408]	; (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d908      	bls.n	8001dfe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dec:	4b63      	ldr	r3, [pc, #396]	; (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4960      	ldr	r1, [pc, #384]	; (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d04c      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e12:	4b5a      	ldr	r3, [pc, #360]	; (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d121      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e0a6      	b.n	8001f70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e2a:	4b54      	ldr	r3, [pc, #336]	; (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d115      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e09a      	b.n	8001f70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d107      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e42:	4b4e      	ldr	r3, [pc, #312]	; (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e08e      	b.n	8001f70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e52:	4b4a      	ldr	r3, [pc, #296]	; (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e086      	b.n	8001f70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e62:	4b46      	ldr	r3, [pc, #280]	; (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f023 0203 	bic.w	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4943      	ldr	r1, [pc, #268]	; (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e74:	f7ff f85a 	bl	8000f2c <HAL_GetTick>
 8001e78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	e00a      	b.n	8001e92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e7c:	f7ff f856 	bl	8000f2c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e06e      	b.n	8001f70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e92:	4b3a      	ldr	r3, [pc, #232]	; (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 020c 	and.w	r2, r3, #12
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d1eb      	bne.n	8001e7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d010      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	4b31      	ldr	r3, [pc, #196]	; (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d208      	bcs.n	8001ed2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec0:	4b2e      	ldr	r3, [pc, #184]	; (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	492b      	ldr	r1, [pc, #172]	; (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed2:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d210      	bcs.n	8001f02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee0:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f023 0207 	bic.w	r2, r3, #7
 8001ee8:	4923      	ldr	r1, [pc, #140]	; (8001f78 <HAL_RCC_ClockConfig+0x1ec>)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef0:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <HAL_RCC_ClockConfig+0x1ec>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d001      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e036      	b.n	8001f70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d008      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	4918      	ldr	r1, [pc, #96]	; (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d009      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f2c:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4910      	ldr	r1, [pc, #64]	; (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f40:	f000 f824 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f44:	4602      	mov	r2, r0
 8001f46:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	091b      	lsrs	r3, r3, #4
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	490b      	ldr	r1, [pc, #44]	; (8001f80 <HAL_RCC_ClockConfig+0x1f4>)
 8001f52:	5ccb      	ldrb	r3, [r1, r3]
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5c:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <HAL_RCC_ClockConfig+0x1f8>)
 8001f5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_RCC_ClockConfig+0x1fc>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe ff91 	bl	8000e8c <HAL_InitTick>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f6e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40022000 	.word	0x40022000
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	08002ffc 	.word	0x08002ffc
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000004 	.word	0x20000004

08001f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f9a:	4b3e      	ldr	r3, [pc, #248]	; (8002094 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fa4:	4b3b      	ldr	r3, [pc, #236]	; (8002094 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x34>
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	2b0c      	cmp	r3, #12
 8001fb8:	d121      	bne.n	8001ffe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d11e      	bne.n	8001ffe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fc0:	4b34      	ldr	r3, [pc, #208]	; (8002094 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d107      	bne.n	8001fdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fcc:	4b31      	ldr	r3, [pc, #196]	; (8002094 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	e005      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fdc:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fe8:	4a2b      	ldr	r2, [pc, #172]	; (8002098 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10d      	bne.n	8002014 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	2b04      	cmp	r3, #4
 8002002:	d102      	bne.n	800200a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002004:	4b25      	ldr	r3, [pc, #148]	; (800209c <HAL_RCC_GetSysClockFreq+0x110>)
 8002006:	61bb      	str	r3, [r7, #24]
 8002008:	e004      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	2b08      	cmp	r3, #8
 800200e:	d101      	bne.n	8002014 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002010:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002012:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	2b0c      	cmp	r3, #12
 8002018:	d134      	bne.n	8002084 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800201a:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <HAL_RCC_GetSysClockFreq+0x108>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d003      	beq.n	8002032 <HAL_RCC_GetSysClockFreq+0xa6>
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d003      	beq.n	8002038 <HAL_RCC_GetSysClockFreq+0xac>
 8002030:	e005      	b.n	800203e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002032:	4b1a      	ldr	r3, [pc, #104]	; (800209c <HAL_RCC_GetSysClockFreq+0x110>)
 8002034:	617b      	str	r3, [r7, #20]
      break;
 8002036:	e005      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800203a:	617b      	str	r3, [r7, #20]
      break;
 800203c:	e002      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	617b      	str	r3, [r7, #20]
      break;
 8002042:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <HAL_RCC_GetSysClockFreq+0x108>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	3301      	adds	r3, #1
 8002050:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <HAL_RCC_GetSysClockFreq+0x108>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	0a1b      	lsrs	r3, r3, #8
 8002058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	fb02 f203 	mul.w	r2, r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	fbb2 f3f3 	udiv	r3, r2, r3
 8002068:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_RCC_GetSysClockFreq+0x108>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	0e5b      	lsrs	r3, r3, #25
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	3301      	adds	r3, #1
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002082:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002084:	69bb      	ldr	r3, [r7, #24]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3724      	adds	r7, #36	; 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	0800300c 	.word	0x0800300c
 800209c:	00f42400 	.word	0x00f42400
 80020a0:	007a1200 	.word	0x007a1200

080020a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020ac:	2300      	movs	r3, #0
 80020ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020b0:	4b2a      	ldr	r3, [pc, #168]	; (800215c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020bc:	f7ff fa28 	bl	8001510 <HAL_PWREx_GetVoltageRange>
 80020c0:	6178      	str	r0, [r7, #20]
 80020c2:	e014      	b.n	80020ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020c4:	4b25      	ldr	r3, [pc, #148]	; (800215c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	4a24      	ldr	r2, [pc, #144]	; (800215c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ce:	6593      	str	r3, [r2, #88]	; 0x58
 80020d0:	4b22      	ldr	r3, [pc, #136]	; (800215c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020dc:	f7ff fa18 	bl	8001510 <HAL_PWREx_GetVoltageRange>
 80020e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020e2:	4b1e      	ldr	r3, [pc, #120]	; (800215c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	4a1d      	ldr	r2, [pc, #116]	; (800215c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020f4:	d10b      	bne.n	800210e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b80      	cmp	r3, #128	; 0x80
 80020fa:	d919      	bls.n	8002130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2ba0      	cmp	r3, #160	; 0xa0
 8002100:	d902      	bls.n	8002108 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002102:	2302      	movs	r3, #2
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	e013      	b.n	8002130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002108:	2301      	movs	r3, #1
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	e010      	b.n	8002130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b80      	cmp	r3, #128	; 0x80
 8002112:	d902      	bls.n	800211a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002114:	2303      	movs	r3, #3
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	e00a      	b.n	8002130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b80      	cmp	r3, #128	; 0x80
 800211e:	d102      	bne.n	8002126 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002120:	2302      	movs	r3, #2
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	e004      	b.n	8002130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b70      	cmp	r3, #112	; 0x70
 800212a:	d101      	bne.n	8002130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800212c:	2301      	movs	r3, #1
 800212e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f023 0207 	bic.w	r2, r3, #7
 8002138:	4909      	ldr	r1, [pc, #36]	; (8002160 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002140:	4b07      	ldr	r3, [pc, #28]	; (8002160 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	429a      	cmp	r2, r3
 800214c:	d001      	beq.n	8002152 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	40022000 	.word	0x40022000

08002164 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e095      	b.n	80022a2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	2b00      	cmp	r3, #0
 800217c:	d108      	bne.n	8002190 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002186:	d009      	beq.n	800219c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	61da      	str	r2, [r3, #28]
 800218e:	e005      	b.n	800219c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d106      	bne.n	80021bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7fe fd6a 	bl	8000c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021dc:	d902      	bls.n	80021e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	e002      	b.n	80021ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80021f2:	d007      	beq.n	8002204 <HAL_SPI_Init+0xa0>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021fc:	d002      	beq.n	8002204 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002246:	ea42 0103 	orr.w	r1, r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	0c1b      	lsrs	r3, r3, #16
 8002260:	f003 0204 	and.w	r2, r3, #4
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002280:	ea42 0103 	orr.w	r1, r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b088      	sub	sp, #32
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	603b      	str	r3, [r7, #0]
 80022b6:	4613      	mov	r3, r2
 80022b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_SPI_Transmit+0x22>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e158      	b.n	800257e <HAL_SPI_Transmit+0x2d4>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022d4:	f7fe fe2a 	bl	8000f2c <HAL_GetTick>
 80022d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d002      	beq.n	80022f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80022ea:	2302      	movs	r3, #2
 80022ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022ee:	e13d      	b.n	800256c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d002      	beq.n	80022fc <HAL_SPI_Transmit+0x52>
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d102      	bne.n	8002302 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002300:	e134      	b.n	800256c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2203      	movs	r2, #3
 8002306:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	88fa      	ldrh	r2, [r7, #6]
 800231a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	88fa      	ldrh	r2, [r7, #6]
 8002320:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800234c:	d10f      	bne.n	800236e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800235c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800236c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002378:	2b40      	cmp	r3, #64	; 0x40
 800237a:	d007      	beq.n	800238c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800238a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002394:	d94b      	bls.n	800242e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <HAL_SPI_Transmit+0xfa>
 800239e:	8afb      	ldrh	r3, [r7, #22]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d13e      	bne.n	8002422 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a8:	881a      	ldrh	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b4:	1c9a      	adds	r2, r3, #2
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023c8:	e02b      	b.n	8002422 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d112      	bne.n	80023fe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023dc:	881a      	ldrh	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e8:	1c9a      	adds	r2, r3, #2
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023fc:	e011      	b.n	8002422 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023fe:	f7fe fd95 	bl	8000f2c <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d803      	bhi.n	8002416 <HAL_SPI_Transmit+0x16c>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002414:	d102      	bne.n	800241c <HAL_SPI_Transmit+0x172>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002420:	e0a4      	b.n	800256c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002426:	b29b      	uxth	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1ce      	bne.n	80023ca <HAL_SPI_Transmit+0x120>
 800242c:	e07c      	b.n	8002528 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <HAL_SPI_Transmit+0x192>
 8002436:	8afb      	ldrh	r3, [r7, #22]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d170      	bne.n	800251e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002440:	b29b      	uxth	r3, r3
 8002442:	2b01      	cmp	r3, #1
 8002444:	d912      	bls.n	800246c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244a:	881a      	ldrh	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002456:	1c9a      	adds	r2, r3, #2
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002460:	b29b      	uxth	r3, r3
 8002462:	3b02      	subs	r3, #2
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	87da      	strh	r2, [r3, #62]	; 0x3e
 800246a:	e058      	b.n	800251e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	330c      	adds	r3, #12
 8002476:	7812      	ldrb	r2, [r2, #0]
 8002478:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002488:	b29b      	uxth	r3, r3
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002492:	e044      	b.n	800251e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d12b      	bne.n	80024fa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d912      	bls.n	80024d2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b0:	881a      	ldrh	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024bc:	1c9a      	adds	r2, r3, #2
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b02      	subs	r3, #2
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024d0:	e025      	b.n	800251e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	330c      	adds	r3, #12
 80024dc:	7812      	ldrb	r2, [r2, #0]
 80024de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024f8:	e011      	b.n	800251e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024fa:	f7fe fd17 	bl	8000f2c <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d803      	bhi.n	8002512 <HAL_SPI_Transmit+0x268>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d102      	bne.n	8002518 <HAL_SPI_Transmit+0x26e>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d102      	bne.n	800251e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800251c:	e026      	b.n	800256c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1b5      	bne.n	8002494 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	6839      	ldr	r1, [r7, #0]
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 fce3 	bl	8002ef8 <SPI_EndRxTxTransaction>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10a      	bne.n	800255c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	77fb      	strb	r3, [r7, #31]
 8002568:	e000      	b.n	800256c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800256a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800257c:	7ffb      	ldrb	r3, [r7, #31]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3720      	adds	r7, #32
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b088      	sub	sp, #32
 800258a:	af02      	add	r7, sp, #8
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	603b      	str	r3, [r7, #0]
 8002592:	4613      	mov	r3, r2
 8002594:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025a2:	d112      	bne.n	80025ca <HAL_SPI_Receive+0x44>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10e      	bne.n	80025ca <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2204      	movs	r2, #4
 80025b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025b4:	88fa      	ldrh	r2, [r7, #6]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	4613      	mov	r3, r2
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	68b9      	ldr	r1, [r7, #8]
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 f910 	bl	80027e6 <HAL_SPI_TransmitReceive>
 80025c6:	4603      	mov	r3, r0
 80025c8:	e109      	b.n	80027de <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_SPI_Receive+0x52>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e102      	b.n	80027de <HAL_SPI_Receive+0x258>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025e0:	f7fe fca4 	bl	8000f2c <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d002      	beq.n	80025f8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80025f2:	2302      	movs	r3, #2
 80025f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025f6:	e0e9      	b.n	80027cc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <HAL_SPI_Receive+0x7e>
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002608:	e0e0      	b.n	80027cc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2204      	movs	r2, #4
 800260e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	88fa      	ldrh	r2, [r7, #6]
 8002622:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	88fa      	ldrh	r2, [r7, #6]
 800262a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002654:	d908      	bls.n	8002668 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	e007      	b.n	8002678 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002676:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002680:	d10f      	bne.n	80026a2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002690:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	d007      	beq.n	80026c0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026c8:	d867      	bhi.n	800279a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80026ca:	e030      	b.n	800272e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d117      	bne.n	800270a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f103 020c 	add.w	r2, r3, #12
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	7812      	ldrb	r2, [r2, #0]
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002708:	e011      	b.n	800272e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800270a:	f7fe fc0f 	bl	8000f2c <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d803      	bhi.n	8002722 <HAL_SPI_Receive+0x19c>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002720:	d102      	bne.n	8002728 <HAL_SPI_Receive+0x1a2>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800272c:	e04e      	b.n	80027cc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002734:	b29b      	uxth	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1c8      	bne.n	80026cc <HAL_SPI_Receive+0x146>
 800273a:	e034      	b.n	80027a6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b01      	cmp	r3, #1
 8002748:	d115      	bne.n	8002776 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	b292      	uxth	r2, r2
 8002756:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	1c9a      	adds	r2, r3, #2
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002774:	e011      	b.n	800279a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002776:	f7fe fbd9 	bl	8000f2c <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d803      	bhi.n	800278e <HAL_SPI_Receive+0x208>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278c:	d102      	bne.n	8002794 <HAL_SPI_Receive+0x20e>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002798:	e018      	b.n	80027cc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1ca      	bne.n	800273c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	6839      	ldr	r1, [r7, #0]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 fb4c 	bl	8002e48 <SPI_EndRxTransaction>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2220      	movs	r2, #32
 80027ba:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	75fb      	strb	r3, [r7, #23]
 80027c8:	e000      	b.n	80027cc <HAL_SPI_Receive+0x246>
  }

error :
 80027ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b08a      	sub	sp, #40	; 0x28
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027f4:	2301      	movs	r3, #1
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_SPI_TransmitReceive+0x26>
 8002808:	2302      	movs	r3, #2
 800280a:	e1fb      	b.n	8002c04 <HAL_SPI_TransmitReceive+0x41e>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002814:	f7fe fb8a 	bl	8000f2c <HAL_GetTick>
 8002818:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002820:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002828:	887b      	ldrh	r3, [r7, #2]
 800282a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800282c:	887b      	ldrh	r3, [r7, #2]
 800282e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002830:	7efb      	ldrb	r3, [r7, #27]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d00e      	beq.n	8002854 <HAL_SPI_TransmitReceive+0x6e>
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800283c:	d106      	bne.n	800284c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <HAL_SPI_TransmitReceive+0x66>
 8002846:	7efb      	ldrb	r3, [r7, #27]
 8002848:	2b04      	cmp	r3, #4
 800284a:	d003      	beq.n	8002854 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800284c:	2302      	movs	r3, #2
 800284e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002852:	e1cd      	b.n	8002bf0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_SPI_TransmitReceive+0x80>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <HAL_SPI_TransmitReceive+0x80>
 8002860:	887b      	ldrh	r3, [r7, #2]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d103      	bne.n	800286e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800286c:	e1c0      	b.n	8002bf0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b04      	cmp	r3, #4
 8002878:	d003      	beq.n	8002882 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2205      	movs	r2, #5
 800287e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	887a      	ldrh	r2, [r7, #2]
 8002892:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	887a      	ldrh	r2, [r7, #2]
 800289a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	887a      	ldrh	r2, [r7, #2]
 80028a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	887a      	ldrh	r2, [r7, #2]
 80028ae:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028c4:	d802      	bhi.n	80028cc <HAL_SPI_TransmitReceive+0xe6>
 80028c6:	8a3b      	ldrh	r3, [r7, #16]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d908      	bls.n	80028de <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	e007      	b.n	80028ee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028ec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	2b40      	cmp	r3, #64	; 0x40
 80028fa:	d007      	beq.n	800290c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800290a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002914:	d97c      	bls.n	8002a10 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <HAL_SPI_TransmitReceive+0x13e>
 800291e:	8a7b      	ldrh	r3, [r7, #18]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d169      	bne.n	80029f8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	881a      	ldrh	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002934:	1c9a      	adds	r2, r3, #2
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002948:	e056      	b.n	80029f8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b02      	cmp	r3, #2
 8002956:	d11b      	bne.n	8002990 <HAL_SPI_TransmitReceive+0x1aa>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d016      	beq.n	8002990 <HAL_SPI_TransmitReceive+0x1aa>
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	2b01      	cmp	r3, #1
 8002966:	d113      	bne.n	8002990 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296c:	881a      	ldrh	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	1c9a      	adds	r2, r3, #2
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b01      	cmp	r3, #1
 800299c:	d11c      	bne.n	80029d8 <HAL_SPI_TransmitReceive+0x1f2>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d016      	beq.n	80029d8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	b292      	uxth	r2, r2
 80029b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	1c9a      	adds	r2, r3, #2
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029d4:	2301      	movs	r3, #1
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029d8:	f7fe faa8 	bl	8000f2c <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d807      	bhi.n	80029f8 <HAL_SPI_TransmitReceive+0x212>
 80029e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ee:	d003      	beq.n	80029f8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80029f6:	e0fb      	b.n	8002bf0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1a3      	bne.n	800294a <HAL_SPI_TransmitReceive+0x164>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d19d      	bne.n	800294a <HAL_SPI_TransmitReceive+0x164>
 8002a0e:	e0df      	b.n	8002bd0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_SPI_TransmitReceive+0x23a>
 8002a18:	8a7b      	ldrh	r3, [r7, #18]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	f040 80cb 	bne.w	8002bb6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d912      	bls.n	8002a50 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	881a      	ldrh	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3a:	1c9a      	adds	r2, r3, #2
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b02      	subs	r3, #2
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a4e:	e0b2      	b.n	8002bb6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	330c      	adds	r3, #12
 8002a5a:	7812      	ldrb	r2, [r2, #0]
 8002a5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a76:	e09e      	b.n	8002bb6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d134      	bne.n	8002af0 <HAL_SPI_TransmitReceive+0x30a>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d02f      	beq.n	8002af0 <HAL_SPI_TransmitReceive+0x30a>
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d12c      	bne.n	8002af0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d912      	bls.n	8002ac6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	881a      	ldrh	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab0:	1c9a      	adds	r2, r3, #2
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b02      	subs	r3, #2
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ac4:	e012      	b.n	8002aec <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	330c      	adds	r3, #12
 8002ad0:	7812      	ldrb	r2, [r2, #0]
 8002ad2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d148      	bne.n	8002b90 <HAL_SPI_TransmitReceive+0x3aa>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d042      	beq.n	8002b90 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d923      	bls.n	8002b5e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	b292      	uxth	r2, r2
 8002b22:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	1c9a      	adds	r2, r3, #2
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b02      	subs	r3, #2
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d81f      	bhi.n	8002b8c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	e016      	b.n	8002b8c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f103 020c 	add.w	r2, r3, #12
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	7812      	ldrb	r2, [r2, #0]
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b90:	f7fe f9cc 	bl	8000f2c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d803      	bhi.n	8002ba8 <HAL_SPI_TransmitReceive+0x3c2>
 8002ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba6:	d102      	bne.n	8002bae <HAL_SPI_TransmitReceive+0x3c8>
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d103      	bne.n	8002bb6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002bb4:	e01c      	b.n	8002bf0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f47f af5b 	bne.w	8002a78 <HAL_SPI_TransmitReceive+0x292>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f47f af54 	bne.w	8002a78 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f98f 	bl	8002ef8 <SPI_EndRxTxTransaction>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d006      	beq.n	8002bee <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	661a      	str	r2, [r3, #96]	; 0x60
 8002bec:	e000      	b.n	8002bf0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002bee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002c00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3728      	adds	r7, #40	; 0x28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c1c:	f7fe f986 	bl	8000f2c <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	4413      	add	r3, r2
 8002c2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c2c:	f7fe f97e 	bl	8000f2c <HAL_GetTick>
 8002c30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c32:	4b39      	ldr	r3, [pc, #228]	; (8002d18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	015b      	lsls	r3, r3, #5
 8002c38:	0d1b      	lsrs	r3, r3, #20
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	fb02 f303 	mul.w	r3, r2, r3
 8002c40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c42:	e054      	b.n	8002cee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4a:	d050      	beq.n	8002cee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c4c:	f7fe f96e 	bl	8000f2c <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d902      	bls.n	8002c62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d13d      	bne.n	8002cde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c7a:	d111      	bne.n	8002ca0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c84:	d004      	beq.n	8002c90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8e:	d107      	bne.n	8002ca0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca8:	d10f      	bne.n	8002cca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e017      	b.n	8002d0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	bf0c      	ite	eq
 8002cfe:	2301      	moveq	r3, #1
 8002d00:	2300      	movne	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d19b      	bne.n	8002c44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3720      	adds	r7, #32
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20000000 	.word	0x20000000

08002d1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08a      	sub	sp, #40	; 0x28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002d2e:	f7fe f8fd 	bl	8000f2c <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002d3e:	f7fe f8f5 	bl	8000f2c <HAL_GetTick>
 8002d42:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002d4c:	4b3d      	ldr	r3, [pc, #244]	; (8002e44 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	00da      	lsls	r2, r3, #3
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	0d1b      	lsrs	r3, r3, #20
 8002d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5e:	fb02 f303 	mul.w	r3, r2, r3
 8002d62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002d64:	e060      	b.n	8002e28 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d6c:	d107      	bne.n	8002d7e <SPI_WaitFifoStateUntilTimeout+0x62>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d104      	bne.n	8002d7e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d050      	beq.n	8002e28 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d86:	f7fe f8d1 	bl	8000f2c <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d902      	bls.n	8002d9c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d13d      	bne.n	8002e18 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002daa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002db4:	d111      	bne.n	8002dda <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dbe:	d004      	beq.n	8002dca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc8:	d107      	bne.n	8002dda <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de2:	d10f      	bne.n	8002e04 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e010      	b.n	8002e3a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4013      	ands	r3, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d196      	bne.n	8002d66 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3728      	adds	r7, #40	; 0x28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000000 	.word	0x20000000

08002e48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e5c:	d111      	bne.n	8002e82 <SPI_EndRxTransaction+0x3a>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e66:	d004      	beq.n	8002e72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e70:	d107      	bne.n	8002e82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e80:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2180      	movs	r1, #128	; 0x80
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f7ff febd 	bl	8002c0c <SPI_WaitFlagStateUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d007      	beq.n	8002ea8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9c:	f043 0220 	orr.w	r2, r3, #32
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e023      	b.n	8002ef0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eb0:	d11d      	bne.n	8002eee <SPI_EndRxTransaction+0xa6>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eba:	d004      	beq.n	8002ec6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec4:	d113      	bne.n	8002eee <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f7ff ff22 	bl	8002d1c <SPI_WaitFifoStateUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d007      	beq.n	8002eee <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee2:	f043 0220 	orr.w	r2, r3, #32
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e000      	b.n	8002ef0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f7ff ff03 	bl	8002d1c <SPI_WaitFifoStateUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f20:	f043 0220 	orr.w	r2, r3, #32
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e027      	b.n	8002f7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2200      	movs	r2, #0
 8002f34:	2180      	movs	r1, #128	; 0x80
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff fe68 	bl	8002c0c <SPI_WaitFlagStateUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d007      	beq.n	8002f52 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f46:	f043 0220 	orr.w	r2, r3, #32
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e014      	b.n	8002f7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff fedc 	bl	8002d1c <SPI_WaitFifoStateUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d007      	beq.n	8002f7a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6e:	f043 0220 	orr.w	r2, r3, #32
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e000      	b.n	8002f7c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <__libc_init_array>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	4d0d      	ldr	r5, [pc, #52]	; (8002fbc <__libc_init_array+0x38>)
 8002f88:	4c0d      	ldr	r4, [pc, #52]	; (8002fc0 <__libc_init_array+0x3c>)
 8002f8a:	1b64      	subs	r4, r4, r5
 8002f8c:	10a4      	asrs	r4, r4, #2
 8002f8e:	2600      	movs	r6, #0
 8002f90:	42a6      	cmp	r6, r4
 8002f92:	d109      	bne.n	8002fa8 <__libc_init_array+0x24>
 8002f94:	4d0b      	ldr	r5, [pc, #44]	; (8002fc4 <__libc_init_array+0x40>)
 8002f96:	4c0c      	ldr	r4, [pc, #48]	; (8002fc8 <__libc_init_array+0x44>)
 8002f98:	f000 f820 	bl	8002fdc <_init>
 8002f9c:	1b64      	subs	r4, r4, r5
 8002f9e:	10a4      	asrs	r4, r4, #2
 8002fa0:	2600      	movs	r6, #0
 8002fa2:	42a6      	cmp	r6, r4
 8002fa4:	d105      	bne.n	8002fb2 <__libc_init_array+0x2e>
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}
 8002fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fac:	4798      	blx	r3
 8002fae:	3601      	adds	r6, #1
 8002fb0:	e7ee      	b.n	8002f90 <__libc_init_array+0xc>
 8002fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb6:	4798      	blx	r3
 8002fb8:	3601      	adds	r6, #1
 8002fba:	e7f2      	b.n	8002fa2 <__libc_init_array+0x1e>
 8002fbc:	0800303c 	.word	0x0800303c
 8002fc0:	0800303c 	.word	0x0800303c
 8002fc4:	0800303c 	.word	0x0800303c
 8002fc8:	08003040 	.word	0x08003040

08002fcc <memset>:
 8002fcc:	4402      	add	r2, r0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d100      	bne.n	8002fd6 <memset+0xa>
 8002fd4:	4770      	bx	lr
 8002fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fda:	e7f9      	b.n	8002fd0 <memset+0x4>

08002fdc <_init>:
 8002fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fde:	bf00      	nop
 8002fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fe2:	bc08      	pop	{r3}
 8002fe4:	469e      	mov	lr, r3
 8002fe6:	4770      	bx	lr

08002fe8 <_fini>:
 8002fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fea:	bf00      	nop
 8002fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fee:	bc08      	pop	{r3}
 8002ff0:	469e      	mov	lr, r3
 8002ff2:	4770      	bx	lr
