
AT86RF233.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000300c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003194  08003194  00013194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031d4  080031d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080031d4  080031d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031d4  080031d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031d4  080031d4  000131d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031d8  080031d8  000131d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  080031e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  080031e8  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091cd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001725  00000000  00000000  00029209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  0002a930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000848  00000000  00000000  0002b230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025375  00000000  00000000  0002ba78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000890c  00000000  00000000  00050ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e437e  00000000  00000000  000596f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013da77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000235c  00000000  00000000  0013dacc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800317c 	.word	0x0800317c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800317c 	.word	0x0800317c

080001c8 <readRegister>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t readRegister(const uint8_t addr)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    uint8_t readCommand = addr | AT86RF2XX_ACCESS_REG | AT86RF2XX_ACCESS_READ;
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80001d8:	b2db      	uxtb	r3, r3
 80001da:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80001dc:	2200      	movs	r2, #0
 80001de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001e2:	4810      	ldr	r0, [pc, #64]	; (8000224 <readRegister+0x5c>)
 80001e4:	f001 f9b6 	bl	8001554 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi3, &readCommand, &value, sizeof(value), HAL_MAX_DELAY);
 80001e8:	f107 020f 	add.w	r2, r7, #15
 80001ec:	f107 010e 	add.w	r1, r7, #14
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	9300      	str	r3, [sp, #0]
 80001f6:	2301      	movs	r3, #1
 80001f8:	480b      	ldr	r0, [pc, #44]	; (8000228 <readRegister+0x60>)
 80001fa:	f002 fbc4 	bl	8002986 <HAL_SPI_TransmitReceive>
    //HAL_SPI_Transmit(&hspi3, readCommand, 1, HAL_MAX_DELAY);
    HAL_SPI_Receive(&hspi3, &value, sizeof(value), HAL_MAX_DELAY);
 80001fe:	f107 010f 	add.w	r1, r7, #15
 8000202:	f04f 33ff 	mov.w	r3, #4294967295
 8000206:	2201      	movs	r2, #1
 8000208:	4807      	ldr	r0, [pc, #28]	; (8000228 <readRegister+0x60>)
 800020a:	f002 fa8c 	bl	8002726 <HAL_SPI_Receive>
    //HAL_SPI_TransmitReceive(&hspi3, 0x00, value, 1, HAL_MAX_DELAY);
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800020e:	2201      	movs	r2, #1
 8000210:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <readRegister+0x5c>)
 8000216:	f001 f99d 	bl	8001554 <HAL_GPIO_WritePin>

    return (uint8_t)value;
 800021a:	7bfb      	ldrb	r3, [r7, #15]
}
 800021c:	4618      	mov	r0, r3
 800021e:	3710      	adds	r7, #16
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	48000800 	.word	0x48000800
 8000228:	2000002c 	.word	0x2000002c

0800022c <writeRegister>:

void writeRegister(const uint8_t addr,
        const uint8_t value)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	460a      	mov	r2, r1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	4613      	mov	r3, r2
 800023a:	71bb      	strb	r3, [r7, #6]
	uint8_t writeCommand = addr | AT86RF2XX_ACCESS_REG | AT86RF2XX_ACCESS_WRITE;
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000242:	b2db      	uxtb	r3, r3
 8000244:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000246:	2200      	movs	r2, #0
 8000248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800024c:	480d      	ldr	r0, [pc, #52]	; (8000284 <writeRegister+0x58>)
 800024e:	f001 f981 	bl	8001554 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &writeCommand, sizeof(writeCommand), HAL_MAX_DELAY);
 8000252:	f107 010f 	add.w	r1, r7, #15
 8000256:	f04f 33ff 	mov.w	r3, #4294967295
 800025a:	2201      	movs	r2, #1
 800025c:	480a      	ldr	r0, [pc, #40]	; (8000288 <writeRegister+0x5c>)
 800025e:	f002 f8f4 	bl	800244a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &value, sizeof(value), HAL_MAX_DELAY);
 8000262:	1db9      	adds	r1, r7, #6
 8000264:	f04f 33ff 	mov.w	r3, #4294967295
 8000268:	2201      	movs	r2, #1
 800026a:	4807      	ldr	r0, [pc, #28]	; (8000288 <writeRegister+0x5c>)
 800026c:	f002 f8ed 	bl	800244a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000270:	2201      	movs	r2, #1
 8000272:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000276:	4803      	ldr	r0, [pc, #12]	; (8000284 <writeRegister+0x58>)
 8000278:	f001 f96c 	bl	8001554 <HAL_GPIO_WritePin>

}
 800027c:	bf00      	nop
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	48000800 	.word	0x48000800
 8000288:	2000002c 	.word	0x2000002c

0800028c <get_status>:

uint8_t get_status(void){
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	return readRegister(0x01);
 8000290:	2001      	movs	r0, #1
 8000292:	f7ff ff99 	bl	80001c8 <readRegister>
 8000296:	4603      	mov	r3, r0
}
 8000298:	4618      	mov	r0, r3
 800029a:	bd80      	pop	{r7, pc}

0800029c <set_csma_max_retries>:

void set_csma_max_retries(int8_t retries)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
    retries = (retries > 5) ? 5 : retries; /* valid values: 0-5 */
 80002a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002aa:	2b05      	cmp	r3, #5
 80002ac:	bfa8      	it	ge
 80002ae:	2305      	movge	r3, #5
 80002b0:	71fb      	strb	r3, [r7, #7]
    retries = (retries < 0) ? 7 : retries; /* max < 0 => disable CSMA (set to 7) */
 80002b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	db02      	blt.n	80002c0 <set_csma_max_retries+0x24>
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	e000      	b.n	80002c2 <set_csma_max_retries+0x26>
 80002c0:	2307      	movs	r3, #7
 80002c2:	71fb      	strb	r3, [r7, #7]
    //DEBUG("[at86rf2xx] opt: Set CSMA retries to %u\n", retries);

    uint8_t tmp = readRegister(AT86RF2XX_REG__XAH_CTRL_0);
 80002c4:	202c      	movs	r0, #44	; 0x2c
 80002c6:	f7ff ff7f 	bl	80001c8 <readRegister>
 80002ca:	4603      	mov	r3, r0
 80002cc:	73fb      	strb	r3, [r7, #15]
    tmp &= ~(AT86RF2XX_XAH_CTRL_0__MAX_CSMA_RETRIES);
 80002ce:	7bfb      	ldrb	r3, [r7, #15]
 80002d0:	f023 030e 	bic.w	r3, r3, #14
 80002d4:	73fb      	strb	r3, [r7, #15]
    tmp |= (retries << 1);
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	b25a      	sxtb	r2, r3
 80002de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80002e2:	4313      	orrs	r3, r2
 80002e4:	b25b      	sxtb	r3, r3
 80002e6:	73fb      	strb	r3, [r7, #15]
    writeRegister(AT86RF2XX_REG__XAH_CTRL_0, tmp);
 80002e8:	7bfb      	ldrb	r3, [r7, #15]
 80002ea:	4619      	mov	r1, r3
 80002ec:	202c      	movs	r0, #44	; 0x2c
 80002ee:	f7ff ff9d 	bl	800022c <writeRegister>
}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}

080002fa <set_csma_backoff_exp>:

void set_csma_backoff_exp(uint8_t min, uint8_t max)
{
 80002fa:	b580      	push	{r7, lr}
 80002fc:	b082      	sub	sp, #8
 80002fe:	af00      	add	r7, sp, #0
 8000300:	4603      	mov	r3, r0
 8000302:	460a      	mov	r2, r1
 8000304:	71fb      	strb	r3, [r7, #7]
 8000306:	4613      	mov	r3, r2
 8000308:	71bb      	strb	r3, [r7, #6]
    max = (max > 8) ? 8 : max;
 800030a:	79bb      	ldrb	r3, [r7, #6]
 800030c:	2b08      	cmp	r3, #8
 800030e:	bf28      	it	cs
 8000310:	2308      	movcs	r3, #8
 8000312:	71bb      	strb	r3, [r7, #6]
    min = (min > max) ? max : min;
 8000314:	79fa      	ldrb	r2, [r7, #7]
 8000316:	79bb      	ldrb	r3, [r7, #6]
 8000318:	4293      	cmp	r3, r2
 800031a:	bf28      	it	cs
 800031c:	4613      	movcs	r3, r2
 800031e:	71fb      	strb	r3, [r7, #7]
    //DEBUG("[at86rf2xx] opt: Set min BE=%u, max BE=%u\n", min, max);

    writeRegister(AT86RF2XX_REG__CSMA_BE, (max << 4) | (min));
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	011b      	lsls	r3, r3, #4
 8000324:	b25a      	sxtb	r2, r3
 8000326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032a:	4313      	orrs	r3, r2
 800032c:	b25b      	sxtb	r3, r3
 800032e:	b2db      	uxtb	r3, r3
 8000330:	4619      	mov	r1, r3
 8000332:	202f      	movs	r0, #47	; 0x2f
 8000334:	f7ff ff7a 	bl	800022c <writeRegister>
}
 8000338:	bf00      	nop
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}

08000340 <set_csma_seed>:

void set_csma_seed(uint8_t entropy[2])
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
    if(entropy == NULL) {
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d020      	beq.n	8000390 <set_csma_seed+0x50>
        //DEBUG("[at86rf2xx] opt: CSMA seed entropy is nullpointer\n");
        return;
    }
    //DEBUG("[at86rf2xx] opt: Set CSMA seed to 0x%x 0x%x\n", entropy[0], entropy[1]);

    writeRegister(AT86RF2XX_REG__CSMA_SEED_0, entropy[0]);
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	4619      	mov	r1, r3
 8000354:	202d      	movs	r0, #45	; 0x2d
 8000356:	f7ff ff69 	bl	800022c <writeRegister>

    uint8_t tmp = readRegister(AT86RF2XX_REG__CSMA_SEED_1);
 800035a:	202e      	movs	r0, #46	; 0x2e
 800035c:	f7ff ff34 	bl	80001c8 <readRegister>
 8000360:	4603      	mov	r3, r0
 8000362:	73fb      	strb	r3, [r7, #15]
    tmp &= ~(AT86RF2XX_CSMA_SEED_1__CSMA_SEED_1);
 8000364:	7bfb      	ldrb	r3, [r7, #15]
 8000366:	f023 0307 	bic.w	r3, r3, #7
 800036a:	73fb      	strb	r3, [r7, #15]
    tmp |= entropy[1] & AT86RF2XX_CSMA_SEED_1__CSMA_SEED_1;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3301      	adds	r3, #1
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	b25b      	sxtb	r3, r3
 8000374:	f003 0307 	and.w	r3, r3, #7
 8000378:	b25a      	sxtb	r2, r3
 800037a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800037e:	4313      	orrs	r3, r2
 8000380:	b25b      	sxtb	r3, r3
 8000382:	73fb      	strb	r3, [r7, #15]
    writeRegister(AT86RF2XX_REG__CSMA_SEED_1, tmp);
 8000384:	7bfb      	ldrb	r3, [r7, #15]
 8000386:	4619      	mov	r1, r3
 8000388:	202e      	movs	r0, #46	; 0x2e
 800038a:	f7ff ff4f 	bl	800022c <writeRegister>
 800038e:	e000      	b.n	8000392 <set_csma_seed+0x52>
        return;
 8000390:	bf00      	nop
}
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <set_option>:

void set_option(uint16_t option, int state)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	6039      	str	r1, [r7, #0]
 80003a2:	80fb      	strh	r3, [r7, #6]
    uint8_t tmp;

    //DEBUG("set option %i to %i\n", option, state);

    /* set option field */
    if (state) {
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d05c      	beq.n	8000464 <set_option+0xcc>
        options |= option;
 80003aa:	4b62      	ldr	r3, [pc, #392]	; (8000534 <set_option+0x19c>)
 80003ac:	881a      	ldrh	r2, [r3, #0]
 80003ae:	88fb      	ldrh	r3, [r7, #6]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b5f      	ldr	r3, [pc, #380]	; (8000534 <set_option+0x19c>)
 80003b6:	801a      	strh	r2, [r3, #0]
        /* trigger option specific actions */
        switch (option) {
 80003b8:	88fb      	ldrh	r3, [r7, #6]
 80003ba:	2b40      	cmp	r3, #64	; 0x40
 80003bc:	d043      	beq.n	8000446 <set_option+0xae>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	f300 80af 	bgt.w	8000522 <set_option+0x18a>
 80003c4:	2b04      	cmp	r3, #4
 80003c6:	d012      	beq.n	80003ee <set_option+0x56>
 80003c8:	2b04      	cmp	r3, #4
 80003ca:	f300 80aa 	bgt.w	8000522 <set_option+0x18a>
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d02a      	beq.n	8000428 <set_option+0x90>
 80003d2:	2b02      	cmp	r3, #2
 80003d4:	f040 80a5 	bne.w	8000522 <set_option+0x18a>
            case AT86RF2XX_OPT_CSMA:
                //DEBUG("[at86rf2xx] opt: enabling CSMA mode" \
                      "(4 retries, min BE: 3 max BE: 5)\n");
                /* Initialize CSMA seed with hardware address */
                set_csma_seed(0b101011);
 80003d8:	202b      	movs	r0, #43	; 0x2b
 80003da:	f7ff ffb1 	bl	8000340 <set_csma_seed>
                set_csma_max_retries(4);
 80003de:	2004      	movs	r0, #4
 80003e0:	f7ff ff5c 	bl	800029c <set_csma_max_retries>
                set_csma_backoff_exp(3, 5);
 80003e4:	2105      	movs	r1, #5
 80003e6:	2003      	movs	r0, #3
 80003e8:	f7ff ff87 	bl	80002fa <set_csma_backoff_exp>
                break;
 80003ec:	e09e      	b.n	800052c <set_option+0x194>
            case AT86RF2XX_OPT_PROMISCUOUS:
                //DEBUG("[at86rf2xx] opt: enabling PROMISCUOUS mode\n");
                /* disable auto ACKs in promiscuous mode */
                tmp = readRegister(AT86RF2XX_REG__CSMA_SEED_1);
 80003ee:	202e      	movs	r0, #46	; 0x2e
 80003f0:	f7ff feea 	bl	80001c8 <readRegister>
 80003f4:	4603      	mov	r3, r0
 80003f6:	73fb      	strb	r3, [r7, #15]
                tmp |= AT86RF2XX_CSMA_SEED_1__AACK_DIS_ACK;
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
 80003fa:	f043 0310 	orr.w	r3, r3, #16
 80003fe:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__CSMA_SEED_1, tmp);
 8000400:	7bfb      	ldrb	r3, [r7, #15]
 8000402:	4619      	mov	r1, r3
 8000404:	202e      	movs	r0, #46	; 0x2e
 8000406:	f7ff ff11 	bl	800022c <writeRegister>
                /* enable promiscuous mode */
                tmp = readRegister(AT86RF2XX_REG__XAH_CTRL_1);
 800040a:	2017      	movs	r0, #23
 800040c:	f7ff fedc 	bl	80001c8 <readRegister>
 8000410:	4603      	mov	r3, r0
 8000412:	73fb      	strb	r3, [r7, #15]
                tmp |= AT86RF2XX_XAH_CTRL_1__AACK_PROM_MODE;
 8000414:	7bfb      	ldrb	r3, [r7, #15]
 8000416:	f043 0302 	orr.w	r3, r3, #2
 800041a:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__XAH_CTRL_1, tmp);
 800041c:	7bfb      	ldrb	r3, [r7, #15]
 800041e:	4619      	mov	r1, r3
 8000420:	2017      	movs	r0, #23
 8000422:	f7ff ff03 	bl	800022c <writeRegister>
                break;
 8000426:	e081      	b.n	800052c <set_option+0x194>
            case AT86RF2XX_OPT_AUTOACK:
                //DEBUG("[at86rf2xx] opt: enabling auto ACKs\n");
                tmp = readRegister(AT86RF2XX_REG__CSMA_SEED_1);
 8000428:	202e      	movs	r0, #46	; 0x2e
 800042a:	f7ff fecd 	bl	80001c8 <readRegister>
 800042e:	4603      	mov	r3, r0
 8000430:	73fb      	strb	r3, [r7, #15]
                tmp &= ~(AT86RF2XX_CSMA_SEED_1__AACK_DIS_ACK);
 8000432:	7bfb      	ldrb	r3, [r7, #15]
 8000434:	f023 0310 	bic.w	r3, r3, #16
 8000438:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__CSMA_SEED_1, tmp);
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	4619      	mov	r1, r3
 800043e:	202e      	movs	r0, #46	; 0x2e
 8000440:	f7ff fef4 	bl	800022c <writeRegister>
                break;
 8000444:	e072      	b.n	800052c <set_option+0x194>
            case AT86RF2XX_OPT_TELL_RX_START:
                //DEBUG("[at86rf2xx] opt: enabling SFD IRQ\n");
                tmp = readRegister(AT86RF2XX_REG__IRQ_MASK);
 8000446:	200e      	movs	r0, #14
 8000448:	f7ff febe 	bl	80001c8 <readRegister>
 800044c:	4603      	mov	r3, r0
 800044e:	73fb      	strb	r3, [r7, #15]
                tmp |= AT86RF2XX_IRQ_STATUS_MASK__RX_START;
 8000450:	7bfb      	ldrb	r3, [r7, #15]
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__IRQ_MASK, tmp);
 8000458:	7bfb      	ldrb	r3, [r7, #15]
 800045a:	4619      	mov	r1, r3
 800045c:	200e      	movs	r0, #14
 800045e:	f7ff fee5 	bl	800022c <writeRegister>
                break;
 8000462:	e063      	b.n	800052c <set_option+0x194>
                /* do nothing */
                break;
        }
    }
    else {
        options &= ~(option);
 8000464:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000468:	43db      	mvns	r3, r3
 800046a:	b21a      	sxth	r2, r3
 800046c:	4b31      	ldr	r3, [pc, #196]	; (8000534 <set_option+0x19c>)
 800046e:	881b      	ldrh	r3, [r3, #0]
 8000470:	b21b      	sxth	r3, r3
 8000472:	4013      	ands	r3, r2
 8000474:	b21b      	sxth	r3, r3
 8000476:	b29a      	uxth	r2, r3
 8000478:	4b2e      	ldr	r3, [pc, #184]	; (8000534 <set_option+0x19c>)
 800047a:	801a      	strh	r2, [r3, #0]
        /* trigger option specific actions */
        switch (option) {
 800047c:	88fb      	ldrh	r3, [r7, #6]
 800047e:	2b40      	cmp	r3, #64	; 0x40
 8000480:	d040      	beq.n	8000504 <set_option+0x16c>
 8000482:	2b40      	cmp	r3, #64	; 0x40
 8000484:	dc4f      	bgt.n	8000526 <set_option+0x18e>
 8000486:	2b04      	cmp	r3, #4
 8000488:	d00a      	beq.n	80004a0 <set_option+0x108>
 800048a:	2b04      	cmp	r3, #4
 800048c:	dc4b      	bgt.n	8000526 <set_option+0x18e>
 800048e:	2b01      	cmp	r3, #1
 8000490:	d029      	beq.n	80004e6 <set_option+0x14e>
 8000492:	2b02      	cmp	r3, #2
 8000494:	d147      	bne.n	8000526 <set_option+0x18e>
            case AT86RF2XX_OPT_CSMA:
                //DEBUG("[at86rf2xx] opt: disabling CSMA mode\n");
                /* setting retries to -1 means CSMA disabled */
                set_csma_max_retries(-1);
 8000496:	f04f 30ff 	mov.w	r0, #4294967295
 800049a:	f7ff feff 	bl	800029c <set_csma_max_retries>
                break;
 800049e:	e045      	b.n	800052c <set_option+0x194>
            case AT86RF2XX_OPT_PROMISCUOUS:
                //DEBUG("[at86rf2xx] opt: disabling PROMISCUOUS mode\n");
                /* disable promiscuous mode */
                tmp = readRegister(AT86RF2XX_REG__XAH_CTRL_1);
 80004a0:	2017      	movs	r0, #23
 80004a2:	f7ff fe91 	bl	80001c8 <readRegister>
 80004a6:	4603      	mov	r3, r0
 80004a8:	73fb      	strb	r3, [r7, #15]
                tmp &= ~(AT86RF2XX_XAH_CTRL_1__AACK_PROM_MODE);
 80004aa:	7bfb      	ldrb	r3, [r7, #15]
 80004ac:	f023 0302 	bic.w	r3, r3, #2
 80004b0:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__XAH_CTRL_1, tmp);
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	4619      	mov	r1, r3
 80004b6:	2017      	movs	r0, #23
 80004b8:	f7ff feb8 	bl	800022c <writeRegister>
                /* re-enable AUTOACK only if the option is set */
                if (options & AT86RF2XX_OPT_AUTOACK) {
 80004bc:	4b1d      	ldr	r3, [pc, #116]	; (8000534 <set_option+0x19c>)
 80004be:	881b      	ldrh	r3, [r3, #0]
 80004c0:	f003 0301 	and.w	r3, r3, #1
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d030      	beq.n	800052a <set_option+0x192>
                    tmp = readRegister(AT86RF2XX_REG__CSMA_SEED_1);
 80004c8:	202e      	movs	r0, #46	; 0x2e
 80004ca:	f7ff fe7d 	bl	80001c8 <readRegister>
 80004ce:	4603      	mov	r3, r0
 80004d0:	73fb      	strb	r3, [r7, #15]
                    tmp &= ~(AT86RF2XX_CSMA_SEED_1__AACK_DIS_ACK);
 80004d2:	7bfb      	ldrb	r3, [r7, #15]
 80004d4:	f023 0310 	bic.w	r3, r3, #16
 80004d8:	73fb      	strb	r3, [r7, #15]
                    writeRegister(AT86RF2XX_REG__CSMA_SEED_1,
 80004da:	7bfb      	ldrb	r3, [r7, #15]
 80004dc:	4619      	mov	r1, r3
 80004de:	202e      	movs	r0, #46	; 0x2e
 80004e0:	f7ff fea4 	bl	800022c <writeRegister>
                                        tmp);
                }
                break;
 80004e4:	e021      	b.n	800052a <set_option+0x192>
            case AT86RF2XX_OPT_AUTOACK:
                //DEBUG("[at86rf2xx] opt: disabling auto ACKs\n");
                tmp = readRegister(AT86RF2XX_REG__CSMA_SEED_1);
 80004e6:	202e      	movs	r0, #46	; 0x2e
 80004e8:	f7ff fe6e 	bl	80001c8 <readRegister>
 80004ec:	4603      	mov	r3, r0
 80004ee:	73fb      	strb	r3, [r7, #15]
                tmp |= AT86RF2XX_CSMA_SEED_1__AACK_DIS_ACK;
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	f043 0310 	orr.w	r3, r3, #16
 80004f6:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__CSMA_SEED_1, tmp);
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
 80004fa:	4619      	mov	r1, r3
 80004fc:	202e      	movs	r0, #46	; 0x2e
 80004fe:	f7ff fe95 	bl	800022c <writeRegister>
                break;
 8000502:	e013      	b.n	800052c <set_option+0x194>
            case AT86RF2XX_OPT_TELL_RX_START:
                //DEBUG("[at86rf2xx] opt: disabling SFD IRQ\n");
                tmp = readRegister(AT86RF2XX_REG__IRQ_MASK);
 8000504:	200e      	movs	r0, #14
 8000506:	f7ff fe5f 	bl	80001c8 <readRegister>
 800050a:	4603      	mov	r3, r0
 800050c:	73fb      	strb	r3, [r7, #15]
                tmp &= ~AT86RF2XX_IRQ_STATUS_MASK__RX_START;
 800050e:	7bfb      	ldrb	r3, [r7, #15]
 8000510:	f023 0304 	bic.w	r3, r3, #4
 8000514:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__IRQ_MASK, tmp);
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	4619      	mov	r1, r3
 800051a:	200e      	movs	r0, #14
 800051c:	f7ff fe86 	bl	800022c <writeRegister>
                break;
 8000520:	e004      	b.n	800052c <set_option+0x194>
                break;
 8000522:	bf00      	nop
 8000524:	e002      	b.n	800052c <set_option+0x194>
            default:
                /* do nothing */
                break;
 8000526:	bf00      	nop
 8000528:	e000      	b.n	800052c <set_option+0x194>
                break;
 800052a:	bf00      	nop
        }
    }
}
 800052c:	bf00      	nop
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000090 	.word	0x20000090

08000538 <_set_state>:

void _set_state(uint8_t state_)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
	writeRegister(AT86RF2XX_REG__TRX_STATE, state_);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	4619      	mov	r1, r3
 8000546:	2002      	movs	r0, #2
 8000548:	f7ff fe70 	bl	800022c <writeRegister>
    while (get_status() != state_);
 800054c:	bf00      	nop
 800054e:	f7ff fe9d 	bl	800028c <get_status>
 8000552:	4603      	mov	r3, r0
 8000554:	461a      	mov	r2, r3
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4293      	cmp	r3, r2
 800055a:	d1f8      	bne.n	800054e <_set_state+0x16>
}
 800055c:	bf00      	nop
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <set_state>:

void set_state(uint8_t state_)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b084      	sub	sp, #16
 800056a:	af00      	add	r7, sp, #0
 800056c:	4603      	mov	r3, r0
 800056e:	71fb      	strb	r3, [r7, #7]
	_set_state(state_);
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ffe0 	bl	8000538 <_set_state>
    uint8_t old_state = get_status();
 8000578:	f7ff fe88 	bl	800028c <get_status>
 800057c:	4603      	mov	r3, r0
 800057e:	73fb      	strb	r3, [r7, #15]

    if (state_ == old_state) {
 8000580:	79fa      	ldrb	r2, [r7, #7]
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	429a      	cmp	r2, r3
 8000586:	d01d      	beq.n	80005c4 <set_state+0x5e>
        return;
    }
    /* make sure there is no ongoing transmission, or state transition already
     * in progress */
    while (old_state == AT86RF2XX_STATE_BUSY_RX_AACK ||
 8000588:	e003      	b.n	8000592 <set_state+0x2c>
           old_state == AT86RF2XX_STATE_BUSY_TX_ARET ||
           old_state == AT86RF2XX_STATE_IN_PROGRESS) {
        old_state = get_status();
 800058a:	f7ff fe7f 	bl	800028c <get_status>
 800058e:	4603      	mov	r3, r0
 8000590:	73fb      	strb	r3, [r7, #15]
    while (old_state == AT86RF2XX_STATE_BUSY_RX_AACK ||
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	2b11      	cmp	r3, #17
 8000596:	d0f8      	beq.n	800058a <set_state+0x24>
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	2b12      	cmp	r3, #18
 800059c:	d0f5      	beq.n	800058a <set_state+0x24>
           old_state == AT86RF2XX_STATE_BUSY_TX_ARET ||
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	2b1f      	cmp	r3, #31
 80005a2:	d0f2      	beq.n	800058a <set_state+0x24>
    }

    /* we need to go via PLL_ON if we are moving between RX_AACK_ON <-> TX_ARET_ON */
    if ((old_state == AT86RF2XX_STATE_RX_AACK_ON &&
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	2b16      	cmp	r3, #22
 80005a8:	d102      	bne.n	80005b0 <set_state+0x4a>
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	2b19      	cmp	r3, #25
 80005ae:	d005      	beq.n	80005bc <set_state+0x56>
             state_ == AT86RF2XX_STATE_TX_ARET_ON) ||
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b19      	cmp	r3, #25
 80005b4:	d107      	bne.n	80005c6 <set_state+0x60>
        (old_state == AT86RF2XX_STATE_TX_ARET_ON &&
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b16      	cmp	r3, #22
 80005ba:	d104      	bne.n	80005c6 <set_state+0x60>
             state_ == AT86RF2XX_STATE_RX_AACK_ON)) {
        _set_state(AT86RF2XX_STATE_PLL_ON);
 80005bc:	2009      	movs	r0, #9
 80005be:	f7ff ffbb 	bl	8000538 <_set_state>
 80005c2:	e000      	b.n	80005c6 <set_state+0x60>
        return;
 80005c4:	bf00      	nop
    /* check if we need to wake up from sleep mode */
    else if (old_state == AT86RF2XX_STATE_SLEEP) {
        //DEBUG("at86rf2xx: waking up from sleep mode\n");
        //assert_awake();
    }
}
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <set_addr_short>:

void set_addr_short(uint16_t addr)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
	uint8_t addr_short[2];
    addr_short[0] = addr >> 8;
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	0a1b      	lsrs	r3, r3, #8
 80005da:	b29b      	uxth	r3, r3
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	733b      	strb	r3, [r7, #12]
    addr_short[1] = addr & 0xff;
 80005e0:	88fb      	ldrh	r3, [r7, #6]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	737b      	strb	r3, [r7, #13]
    writeRegister(AT86RF2XX_REG__SHORT_ADDR_0,
 80005e6:	7b3b      	ldrb	r3, [r7, #12]
 80005e8:	4619      	mov	r1, r3
 80005ea:	2020      	movs	r0, #32
 80005ec:	f7ff fe1e 	bl	800022c <writeRegister>
                        addr_short[0]);
    writeRegister(AT86RF2XX_REG__SHORT_ADDR_1,
 80005f0:	7b7b      	ldrb	r3, [r7, #13]
 80005f2:	4619      	mov	r1, r3
 80005f4:	2021      	movs	r0, #33	; 0x21
 80005f6:	f7ff fe19 	bl	800022c <writeRegister>
                        addr_short[1]);
}
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <set_addr_long>:

void set_addr_long(uint64_t addr)
{
 8000602:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000604:	b087      	sub	sp, #28
 8000606:	af00      	add	r7, sp, #0
 8000608:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t addr_long[8];
    for (int i = 0; i < 8; i++) {
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	e029      	b.n	8000666 <set_addr_long+0x64>
        addr_long[i] = (addr >> ((7 - i) * 8));
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	f1c3 0307 	rsb	r3, r3, #7
 8000618:	00d9      	lsls	r1, r3, #3
 800061a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800061e:	f1c1 0620 	rsb	r6, r1, #32
 8000622:	f1a1 0020 	sub.w	r0, r1, #32
 8000626:	fa22 f401 	lsr.w	r4, r2, r1
 800062a:	fa03 f606 	lsl.w	r6, r3, r6
 800062e:	4334      	orrs	r4, r6
 8000630:	fa23 f000 	lsr.w	r0, r3, r0
 8000634:	4304      	orrs	r4, r0
 8000636:	fa23 f501 	lsr.w	r5, r3, r1
 800063a:	b2e1      	uxtb	r1, r4
 800063c:	f107 020c 	add.w	r2, r7, #12
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	4413      	add	r3, r2
 8000644:	460a      	mov	r2, r1
 8000646:	701a      	strb	r2, [r3, #0]
        writeRegister((AT86RF2XX_REG__IEEE_ADDR_0 + i), addr_long[i]);
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	3324      	adds	r3, #36	; 0x24
 800064e:	b2d8      	uxtb	r0, r3
 8000650:	f107 020c 	add.w	r2, r7, #12
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	4413      	add	r3, r2
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4619      	mov	r1, r3
 800065c:	f7ff fde6 	bl	800022c <writeRegister>
    for (int i = 0; i < 8; i++) {
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	3301      	adds	r3, #1
 8000664:	617b      	str	r3, [r7, #20]
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	2b07      	cmp	r3, #7
 800066a:	ddd2      	ble.n	8000612 <set_addr_long+0x10>
    }
}
 800066c:	bf00      	nop
 800066e:	bf00      	nop
 8000670:	371c      	adds	r7, #28
 8000672:	46bd      	mov	sp, r7
 8000674:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000676 <set_pan>:

void set_pan(uint16_t pan)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	4603      	mov	r3, r0
 800067e:	80fb      	strh	r3, [r7, #6]
    //pan = pan_;
    //DEBUG("pan0: %u, pan1: %u\n", (uint8_t)pan, pan >> 8);
    writeRegister(AT86RF2XX_REG__PAN_ID_0, (uint8_t)pan);
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	4619      	mov	r1, r3
 8000686:	2022      	movs	r0, #34	; 0x22
 8000688:	f7ff fdd0 	bl	800022c <writeRegister>
    writeRegister(AT86RF2XX_REG__PAN_ID_1, (pan >> 8));
 800068c:	88fb      	ldrh	r3, [r7, #6]
 800068e:	0a1b      	lsrs	r3, r3, #8
 8000690:	b29b      	uxth	r3, r3
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4619      	mov	r1, r3
 8000696:	2023      	movs	r0, #35	; 0x23
 8000698:	f7ff fdc8 	bl	800022c <writeRegister>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <set_chan>:

void set_chan(uint8_t channel)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp;

    if (channel < AT86RF2XX_MIN_CHANNEL
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	2b0a      	cmp	r3, #10
 80006b2:	d91b      	bls.n	80006ec <set_chan+0x48>
        || channel > AT86RF2XX_MAX_CHANNEL) {
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	2b1a      	cmp	r3, #26
 80006b8:	d818      	bhi.n	80006ec <set_chan+0x48>
        return;
    }
    //chan = channel;
    tmp = readRegister(AT86RF2XX_REG__PHY_CC_CCA);
 80006ba:	2008      	movs	r0, #8
 80006bc:	f7ff fd84 	bl	80001c8 <readRegister>
 80006c0:	4603      	mov	r3, r0
 80006c2:	73fb      	strb	r3, [r7, #15]
    tmp &= ~(AT86RF2XX_PHY_CC_CCA_MASK__CHANNEL);
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	f023 031f 	bic.w	r3, r3, #31
 80006ca:	73fb      	strb	r3, [r7, #15]
    tmp |= (channel & AT86RF2XX_PHY_CC_CCA_MASK__CHANNEL);
 80006cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d0:	f003 031f 	and.w	r3, r3, #31
 80006d4:	b25a      	sxtb	r2, r3
 80006d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006da:	4313      	orrs	r3, r2
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	73fb      	strb	r3, [r7, #15]
    writeRegister(AT86RF2XX_REG__PHY_CC_CCA, tmp);
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	4619      	mov	r1, r3
 80006e4:	2008      	movs	r0, #8
 80006e6:	f7ff fda1 	bl	800022c <writeRegister>
 80006ea:	e000      	b.n	80006ee <set_chan+0x4a>
        return;
 80006ec:	bf00      	nop
}
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	0000      	movs	r0, r0
	...

080006f8 <at86rf233_init>:

void at86rf233_init(){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0


	HAL_GPIO_WritePin(SLP_GPIO_Port, SLP_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2140      	movs	r1, #64	; 0x40
 8000702:	483d      	ldr	r0, [pc, #244]	; (80007f8 <at86rf233_init+0x100>)
 8000704:	f000 ff26 	bl	8001554 <HAL_GPIO_WritePin>
	//digitalWrite(SLP_TR, LOW);
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800070e:	483a      	ldr	r0, [pc, #232]	; (80007f8 <at86rf233_init+0x100>)
 8000710:	f000 ff20 	bl	8001554 <HAL_GPIO_WritePin>
	//digitalWrite(RESET, HIGH);
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071a:	4838      	ldr	r0, [pc, #224]	; (80007fc <at86rf233_init+0x104>)
 800071c:	f000 ff1a 	bl	8001554 <HAL_GPIO_WritePin>
	//digitalWrite(SEL, HIGH);

	uint8_t part_num = readRegister(AT86RF2XX_REG__PART_NUM);
 8000720:	201c      	movs	r0, #28
 8000722:	f7ff fd51 	bl	80001c8 <readRegister>
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
	    if (part_num != 0xb) {
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b0b      	cmp	r3, #11
 800072e:	d15a      	bne.n	80007e6 <at86rf233_init+0xee>

	        return -1;
	    }
	//
	hardware_reset();
 8000730:	f000 f88a 	bl	8000848 <hardware_reset>
	reset_state_machine();
 8000734:	f000 f877 	bl	8000826 <reset_state_machine>
	//

	 seq_nr = 0;
 8000738:	4b31      	ldr	r3, [pc, #196]	; (8000800 <at86rf233_init+0x108>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
	 options = 0;
 800073e:	4b31      	ldr	r3, [pc, #196]	; (8000804 <at86rf233_init+0x10c>)
 8000740:	2200      	movs	r2, #0
 8000742:	801a      	strh	r2, [r3, #0]


	  // Enable promiscuous mode:
	set_addr_short(0x1);
 8000744:	2001      	movs	r0, #1
 8000746:	f7ff ff41 	bl	80005cc <set_addr_short>
	set_pan(0x0023);
 800074a:	2023      	movs	r0, #35	; 0x23
 800074c:	f7ff ff93 	bl	8000676 <set_pan>
	set_addr_long(0x2222334445666768);
 8000750:	a127      	add	r1, pc, #156	; (adr r1, 80007f0 <at86rf233_init+0xf8>)
 8000752:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000756:	f7ff ff54 	bl	8000602 <set_addr_long>


	set_chan(AT86RF2XX_DEFAULT_CHANNEL);
 800075a:	200b      	movs	r0, #11
 800075c:	f7ff ffa2 	bl	80006a4 <set_chan>


	writeRegister(0x05, 0xF); // tx power
 8000760:	210f      	movs	r1, #15
 8000762:	2005      	movs	r0, #5
 8000764:	f7ff fd62 	bl	800022c <writeRegister>
	writeRegister(0x16,0x1);
 8000768:	2101      	movs	r1, #1
 800076a:	2016      	movs	r0, #22
 800076c:	f7ff fd5e 	bl	800022c <writeRegister>

	/* set default options */
	 set_option(AT86RF2XX_OPT_PROMISCUOUS, 1);
 8000770:	2101      	movs	r1, #1
 8000772:	2004      	movs	r0, #4
 8000774:	f7ff fe10 	bl	8000398 <set_option>
	 set_option(AT86RF2XX_OPT_AUTOACK, 1);
 8000778:	2101      	movs	r1, #1
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff fe0c 	bl	8000398 <set_option>
	 set_option(AT86RF2XX_OPT_CSMA, 1);
 8000780:	2101      	movs	r1, #1
 8000782:	2002      	movs	r0, #2
 8000784:	f7ff fe08 	bl	8000398 <set_option>
	 set_option(AT86RF2XX_OPT_TELL_RX_START, 1);
 8000788:	2101      	movs	r1, #1
 800078a:	2040      	movs	r0, #64	; 0x40
 800078c:	f7ff fe04 	bl	8000398 <set_option>
	 set_option(AT86RF2XX_OPT_TELL_RX_END, 1);
 8000790:	2101      	movs	r1, #1
 8000792:	2080      	movs	r0, #128	; 0x80
 8000794:	f7ff fe00 	bl	8000398 <set_option>

	writeRegister(AT86RF2XX_REG__TRX_CTRL_2, AT86RF2XX_TRX_CTRL_2_MASK__RX_SAFE_MODE);
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	200c      	movs	r0, #12
 800079c:	f7ff fd46 	bl	800022c <writeRegister>

	readRegister(0x1C);
 80007a0:	201c      	movs	r0, #28
 80007a2:	f7ff fd11 	bl	80001c8 <readRegister>


	/* disable clock output to save power */
    uint8_t tmp = readRegister(AT86RF2XX_REG__TRX_CTRL_0);
 80007a6:	2003      	movs	r0, #3
 80007a8:	f7ff fd0e 	bl	80001c8 <readRegister>
 80007ac:	4603      	mov	r3, r0
 80007ae:	71bb      	strb	r3, [r7, #6]
    tmp &= ~(AT86RF2XX_TRX_CTRL_0_MASK__CLKM_CTRL);
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	f023 0307 	bic.w	r3, r3, #7
 80007b6:	71bb      	strb	r3, [r7, #6]
    tmp &= ~(AT86RF2XX_TRX_CTRL_0_MASK__CLKM_SHA_SEL);
 80007b8:	79bb      	ldrb	r3, [r7, #6]
 80007ba:	f023 0308 	bic.w	r3, r3, #8
 80007be:	71bb      	strb	r3, [r7, #6]
    tmp |= (AT86RF2XX_TRX_CTRL_0_CLKM_CTRL__OFF);
    writeRegister(AT86RF2XX_REG__TRX_CTRL_0, tmp);
 80007c0:	79bb      	ldrb	r3, [r7, #6]
 80007c2:	4619      	mov	r1, r3
 80007c4:	2003      	movs	r0, #3
 80007c6:	f7ff fd31 	bl	800022c <writeRegister>

	    /* enable interrupts */
	writeRegister(AT86RF2XX_REG__IRQ_MASK, AT86RF2XX_IRQ_STATUS_MASK__TRX_END);
 80007ca:	2108      	movs	r1, #8
 80007cc:	200e      	movs	r0, #14
 80007ce:	f7ff fd2d 	bl	800022c <writeRegister>

	    /* clear interrupt flags */
	readRegister(AT86RF2XX_REG__IRQ_STATUS);
 80007d2:	200f      	movs	r0, #15
 80007d4:	f7ff fcf8 	bl	80001c8 <readRegister>

	set_state(6); //16 - RX_ACACK 6 - rx 25 - tx
 80007d8:	2006      	movs	r0, #6
 80007da:	f7ff fec4 	bl	8000566 <set_state>
	  //Serial.print("Detected part nr: 0x");
	  //Serial.println(readRegister(0x1C), HEX);
	  //Serial.print("Version: 0x");
	  //Serial.println(readRegister(0x1D), HEX);

	HAL_Delay(1);
 80007de:	2001      	movs	r0, #1
 80007e0:	f000 fbf4 	bl	8000fcc <HAL_Delay>
 80007e4:	e000      	b.n	80007e8 <at86rf233_init+0xf0>
	        return -1;
 80007e6:	bf00      	nop
}
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	45666768 	.word	0x45666768
 80007f4:	22223344 	.word	0x22223344
 80007f8:	48000400 	.word	0x48000400
 80007fc:	48000800 	.word	0x48000800
 8000800:	20000092 	.word	0x20000092
 8000804:	20000090 	.word	0x20000090

08000808 <force_trx_off>:
void force_trx_off()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
    writeRegister(AT86RF2XX_REG__TRX_STATE, AT86RF2XX_TRX_STATE__FORCE_TRX_OFF);
 800080c:	2103      	movs	r1, #3
 800080e:	2002      	movs	r0, #2
 8000810:	f7ff fd0c 	bl	800022c <writeRegister>
    while (get_status() != AT86RF2XX_STATE_TRX_OFF);
 8000814:	bf00      	nop
 8000816:	f7ff fd39 	bl	800028c <get_status>
 800081a:	4603      	mov	r3, r0
 800081c:	2b08      	cmp	r3, #8
 800081e:	d1fa      	bne.n	8000816 <force_trx_off+0xe>
}
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}

08000826 <reset_state_machine>:
void reset_state_machine()
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0

    //assert_awake();

    /* Wait for any state transitions to complete before forcing TRX_OFF */
    do {
        old_state = get_status();
 800082c:	f7ff fd2e 	bl	800028c <get_status>
 8000830:	4603      	mov	r3, r0
 8000832:	71fb      	strb	r3, [r7, #7]
    } while (old_state == AT86RF2XX_STATE_IN_PROGRESS);
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	2b1f      	cmp	r3, #31
 8000838:	d0f8      	beq.n	800082c <reset_state_machine+0x6>

    force_trx_off();
 800083a:	f7ff ffe5 	bl	8000808 <force_trx_off>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <hardware_reset>:

void hardware_reset(void){
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

	    /* trigger hardware reset */

		HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000852:	4808      	ldr	r0, [pc, #32]	; (8000874 <hardware_reset+0x2c>)
 8000854:	f000 fe7e 	bl	8001554 <HAL_GPIO_WritePin>
	    HAL_Delay(AT86RF2XX_RESET_PULSE_WIDTH);
 8000858:	2001      	movs	r0, #1
 800085a:	f000 fbb7 	bl	8000fcc <HAL_Delay>
	    HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 800085e:	2201      	movs	r2, #1
 8000860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000864:	4803      	ldr	r0, [pc, #12]	; (8000874 <hardware_reset+0x2c>)
 8000866:	f000 fe75 	bl	8001554 <HAL_GPIO_WritePin>
	    HAL_Delay(AT86RF2XX_RESET_PULSE_WIDTH);
 800086a:	2001      	movs	r0, #1
 800086c:	f000 fbae 	bl	8000fcc <HAL_Delay>
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	48000400 	.word	0x48000400

08000878 <fb_read>:
    return len;
  }

 void fb_read(uint8_t *data,
                        const size_t len)
 {
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
     uint8_t readCommand = AT86RF2XX_ACCESS_FB | AT86RF2XX_ACCESS_READ;
 8000882:	2320      	movs	r3, #32
 8000884:	73fb      	strb	r3, [r7, #15]
     //digitalWrite(cs_pin, LOW);
     CSRESET;
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800088c:	480e      	ldr	r0, [pc, #56]	; (80008c8 <fb_read+0x50>)
 800088e:	f000 fe61 	bl	8001554 <HAL_GPIO_WritePin>
     //SPI.transfer(readCommand);
     HAL_SPI_Transmit(&hspi3, &readCommand, sizeof(readCommand), HAL_MAX_DELAY);
 8000892:	f107 010f 	add.w	r1, r7, #15
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	2201      	movs	r2, #1
 800089c:	480b      	ldr	r0, [pc, #44]	; (80008cc <fb_read+0x54>)
 800089e:	f001 fdd4 	bl	800244a <HAL_SPI_Transmit>
     HAL_SPI_Receive(&hspi3, data, len, HAL_MAX_DELAY);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	4807      	ldr	r0, [pc, #28]	; (80008cc <fb_read+0x54>)
 80008ae:	f001 ff3a 	bl	8002726 <HAL_SPI_Receive>
     //for (int b=0; b<len; b++) {
       //data[b] = SPI.transfer(0x00);
     //}
     //digitalWrite(cs_pin, HIGH);
     CSSET;
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008b8:	4803      	ldr	r0, [pc, #12]	; (80008c8 <fb_read+0x50>)
 80008ba:	f000 fe4b 	bl	8001554 <HAL_GPIO_WritePin>
 }
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	48000800 	.word	0x48000800
 80008cc:	2000002c 	.word	0x2000002c

080008d0 <rx_len>:

 size_t rx_len(void)
 {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
     uint8_t phr;
     fb_read(&phr, 1);
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	2101      	movs	r1, #1
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ffcc 	bl	8000878 <fb_read>

     /* ignore MSB (refer p.80) and substract length of FCS field */
     return (size_t)((phr & 0x7f) - 2);
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008e6:	3b02      	subs	r3, #2
 }
 80008e8:	4618      	mov	r0, r3
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <sram_read>:

 void sram_read(const uint8_t offset,
                          uint8_t *data,
                          const size_t len)
 {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
 80008fc:	73fb      	strb	r3, [r7, #15]
     uint8_t readCommand = AT86RF2XX_ACCESS_SRAM | AT86RF2XX_ACCESS_READ;
 80008fe:	2300      	movs	r3, #0
 8000900:	75fb      	strb	r3, [r7, #23]
     //digitalWrite(cs_pin, LOW);
     CSRESET;
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000908:	4812      	ldr	r0, [pc, #72]	; (8000954 <sram_read+0x64>)
 800090a:	f000 fe23 	bl	8001554 <HAL_GPIO_WritePin>
     //SPI.transfer(readCommand);
     HAL_SPI_Transmit(&hspi3, &readCommand, sizeof(readCommand), HAL_MAX_DELAY);
 800090e:	f107 0117 	add.w	r1, r7, #23
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
 8000916:	2201      	movs	r2, #1
 8000918:	480f      	ldr	r0, [pc, #60]	; (8000958 <sram_read+0x68>)
 800091a:	f001 fd96 	bl	800244a <HAL_SPI_Transmit>
     //SPI.transfer((char)offset);
     HAL_SPI_Transmit(&hspi3, &offset, sizeof(offset), HAL_MAX_DELAY);
 800091e:	f107 010f 	add.w	r1, r7, #15
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	2201      	movs	r2, #1
 8000928:	480b      	ldr	r0, [pc, #44]	; (8000958 <sram_read+0x68>)
 800092a:	f001 fd8e 	bl	800244a <HAL_SPI_Transmit>
     HAL_SPI_Receive(&hspi3, data, len, HAL_MAX_DELAY);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	b29a      	uxth	r2, r3
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
 8000936:	68b9      	ldr	r1, [r7, #8]
 8000938:	4807      	ldr	r0, [pc, #28]	; (8000958 <sram_read+0x68>)
 800093a:	f001 fef4 	bl	8002726 <HAL_SPI_Receive>
     //for (int b=0; b<len; b++) {
       //data[b] = SPI.transfer(0x00);
     //}
     CSSET;
 800093e:	2201      	movs	r2, #1
 8000940:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <sram_read+0x64>)
 8000946:	f000 fe05 	bl	8001554 <HAL_GPIO_WritePin>
     //digitalWrite(cs_pin, HIGH);
 }
 800094a:	bf00      	nop
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	48000800 	.word	0x48000800
 8000958:	2000002c 	.word	0x2000002c

0800095c <rx_read>:

 void rx_read(uint8_t *data, size_t len, size_t offset)
 {
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
      * position 1.
      * The AT86RF231 does not return the PHR field and return
      * the first data byte at position 0.
      */
 #ifndef MODULE_AT86RF231
     sram_read(offset + 1, data, len);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	3301      	adds	r3, #1
 800096e:	b2db      	uxtb	r3, r3
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	68f9      	ldr	r1, [r7, #12]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ffbb 	bl	80008f0 <sram_read>
 #else
     sram_read(offset, data, len);
 #endif
 }
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <at86rf2xx_receive_data>:

 void at86rf2xx_receive_data() {
 8000982:	b5b0      	push	{r4, r5, r7, lr}
 8000984:	b084      	sub	sp, #16
 8000986:	af00      	add	r7, sp, #0
 8000988:	466b      	mov	r3, sp
 800098a:	461d      	mov	r5, r3
   /*  print the length of the frame
    *  (including the header)
    */
   size_t pkt_len = rx_len();
 800098c:	f7ff ffa0 	bl	80008d0 <rx_len>
 8000990:	60f8      	str	r0, [r7, #12]

   /*  Print the frame, byte for byte  */
   uint8_t data[pkt_len];
 8000992:	68fc      	ldr	r4, [r7, #12]
 8000994:	4623      	mov	r3, r4
 8000996:	3b01      	subs	r3, #1
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	4620      	mov	r0, r4
 800099c:	f04f 0100 	mov.w	r1, #0
 80009a0:	f04f 0200 	mov.w	r2, #0
 80009a4:	f04f 0300 	mov.w	r3, #0
 80009a8:	00cb      	lsls	r3, r1, #3
 80009aa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80009ae:	00c2      	lsls	r2, r0, #3
 80009b0:	4620      	mov	r0, r4
 80009b2:	f04f 0100 	mov.w	r1, #0
 80009b6:	f04f 0200 	mov.w	r2, #0
 80009ba:	f04f 0300 	mov.w	r3, #0
 80009be:	00cb      	lsls	r3, r1, #3
 80009c0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80009c4:	00c2      	lsls	r2, r0, #3
 80009c6:	1de3      	adds	r3, r4, #7
 80009c8:	08db      	lsrs	r3, r3, #3
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	ebad 0d03 	sub.w	sp, sp, r3
 80009d0:	466b      	mov	r3, sp
 80009d2:	3300      	adds	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
   rx_read(data, pkt_len, 0);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	68f9      	ldr	r1, [r7, #12]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ffbd 	bl	800095c <rx_read>
 80009e2:	46ad      	mov	sp, r5


   /* How many frames is this so far?  */

 }
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bdb0      	pop	{r4, r5, r7, pc}

080009ec <sleepMode>:
  * @retval int
  */


 void sleepMode(void)
     {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
       /* Enable Power Control clock */
       __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <sleepMode+0x30>)
 80009f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f6:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <sleepMode+0x30>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fc:	6593      	str	r3, [r2, #88]	; 0x58
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <sleepMode+0x30>)
 8000a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

       /* Enter Sleep Mode */
       HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f000 fdd3 	bl	80015b8 <HAL_PWR_EnterSLEEPMode>
     }
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40021000 	.word	0x40021000

08000a20 <main>:
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a26:	f000 fa5c 	bl	8000ee2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2a:	f000 f841 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2e:	f000 f8c3 	bl	8000bb8 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000a32:	f000 f883 	bl	8000b3c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  at86rf233_init();
 8000a36:	f7ff fe5f 	bl	80006f8 <at86rf233_init>
  for(int i=0;i<10;i++){
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	e00a      	b.n	8000a56 <main+0x36>
	  HAL_Delay(100);
 8000a40:	2064      	movs	r0, #100	; 0x64
 8000a42:	f000 fac3 	bl	8000fcc <HAL_Delay>
  	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a46:	2180      	movs	r1, #128	; 0x80
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4c:	f000 fd9a 	bl	8001584 <HAL_GPIO_TogglePin>
  for(int i=0;i<10;i++){
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3301      	adds	r3, #1
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b09      	cmp	r3, #9
 8000a5a:	ddf1      	ble.n	8000a40 <main+0x20>
  }
  uint8_t irq_mask = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	70fb      	strb	r3, [r7, #3]
  uint8_t CurrentState = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	70bb      	strb	r3, [r7, #2]
  HAL_SuspendTick();
 8000a64:	f000 fad6 	bl	8001014 <HAL_SuspendTick>
  sleepMode();
 8000a68:	f7ff ffc0 	bl	80009ec <sleepMode>

    /* USER CODE BEGIN 3 */
	  //writeRegister(0x02,0x02);
	  //send("bla", sizeof("bla"));

	  CurrentState = get_status(); //Page 37 of datasheet
 8000a6c:	f7ff fc0e 	bl	800028c <get_status>
 8000a70:	4603      	mov	r3, r0
 8000a72:	70bb      	strb	r3, [r7, #2]
	  //uint8_t Interrupt = readRegister(0x0F);
	  //uint8_t PHY_RSSI = readRegister(0x06); //if bit[7] = 1 (RX_CRC_VALID), FCS is valid

	  irq_mask = readRegister(AT86RF2XX_REG__IRQ_STATUS);
 8000a74:	200f      	movs	r0, #15
 8000a76:	f7ff fba7 	bl	80001c8 <readRegister>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	70fb      	strb	r3, [r7, #3]

	  if (irq_mask & AT86RF2XX_IRQ_STATUS_MASK__RX_START){
 8000a7e:	78fb      	ldrb	r3, [r7, #3]
 8000a80:	f003 0304 	and.w	r3, r3, #4
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d005      	beq.n	8000a94 <main+0x74>
		  	//uint8_t test = 0;
		  	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2180      	movs	r1, #128	; 0x80
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a90:	f000 fd60 	bl	8001554 <HAL_GPIO_WritePin>
	  }
	 // else counter ++;
	  //if(counter>4){
		  //NVIC_SystemReset();
	  	//  }
	  if (irq_mask & AT86RF2XX_IRQ_STATUS_MASK__TRX_END)
 8000a94:	78fb      	ldrb	r3, [r7, #3]
 8000a96:	f003 0308 	and.w	r3, r3, #8
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0e6      	beq.n	8000a6c <main+0x4c>
	   {
	     //if(state == AT86RF2XX_STATE_RX_AACK_ON || state == AT86RF2XX_STATE_BUSY_RX_AACK) {

	       at86rf2xx_receive_data();
 8000a9e:	f7ff ff70 	bl	8000982 <at86rf2xx_receive_data>
	       HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2180      	movs	r1, #128	; 0x80
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aaa:	f000 fd53 	bl	8001554 <HAL_GPIO_WritePin>
	  CurrentState = get_status(); //Page 37 of datasheet
 8000aae:	e7dd      	b.n	8000a6c <main+0x4c>

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b096      	sub	sp, #88	; 0x58
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	2244      	movs	r2, #68	; 0x44
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f002 fb54 	bl	800316c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ad2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ad6:	f000 fdb1 	bl	800163c <HAL_PWREx_ControlVoltageScaling>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ae0:	f000 f8f0 	bl	8000cc4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000af0:	2360      	movs	r3, #96	; 0x60
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 fe3b 	bl	8001778 <HAL_RCC_OscConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000b08:	f000 f8dc 	bl	8000cc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b10:	2300      	movs	r3, #0
 8000b12:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b20:	463b      	mov	r3, r7
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 fa01 	bl	8001f2c <HAL_RCC_ClockConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b30:	f000 f8c8 	bl	8000cc4 <Error_Handler>
  }
}
 8000b34:	bf00      	nop
 8000b36:	3758      	adds	r7, #88	; 0x58
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_SPI3_Init+0x74>)
 8000b42:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <MX_SPI3_Init+0x78>)
 8000b44:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_SPI3_Init+0x74>)
 8000b48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b4c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_SPI3_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_SPI3_Init+0x74>)
 8000b56:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b5a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_SPI3_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <MX_SPI3_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_SPI3_Init+0x74>)
 8000b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b6e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_SPI3_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_SPI3_Init+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_SPI3_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <MX_SPI3_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_SPI3_Init+0x74>)
 8000b8a:	2207      	movs	r2, #7
 8000b8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MX_SPI3_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_SPI3_Init+0x74>)
 8000b96:	2208      	movs	r2, #8
 8000b98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_SPI3_Init+0x74>)
 8000b9c:	f001 fbb2 	bl	8002304 <HAL_SPI_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000ba6:	f000 f88d 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000002c 	.word	0x2000002c
 8000bb4:	40003c00 	.word	0x40003c00

08000bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b3a      	ldr	r3, [pc, #232]	; (8000cb8 <MX_GPIO_Init+0x100>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a39      	ldr	r2, [pc, #228]	; (8000cb8 <MX_GPIO_Init+0x100>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b37      	ldr	r3, [pc, #220]	; (8000cb8 <MX_GPIO_Init+0x100>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	4b34      	ldr	r3, [pc, #208]	; (8000cb8 <MX_GPIO_Init+0x100>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	4a33      	ldr	r2, [pc, #204]	; (8000cb8 <MX_GPIO_Init+0x100>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf2:	4b31      	ldr	r3, [pc, #196]	; (8000cb8 <MX_GPIO_Init+0x100>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	4b2e      	ldr	r3, [pc, #184]	; (8000cb8 <MX_GPIO_Init+0x100>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	4a2d      	ldr	r2, [pc, #180]	; (8000cb8 <MX_GPIO_Init+0x100>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0a:	4b2b      	ldr	r3, [pc, #172]	; (8000cb8 <MX_GPIO_Init+0x100>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f000 fc99 	bl	8001554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c28:	4824      	ldr	r0, [pc, #144]	; (8000cbc <MX_GPIO_Init+0x104>)
 8000c2a:	f000 fc93 	bl	8001554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SLP_Pin|RESET_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000c34:	4822      	ldr	r0, [pc, #136]	; (8000cc0 <MX_GPIO_Init+0x108>)
 8000c36:	f000 fc8d 	bl	8001554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c54:	f000 fad4 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 030c 	add.w	r3, r7, #12
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4813      	ldr	r0, [pc, #76]	; (8000cbc <MX_GPIO_Init+0x104>)
 8000c6e:	f000 fac7 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000c72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480c      	ldr	r0, [pc, #48]	; (8000cbc <MX_GPIO_Init+0x104>)
 8000c8c:	f000 fab8 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : SLP_Pin RESET_Pin */
  GPIO_InitStruct.Pin = SLP_Pin|RESET_Pin;
 8000c90:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca2:	f107 030c 	add.w	r3, r7, #12
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_GPIO_Init+0x108>)
 8000caa:	f000 faa9 	bl	8001200 <HAL_GPIO_Init>

}
 8000cae:	bf00      	nop
 8000cb0:	3720      	adds	r7, #32
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	48000800 	.word	0x48000800
 8000cc0:	48000400 	.word	0x48000400

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <Error_Handler+0x8>
	...

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <HAL_MspInit+0x44>)
 8000cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_MspInit+0x44>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_MspInit+0x44>)
 8000ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_MspInit+0x44>)
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf2:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <HAL_MspInit+0x44>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_MspInit+0x44>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000

08000d18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08c      	sub	sp, #48	; 0x30
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a34      	ldr	r2, [pc, #208]	; (8000e08 <HAL_SPI_MspInit+0xf0>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d162      	bne.n	8000e00 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d3a:	4b34      	ldr	r3, [pc, #208]	; (8000e0c <HAL_SPI_MspInit+0xf4>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	4a33      	ldr	r2, [pc, #204]	; (8000e0c <HAL_SPI_MspInit+0xf4>)
 8000d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d44:	6593      	str	r3, [r2, #88]	; 0x58
 8000d46:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <HAL_SPI_MspInit+0xf4>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d4e:	61bb      	str	r3, [r7, #24]
 8000d50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <HAL_SPI_MspInit+0xf4>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	4a2d      	ldr	r2, [pc, #180]	; (8000e0c <HAL_SPI_MspInit+0xf4>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <HAL_SPI_MspInit+0xf4>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <HAL_SPI_MspInit+0xf4>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	4a27      	ldr	r2, [pc, #156]	; (8000e0c <HAL_SPI_MspInit+0xf4>)
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d76:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <HAL_SPI_MspInit+0xf4>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <HAL_SPI_MspInit+0xf4>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	4a21      	ldr	r2, [pc, #132]	; (8000e0c <HAL_SPI_MspInit+0xf4>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <HAL_SPI_MspInit+0xf4>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    PA15 (JTDI)     ------> SPI3_NSS
    PC12     ------> SPI3_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dac:	2306      	movs	r3, #6
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dba:	f000 fa21 	bl	8001200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dd0:	2306      	movs	r3, #6
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480d      	ldr	r0, [pc, #52]	; (8000e10 <HAL_SPI_MspInit+0xf8>)
 8000ddc:	f000 fa10 	bl	8001200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000de0:	2318      	movs	r3, #24
 8000de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000df0:	2306      	movs	r3, #6
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4806      	ldr	r0, [pc, #24]	; (8000e14 <HAL_SPI_MspInit+0xfc>)
 8000dfc:	f000 fa00 	bl	8001200 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e00:	bf00      	nop
 8000e02:	3730      	adds	r7, #48	; 0x30
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40003c00 	.word	0x40003c00
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	48000800 	.word	0x48000800
 8000e14:	48000400 	.word	0x48000400

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <NMI_Handler+0x4>

08000e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e64:	f000 f892 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <SystemInit+0x20>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <SystemInit+0x20>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e94:	f7ff ffea 	bl	8000e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e98:	480c      	ldr	r0, [pc, #48]	; (8000ecc <LoopForever+0x6>)
  ldr r1, =_edata
 8000e9a:	490d      	ldr	r1, [pc, #52]	; (8000ed0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <LoopForever+0xe>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eb0:	4c0a      	ldr	r4, [pc, #40]	; (8000edc <LoopForever+0x16>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f002 f931 	bl	8003124 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ec2:	f7ff fdad 	bl	8000a20 <main>

08000ec6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ec6:	e7fe      	b.n	8000ec6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ec8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ed4:	080031dc 	.word	0x080031dc
  ldr r2, =_sbss
 8000ed8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000edc:	20000098 	.word	0x20000098

08000ee0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC1_2_IRQHandler>

08000ee2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f953 	bl	8001198 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef2:	200f      	movs	r0, #15
 8000ef4:	f000 f80e 	bl	8000f14 <HAL_InitTick>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d002      	beq.n	8000f04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	71fb      	strb	r3, [r7, #7]
 8000f02:	e001      	b.n	8000f08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f04:	f7ff fee4 	bl	8000cd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_InitTick+0x6c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d023      	beq.n	8000f70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <HAL_InitTick+0x70>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_InitTick+0x6c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f951 	bl	80011e6 <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10f      	bne.n	8000f6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d809      	bhi.n	8000f64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f000 f929 	bl	80011ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_InitTick+0x74>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e007      	b.n	8000f74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e004      	b.n	8000f74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
 8000f6e:	e001      	b.n	8000f74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000000 	.word	0x20000000
 8000f88:	20000004 	.word	0x20000004

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000094 	.word	0x20000094

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000094 	.word	0x20000094

08000fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff ffee 	bl	8000fb4 <HAL_GetTick>
 8000fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe4:	d005      	beq.n	8000ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <HAL_Delay+0x44>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff2:	bf00      	nop
 8000ff4:	f7ff ffde 	bl	8000fb4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	429a      	cmp	r2, r3
 8001002:	d8f7      	bhi.n	8000ff4 <HAL_Delay+0x28>
  {
  }
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_SuspendTick+0x1c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <HAL_SuspendTick+0x1c>)
 800101e:	f023 0302 	bic.w	r3, r3, #2
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000e010 	.word	0xe000e010

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db0a      	blt.n	80010c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	490c      	ldr	r1, [pc, #48]	; (80010e4 <__NVIC_SetPriority+0x4c>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	0112      	lsls	r2, r2, #4
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	440b      	add	r3, r1
 80010bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c0:	e00a      	b.n	80010d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4908      	ldr	r1, [pc, #32]	; (80010e8 <__NVIC_SetPriority+0x50>)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	3b04      	subs	r3, #4
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	761a      	strb	r2, [r3, #24]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000e100 	.word	0xe000e100
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	; 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f1c3 0307 	rsb	r3, r3, #7
 8001106:	2b04      	cmp	r3, #4
 8001108:	bf28      	it	cs
 800110a:	2304      	movcs	r3, #4
 800110c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3304      	adds	r3, #4
 8001112:	2b06      	cmp	r3, #6
 8001114:	d902      	bls.n	800111c <NVIC_EncodePriority+0x30>
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3b03      	subs	r3, #3
 800111a:	e000      	b.n	800111e <NVIC_EncodePriority+0x32>
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	f04f 32ff 	mov.w	r2, #4294967295
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001134:	f04f 31ff 	mov.w	r1, #4294967295
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	43d9      	mvns	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	4313      	orrs	r3, r2
         );
}
 8001146:	4618      	mov	r0, r3
 8001148:	3724      	adds	r7, #36	; 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001164:	d301      	bcc.n	800116a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001166:	2301      	movs	r3, #1
 8001168:	e00f      	b.n	800118a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <SysTick_Config+0x40>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001172:	210f      	movs	r1, #15
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f7ff ff8e 	bl	8001098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <SysTick_Config+0x40>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <SysTick_Config+0x40>)
 8001184:	2207      	movs	r2, #7
 8001186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	e000e010 	.word	0xe000e010

08001198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff47 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011c0:	f7ff ff5c 	bl	800107c <__NVIC_GetPriorityGrouping>
 80011c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff ff8e 	bl	80010ec <NVIC_EncodePriority>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff5d 	bl	8001098 <__NVIC_SetPriority>
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffb0 	bl	8001154 <SysTick_Config>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b480      	push	{r7}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120e:	e17f      	b.n	8001510 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	2101      	movs	r1, #1
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	fa01 f303 	lsl.w	r3, r1, r3
 800121c:	4013      	ands	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8171 	beq.w	800150a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b01      	cmp	r3, #1
 8001232:	d005      	beq.n	8001240 <HAL_GPIO_Init+0x40>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d130      	bne.n	80012a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001276:	2201      	movs	r2, #1
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	091b      	lsrs	r3, r3, #4
 800128c:	f003 0201 	and.w	r2, r3, #1
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d118      	bne.n	80012e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012b4:	2201      	movs	r2, #1
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	08db      	lsrs	r3, r3, #3
 80012ca:	f003 0201 	and.w	r2, r3, #1
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	d017      	beq.n	800131c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2203      	movs	r2, #3
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d123      	bne.n	8001370 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	08da      	lsrs	r2, r3, #3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3208      	adds	r2, #8
 8001330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	220f      	movs	r2, #15
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	691a      	ldr	r2, [r3, #16]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	08da      	lsrs	r2, r3, #3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3208      	adds	r2, #8
 800136a:	6939      	ldr	r1, [r7, #16]
 800136c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	2203      	movs	r2, #3
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0203 	and.w	r2, r3, #3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 80ac 	beq.w	800150a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	4b5f      	ldr	r3, [pc, #380]	; (8001530 <HAL_GPIO_Init+0x330>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b6:	4a5e      	ldr	r2, [pc, #376]	; (8001530 <HAL_GPIO_Init+0x330>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6613      	str	r3, [r2, #96]	; 0x60
 80013be:	4b5c      	ldr	r3, [pc, #368]	; (8001530 <HAL_GPIO_Init+0x330>)
 80013c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013ca:	4a5a      	ldr	r2, [pc, #360]	; (8001534 <HAL_GPIO_Init+0x334>)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013f4:	d025      	beq.n	8001442 <HAL_GPIO_Init+0x242>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4f      	ldr	r2, [pc, #316]	; (8001538 <HAL_GPIO_Init+0x338>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d01f      	beq.n	800143e <HAL_GPIO_Init+0x23e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4e      	ldr	r2, [pc, #312]	; (800153c <HAL_GPIO_Init+0x33c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d019      	beq.n	800143a <HAL_GPIO_Init+0x23a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4d      	ldr	r2, [pc, #308]	; (8001540 <HAL_GPIO_Init+0x340>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d013      	beq.n	8001436 <HAL_GPIO_Init+0x236>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4c      	ldr	r2, [pc, #304]	; (8001544 <HAL_GPIO_Init+0x344>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d00d      	beq.n	8001432 <HAL_GPIO_Init+0x232>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4b      	ldr	r2, [pc, #300]	; (8001548 <HAL_GPIO_Init+0x348>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d007      	beq.n	800142e <HAL_GPIO_Init+0x22e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4a      	ldr	r2, [pc, #296]	; (800154c <HAL_GPIO_Init+0x34c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d101      	bne.n	800142a <HAL_GPIO_Init+0x22a>
 8001426:	2306      	movs	r3, #6
 8001428:	e00c      	b.n	8001444 <HAL_GPIO_Init+0x244>
 800142a:	2307      	movs	r3, #7
 800142c:	e00a      	b.n	8001444 <HAL_GPIO_Init+0x244>
 800142e:	2305      	movs	r3, #5
 8001430:	e008      	b.n	8001444 <HAL_GPIO_Init+0x244>
 8001432:	2304      	movs	r3, #4
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x244>
 8001436:	2303      	movs	r3, #3
 8001438:	e004      	b.n	8001444 <HAL_GPIO_Init+0x244>
 800143a:	2302      	movs	r3, #2
 800143c:	e002      	b.n	8001444 <HAL_GPIO_Init+0x244>
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_GPIO_Init+0x244>
 8001442:	2300      	movs	r3, #0
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	f002 0203 	and.w	r2, r2, #3
 800144a:	0092      	lsls	r2, r2, #2
 800144c:	4093      	lsls	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001454:	4937      	ldr	r1, [pc, #220]	; (8001534 <HAL_GPIO_Init+0x334>)
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	089b      	lsrs	r3, r3, #2
 800145a:	3302      	adds	r3, #2
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001462:	4b3b      	ldr	r3, [pc, #236]	; (8001550 <HAL_GPIO_Init+0x350>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001486:	4a32      	ldr	r2, [pc, #200]	; (8001550 <HAL_GPIO_Init+0x350>)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800148c:	4b30      	ldr	r3, [pc, #192]	; (8001550 <HAL_GPIO_Init+0x350>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014b0:	4a27      	ldr	r2, [pc, #156]	; (8001550 <HAL_GPIO_Init+0x350>)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <HAL_GPIO_Init+0x350>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014da:	4a1d      	ldr	r2, [pc, #116]	; (8001550 <HAL_GPIO_Init+0x350>)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_GPIO_Init+0x350>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001504:	4a12      	ldr	r2, [pc, #72]	; (8001550 <HAL_GPIO_Init+0x350>)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa22 f303 	lsr.w	r3, r2, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	f47f ae78 	bne.w	8001210 <HAL_GPIO_Init+0x10>
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	371c      	adds	r7, #28
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	40010000 	.word	0x40010000
 8001538:	48000400 	.word	0x48000400
 800153c:	48000800 	.word	0x48000800
 8001540:	48000c00 	.word	0x48000c00
 8001544:	48001000 	.word	0x48001000
 8001548:	48001400 	.word	0x48001400
 800154c:	48001800 	.word	0x48001800
 8001550:	40010400 	.word	0x40010400

08001554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
 8001560:	4613      	mov	r3, r2
 8001562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001564:	787b      	ldrb	r3, [r7, #1]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001570:	e002      	b.n	8001578 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4013      	ands	r3, r2
 800159c:	041a      	lsls	r2, r3, #16
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43d9      	mvns	r1, r3
 80015a2:	887b      	ldrh	r3, [r7, #2]
 80015a4:	400b      	ands	r3, r1
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10c      	bne.n	80015e4 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_PWR_EnterSLEEPMode+0x60>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015d6:	d10e      	bne.n	80015f6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80015d8:	f000 f896 	bl	8001708 <HAL_PWREx_DisableLowPowerRunMode>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d009      	beq.n	80015f6 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 80015e2:	e016      	b.n	8001612 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_PWR_EnterSLEEPMode+0x60>)
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015f0:	d001      	beq.n	80015f6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80015f2:	f000 f879 	bl	80016e8 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_PWR_EnterSLEEPMode+0x64>)
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	4a08      	ldr	r2, [pc, #32]	; (800161c <HAL_PWR_EnterSLEEPMode+0x64>)
 80015fc:	f023 0304 	bic.w	r3, r3, #4
 8001600:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d101      	bne.n	800160c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001608:	bf30      	wfi
 800160a:	e002      	b.n	8001612 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800160c:	bf40      	sev
    __WFE();
 800160e:	bf20      	wfe
    __WFE();
 8001610:	bf20      	wfe
  }

}
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40007000 	.word	0x40007000
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <HAL_PWREx_GetVoltageRange+0x18>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40007000 	.word	0x40007000

0800163c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800164a:	d130      	bne.n	80016ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800164c:	4b23      	ldr	r3, [pc, #140]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001658:	d038      	beq.n	80016cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001662:	4a1e      	ldr	r2, [pc, #120]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001664:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001668:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2232      	movs	r2, #50	; 0x32
 8001670:	fb02 f303 	mul.w	r3, r2, r3
 8001674:	4a1b      	ldr	r2, [pc, #108]	; (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	0c9b      	lsrs	r3, r3, #18
 800167c:	3301      	adds	r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001680:	e002      	b.n	8001688 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	3b01      	subs	r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001694:	d102      	bne.n	800169c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f2      	bne.n	8001682 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016a8:	d110      	bne.n	80016cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e00f      	b.n	80016ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ba:	d007      	beq.n	80016cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016c4:	4a05      	ldr	r2, [pc, #20]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40007000 	.word	0x40007000
 80016e0:	20000000 	.word	0x20000000
 80016e4:	431bde83 	.word	0x431bde83

080016e8 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80016f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f6:	6013      	str	r3, [r2, #0]
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40007000 	.word	0x40007000

08001708 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800170e:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a16      	ldr	r2, [pc, #88]	; (800176c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001718:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2232      	movs	r2, #50	; 0x32
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	4a13      	ldr	r2, [pc, #76]	; (8001774 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	0c9b      	lsrs	r3, r3, #18
 800172c:	3301      	adds	r3, #1
 800172e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001730:	e002      	b.n	8001738 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3b01      	subs	r3, #1
 8001736:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001744:	d102      	bne.n	800174c <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f2      	bne.n	8001732 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001758:	d101      	bne.n	800175e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e000      	b.n	8001760 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	40007000 	.word	0x40007000
 8001770:	20000000 	.word	0x20000000
 8001774:	431bde83 	.word	0x431bde83

08001778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e3c6      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800178a:	4ba1      	ldr	r3, [pc, #644]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001794:	4b9e      	ldr	r3, [pc, #632]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80e4 	beq.w	8001974 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d007      	beq.n	80017c2 <HAL_RCC_OscConfig+0x4a>
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	2b0c      	cmp	r3, #12
 80017b6:	f040 808b 	bne.w	80018d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	f040 8087 	bne.w	80018d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017c2:	4b93      	ldr	r3, [pc, #588]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d005      	beq.n	80017da <HAL_RCC_OscConfig+0x62>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e39e      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1a      	ldr	r2, [r3, #32]
 80017de:	4b8c      	ldr	r3, [pc, #560]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d004      	beq.n	80017f4 <HAL_RCC_OscConfig+0x7c>
 80017ea:	4b89      	ldr	r3, [pc, #548]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017f2:	e005      	b.n	8001800 <HAL_RCC_OscConfig+0x88>
 80017f4:	4b86      	ldr	r3, [pc, #536]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 80017f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fa:	091b      	lsrs	r3, r3, #4
 80017fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001800:	4293      	cmp	r3, r2
 8001802:	d223      	bcs.n	800184c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4618      	mov	r0, r3
 800180a:	f000 fd1b 	bl	8002244 <RCC_SetFlashLatencyFromMSIRange>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e37f      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001818:	4b7d      	ldr	r3, [pc, #500]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a7c      	ldr	r2, [pc, #496]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 800181e:	f043 0308 	orr.w	r3, r3, #8
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b7a      	ldr	r3, [pc, #488]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4977      	ldr	r1, [pc, #476]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001836:	4b76      	ldr	r3, [pc, #472]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	4972      	ldr	r1, [pc, #456]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 8001846:	4313      	orrs	r3, r2
 8001848:	604b      	str	r3, [r1, #4]
 800184a:	e025      	b.n	8001898 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800184c:	4b70      	ldr	r3, [pc, #448]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a6f      	ldr	r2, [pc, #444]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 8001852:	f043 0308 	orr.w	r3, r3, #8
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b6d      	ldr	r3, [pc, #436]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	496a      	ldr	r1, [pc, #424]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800186a:	4b69      	ldr	r3, [pc, #420]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	4965      	ldr	r1, [pc, #404]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 800187a:	4313      	orrs	r3, r2
 800187c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d109      	bne.n	8001898 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	4618      	mov	r0, r3
 800188a:	f000 fcdb 	bl	8002244 <RCC_SetFlashLatencyFromMSIRange>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e33f      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001898:	f000 fc48 	bl	800212c <HAL_RCC_GetSysClockFreq>
 800189c:	4602      	mov	r2, r0
 800189e:	4b5c      	ldr	r3, [pc, #368]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	091b      	lsrs	r3, r3, #4
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	495a      	ldr	r1, [pc, #360]	; (8001a14 <HAL_RCC_OscConfig+0x29c>)
 80018aa:	5ccb      	ldrb	r3, [r1, r3]
 80018ac:	f003 031f 	and.w	r3, r3, #31
 80018b0:	fa22 f303 	lsr.w	r3, r2, r3
 80018b4:	4a58      	ldr	r2, [pc, #352]	; (8001a18 <HAL_RCC_OscConfig+0x2a0>)
 80018b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018b8:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <HAL_RCC_OscConfig+0x2a4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fb29 	bl	8000f14 <HAL_InitTick>
 80018c2:	4603      	mov	r3, r0
 80018c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d052      	beq.n	8001972 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	e323      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d032      	beq.n	800193e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018d8:	4b4d      	ldr	r3, [pc, #308]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a4c      	ldr	r2, [pc, #304]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018e4:	f7ff fb66 	bl	8000fb4 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ec:	f7ff fb62 	bl	8000fb4 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e30c      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018fe:	4b44      	ldr	r3, [pc, #272]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800190a:	4b41      	ldr	r3, [pc, #260]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a40      	ldr	r2, [pc, #256]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	4b3e      	ldr	r3, [pc, #248]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	493b      	ldr	r1, [pc, #236]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 8001924:	4313      	orrs	r3, r2
 8001926:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001928:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	4936      	ldr	r1, [pc, #216]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
 800193c:	e01a      	b.n	8001974 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800193e:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a33      	ldr	r2, [pc, #204]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 8001944:	f023 0301 	bic.w	r3, r3, #1
 8001948:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800194a:	f7ff fb33 	bl	8000fb4 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001952:	f7ff fb2f 	bl	8000fb4 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e2d9      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001964:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f0      	bne.n	8001952 <HAL_RCC_OscConfig+0x1da>
 8001970:	e000      	b.n	8001974 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001972:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d074      	beq.n	8001a6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2b08      	cmp	r3, #8
 8001984:	d005      	beq.n	8001992 <HAL_RCC_OscConfig+0x21a>
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	2b0c      	cmp	r3, #12
 800198a:	d10e      	bne.n	80019aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	2b03      	cmp	r3, #3
 8001990:	d10b      	bne.n	80019aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001992:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d064      	beq.n	8001a68 <HAL_RCC_OscConfig+0x2f0>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d160      	bne.n	8001a68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e2b6      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b2:	d106      	bne.n	80019c2 <HAL_RCC_OscConfig+0x24a>
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a15      	ldr	r2, [pc, #84]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 80019ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	e01d      	b.n	80019fe <HAL_RCC_OscConfig+0x286>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ca:	d10c      	bne.n	80019e6 <HAL_RCC_OscConfig+0x26e>
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0f      	ldr	r2, [pc, #60]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 80019d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0c      	ldr	r2, [pc, #48]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 80019de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	e00b      	b.n	80019fe <HAL_RCC_OscConfig+0x286>
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 80019ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a06      	ldr	r2, [pc, #24]	; (8001a10 <HAL_RCC_OscConfig+0x298>)
 80019f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d01c      	beq.n	8001a40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a06:	f7ff fad5 	bl	8000fb4 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0c:	e011      	b.n	8001a32 <HAL_RCC_OscConfig+0x2ba>
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000
 8001a14:	08003194 	.word	0x08003194
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fac8 	bl	8000fb4 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e272      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a32:	4baf      	ldr	r3, [pc, #700]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x2a8>
 8001a3e:	e014      	b.n	8001a6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff fab8 	bl	8000fb4 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff fab4 	bl	8000fb4 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	; 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e25e      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a5a:	4ba5      	ldr	r3, [pc, #660]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x2d0>
 8001a66:	e000      	b.n	8001a6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d060      	beq.n	8001b38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_OscConfig+0x310>
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2b0c      	cmp	r3, #12
 8001a80:	d119      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d116      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b99      	ldr	r3, [pc, #612]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x328>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e23b      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b93      	ldr	r3, [pc, #588]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4990      	ldr	r1, [pc, #576]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ab4:	e040      	b.n	8001b38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d023      	beq.n	8001b06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001abe:	4b8c      	ldr	r3, [pc, #560]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a8b      	ldr	r2, [pc, #556]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aca:	f7ff fa73 	bl	8000fb4 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad2:	f7ff fa6f 	bl	8000fb4 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e219      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae4:	4b82      	ldr	r3, [pc, #520]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af0:	4b7f      	ldr	r3, [pc, #508]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	061b      	lsls	r3, r3, #24
 8001afe:	497c      	ldr	r1, [pc, #496]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
 8001b04:	e018      	b.n	8001b38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b06:	4b7a      	ldr	r3, [pc, #488]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a79      	ldr	r2, [pc, #484]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b12:	f7ff fa4f 	bl	8000fb4 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1a:	f7ff fa4b 	bl	8000fb4 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e1f5      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2c:	4b70      	ldr	r3, [pc, #448]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f0      	bne.n	8001b1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d03c      	beq.n	8001bbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d01c      	beq.n	8001b86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b4c:	4b68      	ldr	r3, [pc, #416]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b52:	4a67      	ldr	r2, [pc, #412]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5c:	f7ff fa2a 	bl	8000fb4 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b64:	f7ff fa26 	bl	8000fb4 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e1d0      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b76:	4b5e      	ldr	r3, [pc, #376]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0ef      	beq.n	8001b64 <HAL_RCC_OscConfig+0x3ec>
 8001b84:	e01b      	b.n	8001bbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b86:	4b5a      	ldr	r3, [pc, #360]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8c:	4a58      	ldr	r2, [pc, #352]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b96:	f7ff fa0d 	bl	8000fb4 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fa09 	bl	8000fb4 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e1b3      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb0:	4b4f      	ldr	r3, [pc, #316]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1ef      	bne.n	8001b9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 80a6 	beq.w	8001d18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bd0:	4b47      	ldr	r3, [pc, #284]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10d      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bdc:	4b44      	ldr	r3, [pc, #272]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be0:	4a43      	ldr	r2, [pc, #268]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be6:	6593      	str	r3, [r2, #88]	; 0x58
 8001be8:	4b41      	ldr	r3, [pc, #260]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf8:	4b3e      	ldr	r3, [pc, #248]	; (8001cf4 <HAL_RCC_OscConfig+0x57c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d118      	bne.n	8001c36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c04:	4b3b      	ldr	r3, [pc, #236]	; (8001cf4 <HAL_RCC_OscConfig+0x57c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a3a      	ldr	r2, [pc, #232]	; (8001cf4 <HAL_RCC_OscConfig+0x57c>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c10:	f7ff f9d0 	bl	8000fb4 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c18:	f7ff f9cc 	bl	8000fb4 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e176      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c2a:	4b32      	ldr	r3, [pc, #200]	; (8001cf4 <HAL_RCC_OscConfig+0x57c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d108      	bne.n	8001c50 <HAL_RCC_OscConfig+0x4d8>
 8001c3e:	4b2c      	ldr	r3, [pc, #176]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c44:	4a2a      	ldr	r2, [pc, #168]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c4e:	e024      	b.n	8001c9a <HAL_RCC_OscConfig+0x522>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b05      	cmp	r3, #5
 8001c56:	d110      	bne.n	8001c7a <HAL_RCC_OscConfig+0x502>
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5e:	4a24      	ldr	r2, [pc, #144]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c68:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a20      	ldr	r2, [pc, #128]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e00f      	b.n	8001c9a <HAL_RCC_OscConfig+0x522>
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c80:	4a1b      	ldr	r2, [pc, #108]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c90:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001c92:	f023 0304 	bic.w	r3, r3, #4
 8001c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d016      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca2:	f7ff f987 	bl	8000fb4 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca8:	e00a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001caa:	f7ff f983 	bl	8000fb4 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e12b      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_OscConfig+0x578>)
 8001cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0ed      	beq.n	8001caa <HAL_RCC_OscConfig+0x532>
 8001cce:	e01a      	b.n	8001d06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd0:	f7ff f970 	bl	8000fb4 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd6:	e00f      	b.n	8001cf8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd8:	f7ff f96c 	bl	8000fb4 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d906      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e114      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1e8      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d06:	7ffb      	ldrb	r3, [r7, #31]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d105      	bne.n	8001d18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d0c:	4b84      	ldr	r3, [pc, #528]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d10:	4a83      	ldr	r2, [pc, #524]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d16:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80fa 	beq.w	8001f16 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	f040 80d0 	bne.w	8001ecc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d2c:	4b7c      	ldr	r3, [pc, #496]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 0203 	and.w	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d130      	bne.n	8001da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d127      	bne.n	8001da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d11f      	bne.n	8001da2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d6c:	2a07      	cmp	r2, #7
 8001d6e:	bf14      	ite	ne
 8001d70:	2201      	movne	r2, #1
 8001d72:	2200      	moveq	r2, #0
 8001d74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d113      	bne.n	8001da2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d84:	085b      	lsrs	r3, r3, #1
 8001d86:	3b01      	subs	r3, #1
 8001d88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d109      	bne.n	8001da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	085b      	lsrs	r3, r3, #1
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d06e      	beq.n	8001e80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	2b0c      	cmp	r3, #12
 8001da6:	d069      	beq.n	8001e7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001da8:	4b5d      	ldr	r3, [pc, #372]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001db4:	4b5a      	ldr	r3, [pc, #360]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0a9      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dc4:	4b56      	ldr	r3, [pc, #344]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a55      	ldr	r2, [pc, #340]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001dca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dd0:	f7ff f8f0 	bl	8000fb4 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7ff f8ec 	bl	8000fb4 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e096      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dea:	4b4d      	ldr	r3, [pc, #308]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df6:	4b4a      	ldr	r3, [pc, #296]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	4b4a      	ldr	r3, [pc, #296]	; (8001f24 <HAL_RCC_OscConfig+0x7ac>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e06:	3a01      	subs	r2, #1
 8001e08:	0112      	lsls	r2, r2, #4
 8001e0a:	4311      	orrs	r1, r2
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e10:	0212      	lsls	r2, r2, #8
 8001e12:	4311      	orrs	r1, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e18:	0852      	lsrs	r2, r2, #1
 8001e1a:	3a01      	subs	r2, #1
 8001e1c:	0552      	lsls	r2, r2, #21
 8001e1e:	4311      	orrs	r1, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e24:	0852      	lsrs	r2, r2, #1
 8001e26:	3a01      	subs	r2, #1
 8001e28:	0652      	lsls	r2, r2, #25
 8001e2a:	4311      	orrs	r1, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e30:	0912      	lsrs	r2, r2, #4
 8001e32:	0452      	lsls	r2, r2, #17
 8001e34:	430a      	orrs	r2, r1
 8001e36:	493a      	ldr	r1, [pc, #232]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e3c:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a37      	ldr	r2, [pc, #220]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e54:	f7ff f8ae 	bl	8000fb4 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7ff f8aa 	bl	8000fb4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e054      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e6e:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e7a:	e04c      	b.n	8001f16 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e04b      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e80:	4b27      	ldr	r3, [pc, #156]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d144      	bne.n	8001f16 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e8c:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a23      	ldr	r2, [pc, #140]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e98:	4b21      	ldr	r3, [pc, #132]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4a20      	ldr	r2, [pc, #128]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ea2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ea4:	f7ff f886 	bl	8000fb4 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eac:	f7ff f882 	bl	8000fb4 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e02c      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0x734>
 8001eca:	e024      	b.n	8001f16 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2b0c      	cmp	r3, #12
 8001ed0:	d01f      	beq.n	8001f12 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed2:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001ed8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ede:	f7ff f869 	bl	8000fb4 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7ff f865 	bl	8000fb4 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e00f      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f0      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	4905      	ldr	r1, [pc, #20]	; (8001f20 <HAL_RCC_OscConfig+0x7a8>)
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <HAL_RCC_OscConfig+0x7b0>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60cb      	str	r3, [r1, #12]
 8001f10:	e001      	b.n	8001f16 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3720      	adds	r7, #32
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	f99d808c 	.word	0xf99d808c
 8001f28:	feeefffc 	.word	0xfeeefffc

08001f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0e7      	b.n	8002110 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f40:	4b75      	ldr	r3, [pc, #468]	; (8002118 <HAL_RCC_ClockConfig+0x1ec>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d910      	bls.n	8001f70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4e:	4b72      	ldr	r3, [pc, #456]	; (8002118 <HAL_RCC_ClockConfig+0x1ec>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 0207 	bic.w	r2, r3, #7
 8001f56:	4970      	ldr	r1, [pc, #448]	; (8002118 <HAL_RCC_ClockConfig+0x1ec>)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5e:	4b6e      	ldr	r3, [pc, #440]	; (8002118 <HAL_RCC_ClockConfig+0x1ec>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0cf      	b.n	8002110 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d010      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	4b66      	ldr	r3, [pc, #408]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d908      	bls.n	8001f9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8c:	4b63      	ldr	r3, [pc, #396]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4960      	ldr	r1, [pc, #384]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d04c      	beq.n	8002044 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb2:	4b5a      	ldr	r3, [pc, #360]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d121      	bne.n	8002002 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e0a6      	b.n	8002110 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fca:	4b54      	ldr	r3, [pc, #336]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d115      	bne.n	8002002 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e09a      	b.n	8002110 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d107      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fe2:	4b4e      	ldr	r3, [pc, #312]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d109      	bne.n	8002002 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e08e      	b.n	8002110 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff2:	4b4a      	ldr	r3, [pc, #296]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e086      	b.n	8002110 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002002:	4b46      	ldr	r3, [pc, #280]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f023 0203 	bic.w	r2, r3, #3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4943      	ldr	r1, [pc, #268]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 8002010:	4313      	orrs	r3, r2
 8002012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002014:	f7fe ffce 	bl	8000fb4 <HAL_GetTick>
 8002018:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	e00a      	b.n	8002032 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800201c:	f7fe ffca 	bl	8000fb4 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	f241 3288 	movw	r2, #5000	; 0x1388
 800202a:	4293      	cmp	r3, r2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e06e      	b.n	8002110 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002032:	4b3a      	ldr	r3, [pc, #232]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 020c 	and.w	r2, r3, #12
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	429a      	cmp	r2, r3
 8002042:	d1eb      	bne.n	800201c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d010      	beq.n	8002072 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	4b31      	ldr	r3, [pc, #196]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800205c:	429a      	cmp	r2, r3
 800205e:	d208      	bcs.n	8002072 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002060:	4b2e      	ldr	r3, [pc, #184]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	492b      	ldr	r1, [pc, #172]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 800206e:	4313      	orrs	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002072:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_RCC_ClockConfig+0x1ec>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d210      	bcs.n	80020a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002080:	4b25      	ldr	r3, [pc, #148]	; (8002118 <HAL_RCC_ClockConfig+0x1ec>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f023 0207 	bic.w	r2, r3, #7
 8002088:	4923      	ldr	r1, [pc, #140]	; (8002118 <HAL_RCC_ClockConfig+0x1ec>)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	4313      	orrs	r3, r2
 800208e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002090:	4b21      	ldr	r3, [pc, #132]	; (8002118 <HAL_RCC_ClockConfig+0x1ec>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d001      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e036      	b.n	8002110 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d008      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	4918      	ldr	r1, [pc, #96]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d009      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020cc:	4b13      	ldr	r3, [pc, #76]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4910      	ldr	r1, [pc, #64]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020e0:	f000 f824 	bl	800212c <HAL_RCC_GetSysClockFreq>
 80020e4:	4602      	mov	r2, r0
 80020e6:	4b0d      	ldr	r3, [pc, #52]	; (800211c <HAL_RCC_ClockConfig+0x1f0>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	091b      	lsrs	r3, r3, #4
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	490b      	ldr	r1, [pc, #44]	; (8002120 <HAL_RCC_ClockConfig+0x1f4>)
 80020f2:	5ccb      	ldrb	r3, [r1, r3]
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
 80020fc:	4a09      	ldr	r2, [pc, #36]	; (8002124 <HAL_RCC_ClockConfig+0x1f8>)
 80020fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_RCC_ClockConfig+0x1fc>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe ff05 	bl	8000f14 <HAL_InitTick>
 800210a:	4603      	mov	r3, r0
 800210c:	72fb      	strb	r3, [r7, #11]

  return status;
 800210e:	7afb      	ldrb	r3, [r7, #11]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40022000 	.word	0x40022000
 800211c:	40021000 	.word	0x40021000
 8002120:	08003194 	.word	0x08003194
 8002124:	20000000 	.word	0x20000000
 8002128:	20000004 	.word	0x20000004

0800212c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800213a:	4b3e      	ldr	r3, [pc, #248]	; (8002234 <HAL_RCC_GetSysClockFreq+0x108>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002144:	4b3b      	ldr	r3, [pc, #236]	; (8002234 <HAL_RCC_GetSysClockFreq+0x108>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x34>
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b0c      	cmp	r3, #12
 8002158:	d121      	bne.n	800219e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d11e      	bne.n	800219e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002160:	4b34      	ldr	r3, [pc, #208]	; (8002234 <HAL_RCC_GetSysClockFreq+0x108>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d107      	bne.n	800217c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800216c:	4b31      	ldr	r3, [pc, #196]	; (8002234 <HAL_RCC_GetSysClockFreq+0x108>)
 800216e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002172:	0a1b      	lsrs	r3, r3, #8
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	e005      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800217c:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <HAL_RCC_GetSysClockFreq+0x108>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002188:	4a2b      	ldr	r2, [pc, #172]	; (8002238 <HAL_RCC_GetSysClockFreq+0x10c>)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002190:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10d      	bne.n	80021b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d102      	bne.n	80021aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021a4:	4b25      	ldr	r3, [pc, #148]	; (800223c <HAL_RCC_GetSysClockFreq+0x110>)
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	e004      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021b0:	4b23      	ldr	r3, [pc, #140]	; (8002240 <HAL_RCC_GetSysClockFreq+0x114>)
 80021b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	d134      	bne.n	8002224 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021ba:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <HAL_RCC_GetSysClockFreq+0x108>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d003      	beq.n	80021d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d003      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0xac>
 80021d0:	e005      	b.n	80021de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021d2:	4b1a      	ldr	r3, [pc, #104]	; (800223c <HAL_RCC_GetSysClockFreq+0x110>)
 80021d4:	617b      	str	r3, [r7, #20]
      break;
 80021d6:	e005      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_RCC_GetSysClockFreq+0x114>)
 80021da:	617b      	str	r3, [r7, #20]
      break;
 80021dc:	e002      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	617b      	str	r3, [r7, #20]
      break;
 80021e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	3301      	adds	r3, #1
 80021f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	fb02 f203 	mul.w	r2, r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	fbb2 f3f3 	udiv	r3, r2, r3
 8002208:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800220a:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <HAL_RCC_GetSysClockFreq+0x108>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	0e5b      	lsrs	r3, r3, #25
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	3301      	adds	r3, #1
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002224:	69bb      	ldr	r3, [r7, #24]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3724      	adds	r7, #36	; 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	080031a4 	.word	0x080031a4
 800223c:	00f42400 	.word	0x00f42400
 8002240:	007a1200 	.word	0x007a1200

08002244 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800224c:	2300      	movs	r3, #0
 800224e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002250:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800225c:	f7ff f9e0 	bl	8001620 <HAL_PWREx_GetVoltageRange>
 8002260:	6178      	str	r0, [r7, #20]
 8002262:	e014      	b.n	800228e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002268:	4a24      	ldr	r2, [pc, #144]	; (80022fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226e:	6593      	str	r3, [r2, #88]	; 0x58
 8002270:	4b22      	ldr	r3, [pc, #136]	; (80022fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800227c:	f7ff f9d0 	bl	8001620 <HAL_PWREx_GetVoltageRange>
 8002280:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002282:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002286:	4a1d      	ldr	r2, [pc, #116]	; (80022fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002294:	d10b      	bne.n	80022ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b80      	cmp	r3, #128	; 0x80
 800229a:	d919      	bls.n	80022d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2ba0      	cmp	r3, #160	; 0xa0
 80022a0:	d902      	bls.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022a2:	2302      	movs	r3, #2
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	e013      	b.n	80022d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022a8:	2301      	movs	r3, #1
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	e010      	b.n	80022d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b80      	cmp	r3, #128	; 0x80
 80022b2:	d902      	bls.n	80022ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022b4:	2303      	movs	r3, #3
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	e00a      	b.n	80022d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b80      	cmp	r3, #128	; 0x80
 80022be:	d102      	bne.n	80022c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022c0:	2302      	movs	r3, #2
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	e004      	b.n	80022d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b70      	cmp	r3, #112	; 0x70
 80022ca:	d101      	bne.n	80022d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022cc:	2301      	movs	r3, #1
 80022ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 0207 	bic.w	r2, r3, #7
 80022d8:	4909      	ldr	r1, [pc, #36]	; (8002300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022e0:	4b07      	ldr	r3, [pc, #28]	; (8002300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d001      	beq.n	80022f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40021000 	.word	0x40021000
 8002300:	40022000 	.word	0x40022000

08002304 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e095      	b.n	8002442 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	2b00      	cmp	r3, #0
 800231c:	d108      	bne.n	8002330 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002326:	d009      	beq.n	800233c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	61da      	str	r2, [r3, #28]
 800232e:	e005      	b.n	800233c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fe fcde 	bl	8000d18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002372:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800237c:	d902      	bls.n	8002384 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	e002      	b.n	800238a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002388:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002392:	d007      	beq.n	80023a4 <HAL_SPI_Init+0xa0>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800239c:	d002      	beq.n	80023a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e6:	ea42 0103 	orr.w	r1, r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	0c1b      	lsrs	r3, r3, #16
 8002400:	f003 0204 	and.w	r2, r3, #4
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002420:	ea42 0103 	orr.w	r1, r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b088      	sub	sp, #32
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	603b      	str	r3, [r7, #0]
 8002456:	4613      	mov	r3, r2
 8002458:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_SPI_Transmit+0x22>
 8002468:	2302      	movs	r3, #2
 800246a:	e158      	b.n	800271e <HAL_SPI_Transmit+0x2d4>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002474:	f7fe fd9e 	bl	8000fb4 <HAL_GetTick>
 8002478:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b01      	cmp	r3, #1
 8002488:	d002      	beq.n	8002490 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800248a:	2302      	movs	r3, #2
 800248c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800248e:	e13d      	b.n	800270c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <HAL_SPI_Transmit+0x52>
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d102      	bne.n	80024a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024a0:	e134      	b.n	800270c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2203      	movs	r2, #3
 80024a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	88fa      	ldrh	r2, [r7, #6]
 80024ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	88fa      	ldrh	r2, [r7, #6]
 80024c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ec:	d10f      	bne.n	800250e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800250c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002518:	2b40      	cmp	r3, #64	; 0x40
 800251a:	d007      	beq.n	800252c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800252a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002534:	d94b      	bls.n	80025ce <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <HAL_SPI_Transmit+0xfa>
 800253e:	8afb      	ldrh	r3, [r7, #22]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d13e      	bne.n	80025c2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	881a      	ldrh	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002554:	1c9a      	adds	r2, r3, #2
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800255e:	b29b      	uxth	r3, r3
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002568:	e02b      	b.n	80025c2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b02      	cmp	r3, #2
 8002576:	d112      	bne.n	800259e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257c:	881a      	ldrh	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002588:	1c9a      	adds	r2, r3, #2
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800259c:	e011      	b.n	80025c2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800259e:	f7fe fd09 	bl	8000fb4 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d803      	bhi.n	80025b6 <HAL_SPI_Transmit+0x16c>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d102      	bne.n	80025bc <HAL_SPI_Transmit+0x172>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d102      	bne.n	80025c2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025c0:	e0a4      	b.n	800270c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1ce      	bne.n	800256a <HAL_SPI_Transmit+0x120>
 80025cc:	e07c      	b.n	80026c8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_SPI_Transmit+0x192>
 80025d6:	8afb      	ldrh	r3, [r7, #22]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d170      	bne.n	80026be <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d912      	bls.n	800260c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ea:	881a      	ldrh	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f6:	1c9a      	adds	r2, r3, #2
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002600:	b29b      	uxth	r3, r3
 8002602:	3b02      	subs	r3, #2
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	87da      	strh	r2, [r3, #62]	; 0x3e
 800260a:	e058      	b.n	80026be <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	330c      	adds	r3, #12
 8002616:	7812      	ldrb	r2, [r2, #0]
 8002618:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002632:	e044      	b.n	80026be <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b02      	cmp	r3, #2
 8002640:	d12b      	bne.n	800269a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002646:	b29b      	uxth	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d912      	bls.n	8002672 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002650:	881a      	ldrh	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265c:	1c9a      	adds	r2, r3, #2
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b02      	subs	r3, #2
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002670:	e025      	b.n	80026be <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	330c      	adds	r3, #12
 800267c:	7812      	ldrb	r2, [r2, #0]
 800267e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002698:	e011      	b.n	80026be <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800269a:	f7fe fc8b 	bl	8000fb4 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d803      	bhi.n	80026b2 <HAL_SPI_Transmit+0x268>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b0:	d102      	bne.n	80026b8 <HAL_SPI_Transmit+0x26e>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d102      	bne.n	80026be <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026bc:	e026      	b.n	800270c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1b5      	bne.n	8002634 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	6839      	ldr	r1, [r7, #0]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 fce3 	bl	8003098 <SPI_EndRxTxTransaction>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10a      	bne.n	80026fc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	77fb      	strb	r3, [r7, #31]
 8002708:	e000      	b.n	800270c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800270a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800271c:	7ffb      	ldrb	r3, [r7, #31]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3720      	adds	r7, #32
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b088      	sub	sp, #32
 800272a:	af02      	add	r7, sp, #8
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	4613      	mov	r3, r2
 8002734:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002742:	d112      	bne.n	800276a <HAL_SPI_Receive+0x44>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10e      	bne.n	800276a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2204      	movs	r2, #4
 8002750:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002754:	88fa      	ldrh	r2, [r7, #6]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	4613      	mov	r3, r2
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f910 	bl	8002986 <HAL_SPI_TransmitReceive>
 8002766:	4603      	mov	r3, r0
 8002768:	e109      	b.n	800297e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_SPI_Receive+0x52>
 8002774:	2302      	movs	r3, #2
 8002776:	e102      	b.n	800297e <HAL_SPI_Receive+0x258>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002780:	f7fe fc18 	bl	8000fb4 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b01      	cmp	r3, #1
 8002790:	d002      	beq.n	8002798 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002792:	2302      	movs	r3, #2
 8002794:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002796:	e0e9      	b.n	800296c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <HAL_SPI_Receive+0x7e>
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d102      	bne.n	80027aa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027a8:	e0e0      	b.n	800296c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2204      	movs	r2, #4
 80027ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	88fa      	ldrh	r2, [r7, #6]
 80027c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	88fa      	ldrh	r2, [r7, #6]
 80027ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027f4:	d908      	bls.n	8002808 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	e007      	b.n	8002818 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002816:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002820:	d10f      	bne.n	8002842 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002830:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002840:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d007      	beq.n	8002860 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800285e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002868:	d867      	bhi.n	800293a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800286a:	e030      	b.n	80028ce <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b01      	cmp	r3, #1
 8002878:	d117      	bne.n	80028aa <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f103 020c 	add.w	r2, r3, #12
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	7812      	ldrb	r2, [r2, #0]
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80028a8:	e011      	b.n	80028ce <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028aa:	f7fe fb83 	bl	8000fb4 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d803      	bhi.n	80028c2 <HAL_SPI_Receive+0x19c>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c0:	d102      	bne.n	80028c8 <HAL_SPI_Receive+0x1a2>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d102      	bne.n	80028ce <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80028cc:	e04e      	b.n	800296c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1c8      	bne.n	800286c <HAL_SPI_Receive+0x146>
 80028da:	e034      	b.n	8002946 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d115      	bne.n	8002916 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	b292      	uxth	r2, r2
 80028f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	1c9a      	adds	r2, r3, #2
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002914:	e011      	b.n	800293a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002916:	f7fe fb4d 	bl	8000fb4 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d803      	bhi.n	800292e <HAL_SPI_Receive+0x208>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292c:	d102      	bne.n	8002934 <HAL_SPI_Receive+0x20e>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d102      	bne.n	800293a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002938:	e018      	b.n	800296c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002940:	b29b      	uxth	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1ca      	bne.n	80028dc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	6839      	ldr	r1, [r7, #0]
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 fb4c 	bl	8002fe8 <SPI_EndRxTransaction>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2220      	movs	r2, #32
 800295a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	75fb      	strb	r3, [r7, #23]
 8002968:	e000      	b.n	800296c <HAL_SPI_Receive+0x246>
  }

error :
 800296a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800297c:	7dfb      	ldrb	r3, [r7, #23]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b08a      	sub	sp, #40	; 0x28
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002994:	2301      	movs	r3, #1
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_SPI_TransmitReceive+0x26>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e1fb      	b.n	8002da4 <HAL_SPI_TransmitReceive+0x41e>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029b4:	f7fe fafe 	bl	8000fb4 <HAL_GetTick>
 80029b8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029c0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80029c8:	887b      	ldrh	r3, [r7, #2]
 80029ca:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80029cc:	887b      	ldrh	r3, [r7, #2]
 80029ce:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029d0:	7efb      	ldrb	r3, [r7, #27]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d00e      	beq.n	80029f4 <HAL_SPI_TransmitReceive+0x6e>
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029dc:	d106      	bne.n	80029ec <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d102      	bne.n	80029ec <HAL_SPI_TransmitReceive+0x66>
 80029e6:	7efb      	ldrb	r3, [r7, #27]
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d003      	beq.n	80029f4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80029ec:	2302      	movs	r3, #2
 80029ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80029f2:	e1cd      	b.n	8002d90 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d005      	beq.n	8002a06 <HAL_SPI_TransmitReceive+0x80>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <HAL_SPI_TransmitReceive+0x80>
 8002a00:	887b      	ldrh	r3, [r7, #2]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d103      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002a0c:	e1c0      	b.n	8002d90 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d003      	beq.n	8002a22 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2205      	movs	r2, #5
 8002a1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	887a      	ldrh	r2, [r7, #2]
 8002a32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	887a      	ldrh	r2, [r7, #2]
 8002a3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	887a      	ldrh	r2, [r7, #2]
 8002a48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	887a      	ldrh	r2, [r7, #2]
 8002a4e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a64:	d802      	bhi.n	8002a6c <HAL_SPI_TransmitReceive+0xe6>
 8002a66:	8a3b      	ldrh	r3, [r7, #16]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d908      	bls.n	8002a7e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	e007      	b.n	8002a8e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a8c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b40      	cmp	r3, #64	; 0x40
 8002a9a:	d007      	beq.n	8002aac <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aaa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ab4:	d97c      	bls.n	8002bb0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <HAL_SPI_TransmitReceive+0x13e>
 8002abe:	8a7b      	ldrh	r3, [r7, #18]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d169      	bne.n	8002b98 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac8:	881a      	ldrh	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad4:	1c9a      	adds	r2, r3, #2
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ae8:	e056      	b.n	8002b98 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d11b      	bne.n	8002b30 <HAL_SPI_TransmitReceive+0x1aa>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d016      	beq.n	8002b30 <HAL_SPI_TransmitReceive+0x1aa>
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d113      	bne.n	8002b30 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0c:	881a      	ldrh	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	1c9a      	adds	r2, r3, #2
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d11c      	bne.n	8002b78 <HAL_SPI_TransmitReceive+0x1f2>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d016      	beq.n	8002b78 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	b292      	uxth	r2, r2
 8002b56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	1c9a      	adds	r2, r3, #2
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b74:	2301      	movs	r3, #1
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b78:	f7fe fa1c 	bl	8000fb4 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d807      	bhi.n	8002b98 <HAL_SPI_TransmitReceive+0x212>
 8002b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8e:	d003      	beq.n	8002b98 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002b96:	e0fb      	b.n	8002d90 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1a3      	bne.n	8002aea <HAL_SPI_TransmitReceive+0x164>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d19d      	bne.n	8002aea <HAL_SPI_TransmitReceive+0x164>
 8002bae:	e0df      	b.n	8002d70 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_SPI_TransmitReceive+0x23a>
 8002bb8:	8a7b      	ldrh	r3, [r7, #18]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	f040 80cb 	bne.w	8002d56 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d912      	bls.n	8002bf0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	881a      	ldrh	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	1c9a      	adds	r2, r3, #2
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b02      	subs	r3, #2
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bee:	e0b2      	b.n	8002d56 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	330c      	adds	r3, #12
 8002bfa:	7812      	ldrb	r2, [r2, #0]
 8002bfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c16:	e09e      	b.n	8002d56 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d134      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x30a>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d02f      	beq.n	8002c90 <HAL_SPI_TransmitReceive+0x30a>
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d12c      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d912      	bls.n	8002c66 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	881a      	ldrh	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c50:	1c9a      	adds	r2, r3, #2
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b02      	subs	r3, #2
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c64:	e012      	b.n	8002c8c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	330c      	adds	r3, #12
 8002c70:	7812      	ldrb	r2, [r2, #0]
 8002c72:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d148      	bne.n	8002d30 <HAL_SPI_TransmitReceive+0x3aa>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d042      	beq.n	8002d30 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d923      	bls.n	8002cfe <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	b292      	uxth	r2, r2
 8002cc2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	1c9a      	adds	r2, r3, #2
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3b02      	subs	r3, #2
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d81f      	bhi.n	8002d2c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	e016      	b.n	8002d2c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f103 020c 	add.w	r2, r3, #12
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	7812      	ldrb	r2, [r2, #0]
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d30:	f7fe f940 	bl	8000fb4 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d803      	bhi.n	8002d48 <HAL_SPI_TransmitReceive+0x3c2>
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d46:	d102      	bne.n	8002d4e <HAL_SPI_TransmitReceive+0x3c8>
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d103      	bne.n	8002d56 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002d54:	e01c      	b.n	8002d90 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f47f af5b 	bne.w	8002c18 <HAL_SPI_TransmitReceive+0x292>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f47f af54 	bne.w	8002c18 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f98f 	bl	8003098 <SPI_EndRxTxTransaction>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d006      	beq.n	8002d8e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	661a      	str	r2, [r3, #96]	; 0x60
 8002d8c:	e000      	b.n	8002d90 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002d8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002da0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3728      	adds	r7, #40	; 0x28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	4613      	mov	r3, r2
 8002dba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002dbc:	f7fe f8fa 	bl	8000fb4 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	4413      	add	r3, r2
 8002dca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002dcc:	f7fe f8f2 	bl	8000fb4 <HAL_GetTick>
 8002dd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dd2:	4b39      	ldr	r3, [pc, #228]	; (8002eb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	015b      	lsls	r3, r3, #5
 8002dd8:	0d1b      	lsrs	r3, r3, #20
 8002dda:	69fa      	ldr	r2, [r7, #28]
 8002ddc:	fb02 f303 	mul.w	r3, r2, r3
 8002de0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002de2:	e054      	b.n	8002e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dea:	d050      	beq.n	8002e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002dec:	f7fe f8e2 	bl	8000fb4 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d902      	bls.n	8002e02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d13d      	bne.n	8002e7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e1a:	d111      	bne.n	8002e40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e24:	d004      	beq.n	8002e30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e2e:	d107      	bne.n	8002e40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e48:	d10f      	bne.n	8002e6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e017      	b.n	8002eae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4013      	ands	r3, r2
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	bf0c      	ite	eq
 8002e9e:	2301      	moveq	r3, #1
 8002ea0:	2300      	movne	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d19b      	bne.n	8002de4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3720      	adds	r7, #32
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000000 	.word	0x20000000

08002ebc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002ece:	f7fe f871 	bl	8000fb4 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002ede:	f7fe f869 	bl	8000fb4 <HAL_GetTick>
 8002ee2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	330c      	adds	r3, #12
 8002eea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002eec:	4b3d      	ldr	r3, [pc, #244]	; (8002fe4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	00da      	lsls	r2, r3, #3
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	0d1b      	lsrs	r3, r3, #20
 8002efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002efe:	fb02 f303 	mul.w	r3, r2, r3
 8002f02:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f04:	e060      	b.n	8002fc8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002f0c:	d107      	bne.n	8002f1e <SPI_WaitFifoStateUntilTimeout+0x62>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d104      	bne.n	8002f1e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002f1c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f24:	d050      	beq.n	8002fc8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f26:	f7fe f845 	bl	8000fb4 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d902      	bls.n	8002f3c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d13d      	bne.n	8002fb8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f54:	d111      	bne.n	8002f7a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f5e:	d004      	beq.n	8002f6a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f68:	d107      	bne.n	8002f7a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f78:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f82:	d10f      	bne.n	8002fa4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fa2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e010      	b.n	8002fda <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d196      	bne.n	8002f06 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3728      	adds	r7, #40	; 0x28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000000 	.word	0x20000000

08002fe8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ffc:	d111      	bne.n	8003022 <SPI_EndRxTransaction+0x3a>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003006:	d004      	beq.n	8003012 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003010:	d107      	bne.n	8003022 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003020:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2200      	movs	r2, #0
 800302a:	2180      	movs	r1, #128	; 0x80
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f7ff febd 	bl	8002dac <SPI_WaitFlagStateUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303c:	f043 0220 	orr.w	r2, r3, #32
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e023      	b.n	8003090 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003050:	d11d      	bne.n	800308e <SPI_EndRxTransaction+0xa6>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800305a:	d004      	beq.n	8003066 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003064:	d113      	bne.n	800308e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2200      	movs	r2, #0
 800306e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f7ff ff22 	bl	8002ebc <SPI_WaitFifoStateUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d007      	beq.n	800308e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003082:	f043 0220 	orr.w	r2, r3, #32
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e000      	b.n	8003090 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af02      	add	r7, sp, #8
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f7ff ff03 	bl	8002ebc <SPI_WaitFifoStateUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d007      	beq.n	80030cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c0:	f043 0220 	orr.w	r2, r3, #32
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e027      	b.n	800311c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2200      	movs	r2, #0
 80030d4:	2180      	movs	r1, #128	; 0x80
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f7ff fe68 	bl	8002dac <SPI_WaitFlagStateUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e6:	f043 0220 	orr.w	r2, r3, #32
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e014      	b.n	800311c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f7ff fedc 	bl	8002ebc <SPI_WaitFifoStateUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800310e:	f043 0220 	orr.w	r2, r3, #32
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e000      	b.n	800311c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <__libc_init_array>:
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	4d0d      	ldr	r5, [pc, #52]	; (800315c <__libc_init_array+0x38>)
 8003128:	4c0d      	ldr	r4, [pc, #52]	; (8003160 <__libc_init_array+0x3c>)
 800312a:	1b64      	subs	r4, r4, r5
 800312c:	10a4      	asrs	r4, r4, #2
 800312e:	2600      	movs	r6, #0
 8003130:	42a6      	cmp	r6, r4
 8003132:	d109      	bne.n	8003148 <__libc_init_array+0x24>
 8003134:	4d0b      	ldr	r5, [pc, #44]	; (8003164 <__libc_init_array+0x40>)
 8003136:	4c0c      	ldr	r4, [pc, #48]	; (8003168 <__libc_init_array+0x44>)
 8003138:	f000 f820 	bl	800317c <_init>
 800313c:	1b64      	subs	r4, r4, r5
 800313e:	10a4      	asrs	r4, r4, #2
 8003140:	2600      	movs	r6, #0
 8003142:	42a6      	cmp	r6, r4
 8003144:	d105      	bne.n	8003152 <__libc_init_array+0x2e>
 8003146:	bd70      	pop	{r4, r5, r6, pc}
 8003148:	f855 3b04 	ldr.w	r3, [r5], #4
 800314c:	4798      	blx	r3
 800314e:	3601      	adds	r6, #1
 8003150:	e7ee      	b.n	8003130 <__libc_init_array+0xc>
 8003152:	f855 3b04 	ldr.w	r3, [r5], #4
 8003156:	4798      	blx	r3
 8003158:	3601      	adds	r6, #1
 800315a:	e7f2      	b.n	8003142 <__libc_init_array+0x1e>
 800315c:	080031d4 	.word	0x080031d4
 8003160:	080031d4 	.word	0x080031d4
 8003164:	080031d4 	.word	0x080031d4
 8003168:	080031d8 	.word	0x080031d8

0800316c <memset>:
 800316c:	4402      	add	r2, r0
 800316e:	4603      	mov	r3, r0
 8003170:	4293      	cmp	r3, r2
 8003172:	d100      	bne.n	8003176 <memset+0xa>
 8003174:	4770      	bx	lr
 8003176:	f803 1b01 	strb.w	r1, [r3], #1
 800317a:	e7f9      	b.n	8003170 <memset+0x4>

0800317c <_init>:
 800317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317e:	bf00      	nop
 8003180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003182:	bc08      	pop	{r3}
 8003184:	469e      	mov	lr, r3
 8003186:	4770      	bx	lr

08003188 <_fini>:
 8003188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318a:	bf00      	nop
 800318c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318e:	bc08      	pop	{r3}
 8003190:	469e      	mov	lr, r3
 8003192:	4770      	bx	lr
