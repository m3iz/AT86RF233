
AT86RF233.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002874  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080029fc  080029fc  000129fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a3c  08002a3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a3c  08002a3c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a3c  08002a3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a3c  08002a3c  00012a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a40  08002a40  00012a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08002a50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002a50  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000807c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014b0  00000000  00000000  000280b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  00029568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  00029d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c3b  00000000  00000000  0002a410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007c37  00000000  00000000  0004f04b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2ad0  00000000  00000000  00056c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00139752  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dd8  00000000  00000000  001397a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080029e4 	.word	0x080029e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080029e4 	.word	0x080029e4

080001c8 <readRegister>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t readRegister(const uint8_t addr)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    uint8_t readCommand = addr | AT86RF2XX_ACCESS_REG | AT86RF2XX_ACCESS_READ;
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80001d8:	b2db      	uxtb	r3, r3
 80001da:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80001dc:	2200      	movs	r2, #0
 80001de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001e2:	4810      	ldr	r0, [pc, #64]	; (8000224 <readRegister+0x5c>)
 80001e4:	f000 fe66 	bl	8000eb4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi3, &readCommand, &value, sizeof(value), HAL_MAX_DELAY);
 80001e8:	f107 020f 	add.w	r2, r7, #15
 80001ec:	f107 010e 	add.w	r1, r7, #14
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	9300      	str	r3, [sp, #0]
 80001f6:	2301      	movs	r3, #1
 80001f8:	480b      	ldr	r0, [pc, #44]	; (8000228 <readRegister+0x60>)
 80001fa:	f001 fff8 	bl	80021ee <HAL_SPI_TransmitReceive>
    //HAL_SPI_Transmit(&hspi3, readCommand, 1, HAL_MAX_DELAY);
    HAL_SPI_Receive(&hspi3, &value, sizeof(value), HAL_MAX_DELAY);
 80001fe:	f107 010f 	add.w	r1, r7, #15
 8000202:	f04f 33ff 	mov.w	r3, #4294967295
 8000206:	2201      	movs	r2, #1
 8000208:	4807      	ldr	r0, [pc, #28]	; (8000228 <readRegister+0x60>)
 800020a:	f001 fec0 	bl	8001f8e <HAL_SPI_Receive>
    //HAL_SPI_TransmitReceive(&hspi3, 0x00, value, 1, HAL_MAX_DELAY);
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800020e:	2201      	movs	r2, #1
 8000210:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <readRegister+0x5c>)
 8000216:	f000 fe4d 	bl	8000eb4 <HAL_GPIO_WritePin>

    return (uint8_t)value;
 800021a:	7bfb      	ldrb	r3, [r7, #15]
}
 800021c:	4618      	mov	r0, r3
 800021e:	3710      	adds	r7, #16
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	48000800 	.word	0x48000800
 8000228:	2000002c 	.word	0x2000002c

0800022c <writeRegister>:

void writeRegister(const uint8_t addr,
        const uint8_t value)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	460a      	mov	r2, r1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	4613      	mov	r3, r2
 800023a:	71bb      	strb	r3, [r7, #6]
	uint8_t writeCommand = addr | AT86RF2XX_ACCESS_REG | AT86RF2XX_ACCESS_WRITE;
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000242:	b2db      	uxtb	r3, r3
 8000244:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000246:	2200      	movs	r2, #0
 8000248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800024c:	480d      	ldr	r0, [pc, #52]	; (8000284 <writeRegister+0x58>)
 800024e:	f000 fe31 	bl	8000eb4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &writeCommand, sizeof(writeCommand), HAL_MAX_DELAY);
 8000252:	f107 010f 	add.w	r1, r7, #15
 8000256:	f04f 33ff 	mov.w	r3, #4294967295
 800025a:	2201      	movs	r2, #1
 800025c:	480a      	ldr	r0, [pc, #40]	; (8000288 <writeRegister+0x5c>)
 800025e:	f001 fd28 	bl	8001cb2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &value, sizeof(value), HAL_MAX_DELAY);
 8000262:	1db9      	adds	r1, r7, #6
 8000264:	f04f 33ff 	mov.w	r3, #4294967295
 8000268:	2201      	movs	r2, #1
 800026a:	4807      	ldr	r0, [pc, #28]	; (8000288 <writeRegister+0x5c>)
 800026c:	f001 fd21 	bl	8001cb2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000270:	2201      	movs	r2, #1
 8000272:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000276:	4803      	ldr	r0, [pc, #12]	; (8000284 <writeRegister+0x58>)
 8000278:	f000 fe1c 	bl	8000eb4 <HAL_GPIO_WritePin>

}
 800027c:	bf00      	nop
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	48000800 	.word	0x48000800
 8000288:	2000002c 	.word	0x2000002c

0800028c <at86rf233_init>:

void at86rf233_init(){
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0


	//hardware_reset();
	HAL_GPIO_WritePin(SLP_GPIO_Port, SLP_Pin, GPIO_PIN_RESET);
 8000292:	2200      	movs	r2, #0
 8000294:	2140      	movs	r1, #64	; 0x40
 8000296:	4833      	ldr	r0, [pc, #204]	; (8000364 <at86rf233_init+0xd8>)
 8000298:	f000 fe0c 	bl	8000eb4 <HAL_GPIO_WritePin>
	//digitalWrite(SLP_TR, LOW);
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 800029c:	2201      	movs	r2, #1
 800029e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a2:	4830      	ldr	r0, [pc, #192]	; (8000364 <at86rf233_init+0xd8>)
 80002a4:	f000 fe06 	bl	8000eb4 <HAL_GPIO_WritePin>
	//digitalWrite(RESET, HIGH);
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002ae:	482e      	ldr	r0, [pc, #184]	; (8000368 <at86rf233_init+0xdc>)
 80002b0:	f000 fe00 	bl	8000eb4 <HAL_GPIO_WritePin>

	//

	//

	writeRegister(0x08, 0x0B); //Channel: 2405 MHz
 80002b4:	210b      	movs	r1, #11
 80002b6:	2008      	movs	r0, #8
 80002b8:	f7ff ffb8 	bl	800022c <writeRegister>

	  // Enable promiscuous mode:
	writeRegister(0x20, 0x12); //Short address bit[7:0]
 80002bc:	2112      	movs	r1, #18
 80002be:	2020      	movs	r0, #32
 80002c0:	f7ff ffb4 	bl	800022c <writeRegister>
	writeRegister(0x21, 0x34); //Short address bit[15:8]
 80002c4:	2134      	movs	r1, #52	; 0x34
 80002c6:	2021      	movs	r0, #33	; 0x21
 80002c8:	f7ff ffb0 	bl	800022c <writeRegister>
	writeRegister(0x22, 0x10); //PAN ID bit[7:0]
 80002cc:	2110      	movs	r1, #16
 80002ce:	2022      	movs	r0, #34	; 0x22
 80002d0:	f7ff ffac 	bl	800022c <writeRegister>
	writeRegister(0x23, 0x20); //PAN ID bit[15:8]
 80002d4:	2120      	movs	r1, #32
 80002d6:	2023      	movs	r0, #35	; 0x23
 80002d8:	f7ff ffa8 	bl	800022c <writeRegister>
	writeRegister(0x24, 0x30); //IEEE_ADDR_0
 80002dc:	2130      	movs	r1, #48	; 0x30
 80002de:	2024      	movs	r0, #36	; 0x24
 80002e0:	f7ff ffa4 	bl	800022c <writeRegister>
	writeRegister(0x25, 0x40); //IEEE_ADDR_1
 80002e4:	2140      	movs	r1, #64	; 0x40
 80002e6:	2025      	movs	r0, #37	; 0x25
 80002e8:	f7ff ffa0 	bl	800022c <writeRegister>
	writeRegister(0x26, 0x50); //IEEE_ADDR_2
 80002ec:	2150      	movs	r1, #80	; 0x50
 80002ee:	2026      	movs	r0, #38	; 0x26
 80002f0:	f7ff ff9c 	bl	800022c <writeRegister>
	writeRegister(0x27, 0x60); //IEEE_ADDR_3
 80002f4:	2160      	movs	r1, #96	; 0x60
 80002f6:	2027      	movs	r0, #39	; 0x27
 80002f8:	f7ff ff98 	bl	800022c <writeRegister>
	writeRegister(0x28, 0x70); //IEEE_ADDR_4
 80002fc:	2170      	movs	r1, #112	; 0x70
 80002fe:	2028      	movs	r0, #40	; 0x28
 8000300:	f7ff ff94 	bl	800022c <writeRegister>
	writeRegister(0x29, 0x80); //IEEE_ADDR_5
 8000304:	2180      	movs	r1, #128	; 0x80
 8000306:	2029      	movs	r0, #41	; 0x29
 8000308:	f7ff ff90 	bl	800022c <writeRegister>
	writeRegister(0x2A, 0x90); //IEEE_ADDR_6
 800030c:	2190      	movs	r1, #144	; 0x90
 800030e:	202a      	movs	r0, #42	; 0x2a
 8000310:	f7ff ff8c 	bl	800022c <writeRegister>
	writeRegister(0x2B, 0x22); //IEEE_ADDR_7
 8000314:	2122      	movs	r1, #34	; 0x22
 8000316:	202b      	movs	r0, #43	; 0x2b
 8000318:	f7ff ff88 	bl	800022c <writeRegister>
	writeRegister(0x05, 0x0); // tx power
 800031c:	2100      	movs	r1, #0
 800031e:	2005      	movs	r0, #5
 8000320:	f7ff ff84 	bl	800022c <writeRegister>

	writeRegister(0x17, 0B00000010); //AACK_PROM_MODE
 8000324:	2102      	movs	r1, #2
 8000326:	2017      	movs	r0, #23
 8000328:	f7ff ff80 	bl	800022c <writeRegister>
	writeRegister(0x2E, 0B00010000); //AACK_DIS_ACK
 800032c:	2110      	movs	r1, #16
 800032e:	202e      	movs	r0, #46	; 0x2e
 8000330:	f7ff ff7c 	bl	800022c <writeRegister>

	uint8_t TRX_CTRL_0 = readRegister(0x03);
 8000334:	2003      	movs	r0, #3
 8000336:	f7ff ff47 	bl	80001c8 <readRegister>
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
	TRX_CTRL_0 = TRX_CTRL_0 | 0B10000000; //TOM mode enabled
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000344:	71fb      	strb	r3, [r7, #7]
	writeRegister(0x03, TRX_CTRL_0);
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	4619      	mov	r1, r3
 800034a:	2003      	movs	r0, #3
 800034c:	f7ff ff6e 	bl	800022c <writeRegister>

	readRegister(0x1C);
 8000350:	201c      	movs	r0, #28
 8000352:	f7ff ff39 	bl	80001c8 <readRegister>
	  //Serial.print("Detected part nr: 0x");
	  //Serial.println(readRegister(0x1C), HEX);
	  //Serial.print("Version: 0x");
	  //Serial.println(readRegister(0x1D), HEX);

	HAL_Delay(1);
 8000356:	2001      	movs	r0, #1
 8000358:	f000 faf8 	bl	800094c <HAL_Delay>
}
 800035c:	bf00      	nop
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	48000400 	.word	0x48000400
 8000368:	48000800 	.word	0x48000800

0800036c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000372:	f000 fa76 	bl	8000862 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000376:	f000 f85b 	bl	8000430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800037a:	f000 f8dd 	bl	8000538 <MX_GPIO_Init>
  MX_SPI3_Init();
 800037e:	f000 f89d 	bl	80004bc <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  at86rf233_init();
 8000382:	f7ff ff83 	bl	800028c <at86rf233_init>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000386:	2180      	movs	r1, #128	; 0x80
 8000388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038c:	f000 fdaa 	bl	8000ee4 <HAL_GPIO_TogglePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //writeRegister(0x02);
	  uint8_t CurrentState = readRegister(0x01); //Page 37 of datasheet
 8000390:	2001      	movs	r0, #1
 8000392:	f7ff ff19 	bl	80001c8 <readRegister>
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
	  uint8_t Interrupt = readRegister(0x0F);
 800039a:	200f      	movs	r0, #15
 800039c:	f7ff ff14 	bl	80001c8 <readRegister>
 80003a0:	4603      	mov	r3, r0
 80003a2:	71bb      	strb	r3, [r7, #6]
	  uint8_t PHY_RSSI = readRegister(0x06); //if bit[7] = 1 (RX_CRC_VALID), FCS is valid
 80003a4:	2006      	movs	r0, #6
 80003a6:	f7ff ff0f 	bl	80001c8 <readRegister>
 80003aa:	4603      	mov	r3, r0
 80003ac:	717b      	strb	r3, [r7, #5]
	  //
	  //    digitalWrite(ctrlLED, ctrlZustand);
	  //
	  //  }

	  if (CurrentState == STATE_P_ON) { //P_ON
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d10a      	bne.n	80003ca <main+0x5e>
	    writeRegister(0x0E, IRQ_CCA_ED); // Interrupt AWAKE_END (IRQ_4) enabled
 80003b4:	2110      	movs	r1, #16
 80003b6:	200e      	movs	r0, #14
 80003b8:	f7ff ff38 	bl	800022c <writeRegister>
	    writeRegister(0x02, STATE_TRX_OFF); //Go from P_ON to TRX_OFF state
 80003bc:	2108      	movs	r1, #8
 80003be:	2002      	movs	r0, #2
 80003c0:	f7ff ff34 	bl	800022c <writeRegister>
	    HAL_Delay(1);
 80003c4:	2001      	movs	r0, #1
 80003c6:	f000 fac1 	bl	800094c <HAL_Delay>
	  }
	  if (CurrentState == STATE_TRX_OFF) { //TRX_OFF = 0x00
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	2b08      	cmp	r3, #8
 80003ce:	d10a      	bne.n	80003e6 <main+0x7a>
	    writeRegister(0x0E, IRQ_PLL_LOCK); // Interrupt PLL_LOCK (IRQ_0) enabled
 80003d0:	2101      	movs	r1, #1
 80003d2:	200e      	movs	r0, #14
 80003d4:	f7ff ff2a 	bl	800022c <writeRegister>
	    writeRegister(0x02, STATE_TX_ON); //Go from TRX_OFF to PLL_ON state
 80003d8:	2109      	movs	r1, #9
 80003da:	2002      	movs	r0, #2
 80003dc:	f7ff ff26 	bl	800022c <writeRegister>
	    HAL_Delay(0.016);
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 fab3 	bl	800094c <HAL_Delay>
	  }

	  if (Interrupt & IRQ_PLL_LOCK) { //if PLL is locked
 80003e6:	79bb      	ldrb	r3, [r7, #6]
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d00a      	beq.n	8000406 <main+0x9a>
	    writeRegister(0x0E, IRQ_RX_START & IRQ_TRX_END & IRQ_AMI); // Interrupts RX_START (IRQ_2), TRX_END (IRQ_3) and AMI (IRQ_5) enabled
 80003f0:	2100      	movs	r1, #0
 80003f2:	200e      	movs	r0, #14
 80003f4:	f7ff ff1a 	bl	800022c <writeRegister>
	    writeRegister(0x02, STATE_RX_AACK_ON); //Go from PLL_ON to RX_AACK_ON state
 80003f8:	2116      	movs	r1, #22
 80003fa:	2002      	movs	r0, #2
 80003fc:	f7ff ff16 	bl	800022c <writeRegister>
	    // during RX_ON state, listen for incoming frame, BUSY_RX -> receiving frame, interrupt IRQ_TRX_END -> done
	    HAL_Delay(1);
 8000400:	2001      	movs	r0, #1
 8000402:	f000 faa3 	bl	800094c <HAL_Delay>
	  }
	  if (Interrupt & AT86RF2XX_IRQ_STATUS_MASK__RX_START){
 8000406:	79bb      	ldrb	r3, [r7, #6]
 8000408:	f003 0304 	and.w	r3, r3, #4
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <main+0xa8>
		  int abba = 12;
 8000410:	230c      	movs	r3, #12
 8000412:	603b      	str	r3, [r7, #0]

	  }
	  if (Interrupt & IRQ_TRX_END) {
 8000414:	79bb      	ldrb	r3, [r7, #6]
 8000416:	f003 0308 	and.w	r3, r3, #8
 800041a:	2b00      	cmp	r3, #0
 800041c:	d0b8      	beq.n	8000390 <main+0x24>
	    // If we receive something, state will be BUSY_RX, interrupt IRQ_TRX_END when receive done
	   // readFrame();
	    received++;
 800041e:	4b03      	ldr	r3, [pc, #12]	; (800042c <main+0xc0>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	3301      	adds	r3, #1
 8000424:	4a01      	ldr	r2, [pc, #4]	; (800042c <main+0xc0>)
 8000426:	6013      	str	r3, [r2, #0]
  {
 8000428:	e7b2      	b.n	8000390 <main+0x24>
 800042a:	bf00      	nop
 800042c:	20000028 	.word	0x20000028

08000430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b096      	sub	sp, #88	; 0x58
 8000434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	2244      	movs	r2, #68	; 0x44
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f002 fac8 	bl	80029d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000444:	463b      	mov	r3, r7
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
 8000450:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000452:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000456:	f000 fd6d 	bl	8000f34 <HAL_PWREx_ControlVoltageScaling>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000460:	f000 f8f0 	bl	8000644 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000464:	2310      	movs	r3, #16
 8000466:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000468:	2301      	movs	r3, #1
 800046a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000470:	2360      	movs	r3, #96	; 0x60
 8000472:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000474:	2300      	movs	r3, #0
 8000476:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000478:	f107 0314 	add.w	r3, r7, #20
 800047c:	4618      	mov	r0, r3
 800047e:	f000 fdaf 	bl	8000fe0 <HAL_RCC_OscConfig>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000488:	f000 f8dc 	bl	8000644 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048c:	230f      	movs	r3, #15
 800048e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000490:	2300      	movs	r3, #0
 8000492:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000494:	2300      	movs	r3, #0
 8000496:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004a0:	463b      	mov	r3, r7
 80004a2:	2100      	movs	r1, #0
 80004a4:	4618      	mov	r0, r3
 80004a6:	f001 f975 	bl	8001794 <HAL_RCC_ClockConfig>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80004b0:	f000 f8c8 	bl	8000644 <Error_Handler>
  }
}
 80004b4:	bf00      	nop
 80004b6:	3758      	adds	r7, #88	; 0x58
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80004c0:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <MX_SPI3_Init+0x74>)
 80004c2:	4a1c      	ldr	r2, [pc, #112]	; (8000534 <MX_SPI3_Init+0x78>)
 80004c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80004c6:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <MX_SPI3_Init+0x74>)
 80004c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80004ce:	4b18      	ldr	r3, [pc, #96]	; (8000530 <MX_SPI3_Init+0x74>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80004d4:	4b16      	ldr	r3, [pc, #88]	; (8000530 <MX_SPI3_Init+0x74>)
 80004d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80004da:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004dc:	4b14      	ldr	r3, [pc, #80]	; (8000530 <MX_SPI3_Init+0x74>)
 80004de:	2200      	movs	r2, #0
 80004e0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004e2:	4b13      	ldr	r3, [pc, #76]	; (8000530 <MX_SPI3_Init+0x74>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <MX_SPI3_Init+0x74>)
 80004ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004ee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80004f0:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <MX_SPI3_Init+0x74>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <MX_SPI3_Init+0x74>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <MX_SPI3_Init+0x74>)
 80004fe:	2200      	movs	r2, #0
 8000500:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <MX_SPI3_Init+0x74>)
 8000504:	2200      	movs	r2, #0
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <MX_SPI3_Init+0x74>)
 800050a:	2207      	movs	r2, #7
 800050c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <MX_SPI3_Init+0x74>)
 8000510:	2200      	movs	r2, #0
 8000512:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <MX_SPI3_Init+0x74>)
 8000516:	2208      	movs	r2, #8
 8000518:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <MX_SPI3_Init+0x74>)
 800051c:	f001 fb26 	bl	8001b6c <HAL_SPI_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000526:	f000 f88d 	bl	8000644 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	2000002c 	.word	0x2000002c
 8000534:	40003c00 	.word	0x40003c00

08000538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053e:	f107 030c 	add.w	r3, r7, #12
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b3a      	ldr	r3, [pc, #232]	; (8000638 <MX_GPIO_Init+0x100>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	4a39      	ldr	r2, [pc, #228]	; (8000638 <MX_GPIO_Init+0x100>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055a:	4b37      	ldr	r3, [pc, #220]	; (8000638 <MX_GPIO_Init+0x100>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000566:	4b34      	ldr	r3, [pc, #208]	; (8000638 <MX_GPIO_Init+0x100>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	4a33      	ldr	r2, [pc, #204]	; (8000638 <MX_GPIO_Init+0x100>)
 800056c:	f043 0304 	orr.w	r3, r3, #4
 8000570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000572:	4b31      	ldr	r3, [pc, #196]	; (8000638 <MX_GPIO_Init+0x100>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	f003 0304 	and.w	r3, r3, #4
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b2e      	ldr	r3, [pc, #184]	; (8000638 <MX_GPIO_Init+0x100>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a2d      	ldr	r2, [pc, #180]	; (8000638 <MX_GPIO_Init+0x100>)
 8000584:	f043 0302 	orr.w	r3, r3, #2
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <MX_GPIO_Init+0x100>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2180      	movs	r1, #128	; 0x80
 800059a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059e:	f000 fc89 	bl	8000eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005a8:	4824      	ldr	r0, [pc, #144]	; (800063c <MX_GPIO_Init+0x104>)
 80005aa:	f000 fc83 	bl	8000eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SLP_Pin|RESET_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80005b4:	4822      	ldr	r0, [pc, #136]	; (8000640 <MX_GPIO_Init+0x108>)
 80005b6:	f000 fc7d 	bl	8000eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	2301      	movs	r3, #1
 80005c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	4619      	mov	r1, r3
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d4:	f000 fac4 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80005d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	4619      	mov	r1, r3
 80005ec:	4813      	ldr	r0, [pc, #76]	; (800063c <MX_GPIO_Init+0x104>)
 80005ee:	f000 fab7 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80005f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	4619      	mov	r1, r3
 800060a:	480c      	ldr	r0, [pc, #48]	; (800063c <MX_GPIO_Init+0x104>)
 800060c:	f000 faa8 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : SLP_Pin RESET_Pin */
  GPIO_InitStruct.Pin = SLP_Pin|RESET_Pin;
 8000610:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_GPIO_Init+0x108>)
 800062a:	f000 fa99 	bl	8000b60 <HAL_GPIO_Init>

}
 800062e:	bf00      	nop
 8000630:	3720      	adds	r7, #32
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000
 800063c:	48000800 	.word	0x48000800
 8000640:	48000400 	.word	0x48000400

08000644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000648:	b672      	cpsid	i
}
 800064a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800064c:	e7fe      	b.n	800064c <Error_Handler+0x8>
	...

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_MspInit+0x44>)
 8000658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <HAL_MspInit+0x44>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6613      	str	r3, [r2, #96]	; 0x60
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_MspInit+0x44>)
 8000664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_MspInit+0x44>)
 8000670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <HAL_MspInit+0x44>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000678:	6593      	str	r3, [r2, #88]	; 0x58
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_MspInit+0x44>)
 800067c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08c      	sub	sp, #48	; 0x30
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <HAL_SPI_MspInit+0xf0>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d162      	bne.n	8000780 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80006ba:	4b34      	ldr	r3, [pc, #208]	; (800078c <HAL_SPI_MspInit+0xf4>)
 80006bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006be:	4a33      	ldr	r2, [pc, #204]	; (800078c <HAL_SPI_MspInit+0xf4>)
 80006c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006c4:	6593      	str	r3, [r2, #88]	; 0x58
 80006c6:	4b31      	ldr	r3, [pc, #196]	; (800078c <HAL_SPI_MspInit+0xf4>)
 80006c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006ce:	61bb      	str	r3, [r7, #24]
 80006d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b2e      	ldr	r3, [pc, #184]	; (800078c <HAL_SPI_MspInit+0xf4>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4a2d      	ldr	r2, [pc, #180]	; (800078c <HAL_SPI_MspInit+0xf4>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4b2b      	ldr	r3, [pc, #172]	; (800078c <HAL_SPI_MspInit+0xf4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <HAL_SPI_MspInit+0xf4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	4a27      	ldr	r2, [pc, #156]	; (800078c <HAL_SPI_MspInit+0xf4>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <HAL_SPI_MspInit+0xf4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <HAL_SPI_MspInit+0xf4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4a21      	ldr	r2, [pc, #132]	; (800078c <HAL_SPI_MspInit+0xf4>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <HAL_SPI_MspInit+0xf4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
    PA15 (JTDI)     ------> SPI3_NSS
    PC12     ------> SPI3_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800071a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800071e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800072c:	2306      	movs	r3, #6
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073a:	f000 fa11 	bl	8000b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000750:	2306      	movs	r3, #6
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	480d      	ldr	r0, [pc, #52]	; (8000790 <HAL_SPI_MspInit+0xf8>)
 800075c:	f000 fa00 	bl	8000b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000760:	2318      	movs	r3, #24
 8000762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000770:	2306      	movs	r3, #6
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <HAL_SPI_MspInit+0xfc>)
 800077c:	f000 f9f0 	bl	8000b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000780:	bf00      	nop
 8000782:	3730      	adds	r7, #48	; 0x30
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40003c00 	.word	0x40003c00
 800078c:	40021000 	.word	0x40021000
 8000790:	48000800 	.word	0x48000800
 8000794:	48000400 	.word	0x48000400

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800079c:	e7fe      	b.n	800079c <NMI_Handler+0x4>

0800079e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <MemManage_Handler+0x4>

080007aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <BusFault_Handler+0x4>

080007b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <UsageFault_Handler+0x4>

080007b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e4:	f000 f892 	bl	800090c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}

080007ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <SystemInit+0x20>)
 80007f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007f6:	4a05      	ldr	r2, [pc, #20]	; (800080c <SystemInit+0x20>)
 80007f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000848 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000814:	f7ff ffea 	bl	80007ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <LoopForever+0x6>)
  ldr r1, =_edata
 800081a:	490d      	ldr	r1, [pc, #52]	; (8000850 <LoopForever+0xa>)
  ldr r2, =_sidata
 800081c:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <LoopForever+0xe>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000820:	e002      	b.n	8000828 <LoopCopyDataInit>

08000822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000826:	3304      	adds	r3, #4

08000828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800082c:	d3f9      	bcc.n	8000822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000830:	4c0a      	ldr	r4, [pc, #40]	; (800085c <LoopForever+0x16>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000834:	e001      	b.n	800083a <LoopFillZerobss>

08000836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000838:	3204      	adds	r2, #4

0800083a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800083c:	d3fb      	bcc.n	8000836 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800083e:	f002 f8a5 	bl	800298c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000842:	f7ff fd93 	bl	800036c <main>

08000846 <LoopForever>:

LoopForever:
    b LoopForever
 8000846:	e7fe      	b.n	8000846 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000848:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800084c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000850:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000854:	08002a44 	.word	0x08002a44
  ldr r2, =_sbss
 8000858:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800085c:	20000094 	.word	0x20000094

08000860 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000860:	e7fe      	b.n	8000860 <ADC1_2_IRQHandler>

08000862 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000868:	2300      	movs	r3, #0
 800086a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800086c:	2003      	movs	r0, #3
 800086e:	f000 f943 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000872:	200f      	movs	r0, #15
 8000874:	f000 f80e 	bl	8000894 <HAL_InitTick>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d002      	beq.n	8000884 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	71fb      	strb	r3, [r7, #7]
 8000882:	e001      	b.n	8000888 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000884:	f7ff fee4 	bl	8000650 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000888:	79fb      	ldrb	r3, [r7, #7]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800089c:	2300      	movs	r3, #0
 800089e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <HAL_InitTick+0x6c>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d023      	beq.n	80008f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <HAL_InitTick+0x70>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <HAL_InitTick+0x6c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f941 	bl	8000b46 <HAL_SYSTICK_Config>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d10f      	bne.n	80008ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b0f      	cmp	r3, #15
 80008ce:	d809      	bhi.n	80008e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d0:	2200      	movs	r2, #0
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295
 80008d8:	f000 f919 	bl	8000b0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008dc:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <HAL_InitTick+0x74>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6013      	str	r3, [r2, #0]
 80008e2:	e007      	b.n	80008f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008e4:	2301      	movs	r3, #1
 80008e6:	73fb      	strb	r3, [r7, #15]
 80008e8:	e004      	b.n	80008f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	73fb      	strb	r3, [r7, #15]
 80008ee:	e001      	b.n	80008f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000008 	.word	0x20000008
 8000904:	20000000 	.word	0x20000000
 8000908:	20000004 	.word	0x20000004

0800090c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_IncTick+0x20>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_IncTick+0x24>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4a04      	ldr	r2, [pc, #16]	; (8000930 <HAL_IncTick+0x24>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20000008 	.word	0x20000008
 8000930:	20000090 	.word	0x20000090

08000934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <HAL_GetTick+0x14>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000090 	.word	0x20000090

0800094c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000954:	f7ff ffee 	bl	8000934 <HAL_GetTick>
 8000958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000964:	d005      	beq.n	8000972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <HAL_Delay+0x44>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000972:	bf00      	nop
 8000974:	f7ff ffde 	bl	8000934 <HAL_GetTick>
 8000978:	4602      	mov	r2, r0
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	429a      	cmp	r2, r3
 8000982:	d8f7      	bhi.n	8000974 <HAL_Delay+0x28>
  {
  }
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000008 	.word	0x20000008

08000994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c6:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	60d3      	str	r3, [r2, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <__NVIC_GetPriorityGrouping+0x18>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	f003 0307 	and.w	r3, r3, #7
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	db0a      	blt.n	8000a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	490c      	ldr	r1, [pc, #48]	; (8000a44 <__NVIC_SetPriority+0x4c>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	0112      	lsls	r2, r2, #4
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a20:	e00a      	b.n	8000a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4908      	ldr	r1, [pc, #32]	; (8000a48 <__NVIC_SetPriority+0x50>)
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 030f 	and.w	r3, r3, #15
 8000a2e:	3b04      	subs	r3, #4
 8000a30:	0112      	lsls	r2, r2, #4
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	440b      	add	r3, r1
 8000a36:	761a      	strb	r2, [r3, #24]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000e100 	.word	0xe000e100
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b089      	sub	sp, #36	; 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	f1c3 0307 	rsb	r3, r3, #7
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	bf28      	it	cs
 8000a6a:	2304      	movcs	r3, #4
 8000a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3304      	adds	r3, #4
 8000a72:	2b06      	cmp	r3, #6
 8000a74:	d902      	bls.n	8000a7c <NVIC_EncodePriority+0x30>
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3b03      	subs	r3, #3
 8000a7a:	e000      	b.n	8000a7e <NVIC_EncodePriority+0x32>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	f04f 32ff 	mov.w	r2, #4294967295
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	401a      	ands	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	43d9      	mvns	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	4313      	orrs	r3, r2
         );
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3724      	adds	r7, #36	; 0x24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac4:	d301      	bcc.n	8000aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00f      	b.n	8000aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <SysTick_Config+0x40>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f7ff ff8e 	bl	80009f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <SysTick_Config+0x40>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <SysTick_Config+0x40>)
 8000ae4:	2207      	movs	r2, #7
 8000ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	e000e010 	.word	0xe000e010

08000af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff47 	bl	8000994 <__NVIC_SetPriorityGrouping>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b20:	f7ff ff5c 	bl	80009dc <__NVIC_GetPriorityGrouping>
 8000b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	68b9      	ldr	r1, [r7, #8]
 8000b2a:	6978      	ldr	r0, [r7, #20]
 8000b2c:	f7ff ff8e 	bl	8000a4c <NVIC_EncodePriority>
 8000b30:	4602      	mov	r2, r0
 8000b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff5d 	bl	80009f8 <__NVIC_SetPriority>
}
 8000b3e:	bf00      	nop
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffb0 	bl	8000ab4 <SysTick_Config>
 8000b54:	4603      	mov	r3, r0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b087      	sub	sp, #28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b6e:	e17f      	b.n	8000e70 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	2101      	movs	r1, #1
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f000 8171 	beq.w	8000e6a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d005      	beq.n	8000ba0 <HAL_GPIO_Init+0x40>
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d130      	bne.n	8000c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	2203      	movs	r2, #3
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	091b      	lsrs	r3, r3, #4
 8000bec:	f003 0201 	and.w	r2, r3, #1
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 0303 	and.w	r3, r3, #3
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d118      	bne.n	8000c40 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c14:	2201      	movs	r2, #1
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	08db      	lsrs	r3, r3, #3
 8000c2a:	f003 0201 	and.w	r2, r3, #1
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d017      	beq.n	8000c7c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	2203      	movs	r2, #3
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d123      	bne.n	8000cd0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	08da      	lsrs	r2, r3, #3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3208      	adds	r2, #8
 8000c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	f003 0307 	and.w	r3, r3, #7
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	220f      	movs	r2, #15
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	691a      	ldr	r2, [r3, #16]
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	08da      	lsrs	r2, r3, #3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3208      	adds	r2, #8
 8000cca:	6939      	ldr	r1, [r7, #16]
 8000ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2203      	movs	r2, #3
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0203 	and.w	r2, r3, #3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f000 80ac 	beq.w	8000e6a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	4b5f      	ldr	r3, [pc, #380]	; (8000e90 <HAL_GPIO_Init+0x330>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d16:	4a5e      	ldr	r2, [pc, #376]	; (8000e90 <HAL_GPIO_Init+0x330>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d1e:	4b5c      	ldr	r3, [pc, #368]	; (8000e90 <HAL_GPIO_Init+0x330>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d2a:	4a5a      	ldr	r2, [pc, #360]	; (8000e94 <HAL_GPIO_Init+0x334>)
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3302      	adds	r3, #2
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d54:	d025      	beq.n	8000da2 <HAL_GPIO_Init+0x242>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a4f      	ldr	r2, [pc, #316]	; (8000e98 <HAL_GPIO_Init+0x338>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d01f      	beq.n	8000d9e <HAL_GPIO_Init+0x23e>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a4e      	ldr	r2, [pc, #312]	; (8000e9c <HAL_GPIO_Init+0x33c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d019      	beq.n	8000d9a <HAL_GPIO_Init+0x23a>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a4d      	ldr	r2, [pc, #308]	; (8000ea0 <HAL_GPIO_Init+0x340>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d013      	beq.n	8000d96 <HAL_GPIO_Init+0x236>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a4c      	ldr	r2, [pc, #304]	; (8000ea4 <HAL_GPIO_Init+0x344>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d00d      	beq.n	8000d92 <HAL_GPIO_Init+0x232>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a4b      	ldr	r2, [pc, #300]	; (8000ea8 <HAL_GPIO_Init+0x348>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d007      	beq.n	8000d8e <HAL_GPIO_Init+0x22e>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a4a      	ldr	r2, [pc, #296]	; (8000eac <HAL_GPIO_Init+0x34c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d101      	bne.n	8000d8a <HAL_GPIO_Init+0x22a>
 8000d86:	2306      	movs	r3, #6
 8000d88:	e00c      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000d8a:	2307      	movs	r3, #7
 8000d8c:	e00a      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000d8e:	2305      	movs	r3, #5
 8000d90:	e008      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000d92:	2304      	movs	r3, #4
 8000d94:	e006      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000d96:	2303      	movs	r3, #3
 8000d98:	e004      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	e002      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <HAL_GPIO_Init+0x244>
 8000da2:	2300      	movs	r3, #0
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	f002 0203 	and.w	r2, r2, #3
 8000daa:	0092      	lsls	r2, r2, #2
 8000dac:	4093      	lsls	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000db4:	4937      	ldr	r1, [pc, #220]	; (8000e94 <HAL_GPIO_Init+0x334>)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	089b      	lsrs	r3, r3, #2
 8000dba:	3302      	adds	r3, #2
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dc2:	4b3b      	ldr	r3, [pc, #236]	; (8000eb0 <HAL_GPIO_Init+0x350>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000de6:	4a32      	ldr	r2, [pc, #200]	; (8000eb0 <HAL_GPIO_Init+0x350>)
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dec:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <HAL_GPIO_Init+0x350>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e10:	4a27      	ldr	r2, [pc, #156]	; (8000eb0 <HAL_GPIO_Init+0x350>)
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e16:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <HAL_GPIO_Init+0x350>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e3a:	4a1d      	ldr	r2, [pc, #116]	; (8000eb0 <HAL_GPIO_Init+0x350>)
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <HAL_GPIO_Init+0x350>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e64:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <HAL_GPIO_Init+0x350>)
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa22 f303 	lsr.w	r3, r2, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f47f ae78 	bne.w	8000b70 <HAL_GPIO_Init+0x10>
  }
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	371c      	adds	r7, #28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40010000 	.word	0x40010000
 8000e98:	48000400 	.word	0x48000400
 8000e9c:	48000800 	.word	0x48000800
 8000ea0:	48000c00 	.word	0x48000c00
 8000ea4:	48001000 	.word	0x48001000
 8000ea8:	48001400 	.word	0x48001400
 8000eac:	48001800 	.word	0x48001800
 8000eb0:	40010400 	.word	0x40010400

08000eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	807b      	strh	r3, [r7, #2]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ec4:	787b      	ldrb	r3, [r7, #1]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eca:	887a      	ldrh	r2, [r7, #2]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ed0:	e002      	b.n	8000ed8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ed2:	887a      	ldrh	r2, [r7, #2]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	695b      	ldr	r3, [r3, #20]
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ef6:	887a      	ldrh	r2, [r7, #2]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4013      	ands	r3, r2
 8000efc:	041a      	lsls	r2, r3, #16
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	43d9      	mvns	r1, r3
 8000f02:	887b      	ldrh	r3, [r7, #2]
 8000f04:	400b      	ands	r3, r1
 8000f06:	431a      	orrs	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	619a      	str	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40007000 	.word	0x40007000

08000f34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f42:	d130      	bne.n	8000fa6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f44:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f50:	d038      	beq.n	8000fc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f52:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f5a:	4a1e      	ldr	r2, [pc, #120]	; (8000fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2232      	movs	r2, #50	; 0x32
 8000f68:	fb02 f303 	mul.w	r3, r2, r3
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f72:	0c9b      	lsrs	r3, r3, #18
 8000f74:	3301      	adds	r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f78:	e002      	b.n	8000f80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f8c:	d102      	bne.n	8000f94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1f2      	bne.n	8000f7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f96:	695b      	ldr	r3, [r3, #20]
 8000f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fa0:	d110      	bne.n	8000fc4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e00f      	b.n	8000fc6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fb2:	d007      	beq.n	8000fc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fbc:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40007000 	.word	0x40007000
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	431bde83 	.word	0x431bde83

08000fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e3c6      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ff2:	4ba1      	ldr	r3, [pc, #644]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 030c 	and.w	r3, r3, #12
 8000ffa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ffc:	4b9e      	ldr	r3, [pc, #632]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0310 	and.w	r3, r3, #16
 800100e:	2b00      	cmp	r3, #0
 8001010:	f000 80e4 	beq.w	80011dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d007      	beq.n	800102a <HAL_RCC_OscConfig+0x4a>
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	2b0c      	cmp	r3, #12
 800101e:	f040 808b 	bne.w	8001138 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2b01      	cmp	r3, #1
 8001026:	f040 8087 	bne.w	8001138 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800102a:	4b93      	ldr	r3, [pc, #588]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d005      	beq.n	8001042 <HAL_RCC_OscConfig+0x62>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e39e      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a1a      	ldr	r2, [r3, #32]
 8001046:	4b8c      	ldr	r3, [pc, #560]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	2b00      	cmp	r3, #0
 8001050:	d004      	beq.n	800105c <HAL_RCC_OscConfig+0x7c>
 8001052:	4b89      	ldr	r3, [pc, #548]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800105a:	e005      	b.n	8001068 <HAL_RCC_OscConfig+0x88>
 800105c:	4b86      	ldr	r3, [pc, #536]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 800105e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001062:	091b      	lsrs	r3, r3, #4
 8001064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001068:	4293      	cmp	r3, r2
 800106a:	d223      	bcs.n	80010b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fd1b 	bl	8001aac <RCC_SetFlashLatencyFromMSIRange>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e37f      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001080:	4b7d      	ldr	r3, [pc, #500]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a7c      	ldr	r2, [pc, #496]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8001086:	f043 0308 	orr.w	r3, r3, #8
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b7a      	ldr	r3, [pc, #488]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	4977      	ldr	r1, [pc, #476]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 800109a:	4313      	orrs	r3, r2
 800109c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800109e:	4b76      	ldr	r3, [pc, #472]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	4972      	ldr	r1, [pc, #456]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	604b      	str	r3, [r1, #4]
 80010b2:	e025      	b.n	8001100 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010b4:	4b70      	ldr	r3, [pc, #448]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a6f      	ldr	r2, [pc, #444]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 80010ba:	f043 0308 	orr.w	r3, r3, #8
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b6d      	ldr	r3, [pc, #436]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	496a      	ldr	r1, [pc, #424]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010d2:	4b69      	ldr	r3, [pc, #420]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	4965      	ldr	r1, [pc, #404]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d109      	bne.n	8001100 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fcdb 	bl	8001aac <RCC_SetFlashLatencyFromMSIRange>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e33f      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001100:	f000 fc48 	bl	8001994 <HAL_RCC_GetSysClockFreq>
 8001104:	4602      	mov	r2, r0
 8001106:	4b5c      	ldr	r3, [pc, #368]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	091b      	lsrs	r3, r3, #4
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	495a      	ldr	r1, [pc, #360]	; (800127c <HAL_RCC_OscConfig+0x29c>)
 8001112:	5ccb      	ldrb	r3, [r1, r3]
 8001114:	f003 031f 	and.w	r3, r3, #31
 8001118:	fa22 f303 	lsr.w	r3, r2, r3
 800111c:	4a58      	ldr	r2, [pc, #352]	; (8001280 <HAL_RCC_OscConfig+0x2a0>)
 800111e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001120:	4b58      	ldr	r3, [pc, #352]	; (8001284 <HAL_RCC_OscConfig+0x2a4>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fbb5 	bl	8000894 <HAL_InitTick>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d052      	beq.n	80011da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	e323      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d032      	beq.n	80011a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001140:	4b4d      	ldr	r3, [pc, #308]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a4c      	ldr	r2, [pc, #304]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800114c:	f7ff fbf2 	bl	8000934 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001154:	f7ff fbee 	bl	8000934 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e30c      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001166:	4b44      	ldr	r3, [pc, #272]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f0      	beq.n	8001154 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001172:	4b41      	ldr	r3, [pc, #260]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a40      	ldr	r2, [pc, #256]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8001178:	f043 0308 	orr.w	r3, r3, #8
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	4b3e      	ldr	r3, [pc, #248]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	493b      	ldr	r1, [pc, #236]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 800118c:	4313      	orrs	r3, r2
 800118e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001190:	4b39      	ldr	r3, [pc, #228]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	4936      	ldr	r1, [pc, #216]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 80011a0:	4313      	orrs	r3, r2
 80011a2:	604b      	str	r3, [r1, #4]
 80011a4:	e01a      	b.n	80011dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011a6:	4b34      	ldr	r3, [pc, #208]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a33      	ldr	r2, [pc, #204]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 80011ac:	f023 0301 	bic.w	r3, r3, #1
 80011b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011b2:	f7ff fbbf 	bl	8000934 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011ba:	f7ff fbbb 	bl	8000934 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e2d9      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011cc:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1f0      	bne.n	80011ba <HAL_RCC_OscConfig+0x1da>
 80011d8:	e000      	b.n	80011dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d074      	beq.n	80012d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d005      	beq.n	80011fa <HAL_RCC_OscConfig+0x21a>
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	2b0c      	cmp	r3, #12
 80011f2:	d10e      	bne.n	8001212 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d10b      	bne.n	8001212 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fa:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d064      	beq.n	80012d0 <HAL_RCC_OscConfig+0x2f0>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d160      	bne.n	80012d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e2b6      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800121a:	d106      	bne.n	800122a <HAL_RCC_OscConfig+0x24a>
 800121c:	4b16      	ldr	r3, [pc, #88]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a15      	ldr	r2, [pc, #84]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8001222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	e01d      	b.n	8001266 <HAL_RCC_OscConfig+0x286>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001232:	d10c      	bne.n	800124e <HAL_RCC_OscConfig+0x26e>
 8001234:	4b10      	ldr	r3, [pc, #64]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0f      	ldr	r2, [pc, #60]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 800123a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0c      	ldr	r2, [pc, #48]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8001246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	e00b      	b.n	8001266 <HAL_RCC_OscConfig+0x286>
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a09      	ldr	r2, [pc, #36]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8001254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a06      	ldr	r2, [pc, #24]	; (8001278 <HAL_RCC_OscConfig+0x298>)
 8001260:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001264:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d01c      	beq.n	80012a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126e:	f7ff fb61 	bl	8000934 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001274:	e011      	b.n	800129a <HAL_RCC_OscConfig+0x2ba>
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000
 800127c:	080029fc 	.word	0x080029fc
 8001280:	20000000 	.word	0x20000000
 8001284:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fb54 	bl	8000934 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	; 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e272      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800129a:	4baf      	ldr	r3, [pc, #700]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x2a8>
 80012a6:	e014      	b.n	80012d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a8:	f7ff fb44 	bl	8000934 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b0:	f7ff fb40 	bl	8000934 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b64      	cmp	r3, #100	; 0x64
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e25e      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012c2:	4ba5      	ldr	r3, [pc, #660]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x2d0>
 80012ce:	e000      	b.n	80012d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d060      	beq.n	80013a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d005      	beq.n	80012f0 <HAL_RCC_OscConfig+0x310>
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	2b0c      	cmp	r3, #12
 80012e8:	d119      	bne.n	800131e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d116      	bne.n	800131e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012f0:	4b99      	ldr	r3, [pc, #612]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <HAL_RCC_OscConfig+0x328>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e23b      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001308:	4b93      	ldr	r3, [pc, #588]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	061b      	lsls	r3, r3, #24
 8001316:	4990      	ldr	r1, [pc, #576]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 8001318:	4313      	orrs	r3, r2
 800131a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800131c:	e040      	b.n	80013a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d023      	beq.n	800136e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001326:	4b8c      	ldr	r3, [pc, #560]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a8b      	ldr	r2, [pc, #556]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 800132c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001332:	f7ff faff 	bl	8000934 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800133a:	f7ff fafb 	bl	8000934 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e219      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800134c:	4b82      	ldr	r3, [pc, #520]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f0      	beq.n	800133a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001358:	4b7f      	ldr	r3, [pc, #508]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	061b      	lsls	r3, r3, #24
 8001366:	497c      	ldr	r1, [pc, #496]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
 800136c:	e018      	b.n	80013a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800136e:	4b7a      	ldr	r3, [pc, #488]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a79      	ldr	r2, [pc, #484]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 8001374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137a:	f7ff fadb 	bl	8000934 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001382:	f7ff fad7 	bl	8000934 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e1f5      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001394:	4b70      	ldr	r3, [pc, #448]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f0      	bne.n	8001382 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d03c      	beq.n	8001426 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d01c      	beq.n	80013ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013b4:	4b68      	ldr	r3, [pc, #416]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 80013b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ba:	4a67      	ldr	r2, [pc, #412]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c4:	f7ff fab6 	bl	8000934 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013cc:	f7ff fab2 	bl	8000934 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e1d0      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013de:	4b5e      	ldr	r3, [pc, #376]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 80013e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0ef      	beq.n	80013cc <HAL_RCC_OscConfig+0x3ec>
 80013ec:	e01b      	b.n	8001426 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ee:	4b5a      	ldr	r3, [pc, #360]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 80013f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f4:	4a58      	ldr	r2, [pc, #352]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 80013f6:	f023 0301 	bic.w	r3, r3, #1
 80013fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fe:	f7ff fa99 	bl	8000934 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001406:	f7ff fa95 	bl	8000934 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e1b3      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001418:	4b4f      	ldr	r3, [pc, #316]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 800141a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1ef      	bne.n	8001406 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 80a6 	beq.w	8001580 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001438:	4b47      	ldr	r3, [pc, #284]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 800143a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10d      	bne.n	8001460 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001444:	4b44      	ldr	r3, [pc, #272]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 8001446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001448:	4a43      	ldr	r2, [pc, #268]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 800144a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144e:	6593      	str	r3, [r2, #88]	; 0x58
 8001450:	4b41      	ldr	r3, [pc, #260]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 8001452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800145c:	2301      	movs	r3, #1
 800145e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001460:	4b3e      	ldr	r3, [pc, #248]	; (800155c <HAL_RCC_OscConfig+0x57c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001468:	2b00      	cmp	r3, #0
 800146a:	d118      	bne.n	800149e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800146c:	4b3b      	ldr	r3, [pc, #236]	; (800155c <HAL_RCC_OscConfig+0x57c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a3a      	ldr	r2, [pc, #232]	; (800155c <HAL_RCC_OscConfig+0x57c>)
 8001472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001476:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001478:	f7ff fa5c 	bl	8000934 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001480:	f7ff fa58 	bl	8000934 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e176      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001492:	4b32      	ldr	r3, [pc, #200]	; (800155c <HAL_RCC_OscConfig+0x57c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d108      	bne.n	80014b8 <HAL_RCC_OscConfig+0x4d8>
 80014a6:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 80014a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ac:	4a2a      	ldr	r2, [pc, #168]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014b6:	e024      	b.n	8001502 <HAL_RCC_OscConfig+0x522>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b05      	cmp	r3, #5
 80014be:	d110      	bne.n	80014e2 <HAL_RCC_OscConfig+0x502>
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 80014c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c6:	4a24      	ldr	r2, [pc, #144]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014d0:	4b21      	ldr	r3, [pc, #132]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 80014d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d6:	4a20      	ldr	r2, [pc, #128]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014e0:	e00f      	b.n	8001502 <HAL_RCC_OscConfig+0x522>
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 80014e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e8:	4a1b      	ldr	r2, [pc, #108]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 80014ea:	f023 0301 	bic.w	r3, r3, #1
 80014ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 80014f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f8:	4a17      	ldr	r2, [pc, #92]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 80014fa:	f023 0304 	bic.w	r3, r3, #4
 80014fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d016      	beq.n	8001538 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150a:	f7ff fa13 	bl	8000934 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001510:	e00a      	b.n	8001528 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001512:	f7ff fa0f 	bl	8000934 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001520:	4293      	cmp	r3, r2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e12b      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 800152a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0ed      	beq.n	8001512 <HAL_RCC_OscConfig+0x532>
 8001536:	e01a      	b.n	800156e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001538:	f7ff f9fc 	bl	8000934 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800153e:	e00f      	b.n	8001560 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001540:	f7ff f9f8 	bl	8000934 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f241 3288 	movw	r2, #5000	; 0x1388
 800154e:	4293      	cmp	r3, r2
 8001550:	d906      	bls.n	8001560 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e114      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001560:	4b89      	ldr	r3, [pc, #548]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 8001562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1e8      	bne.n	8001540 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800156e:	7ffb      	ldrb	r3, [r7, #31]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d105      	bne.n	8001580 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001574:	4b84      	ldr	r3, [pc, #528]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 8001576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001578:	4a83      	ldr	r2, [pc, #524]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 800157a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800157e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80fa 	beq.w	800177e <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158e:	2b02      	cmp	r3, #2
 8001590:	f040 80d0 	bne.w	8001734 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001594:	4b7c      	ldr	r3, [pc, #496]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f003 0203 	and.w	r2, r3, #3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d130      	bne.n	800160a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	3b01      	subs	r3, #1
 80015b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d127      	bne.n	800160a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d11f      	bne.n	800160a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015d4:	2a07      	cmp	r2, #7
 80015d6:	bf14      	ite	ne
 80015d8:	2201      	movne	r2, #1
 80015da:	2200      	moveq	r2, #0
 80015dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015de:	4293      	cmp	r3, r2
 80015e0:	d113      	bne.n	800160a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ec:	085b      	lsrs	r3, r3, #1
 80015ee:	3b01      	subs	r3, #1
 80015f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d109      	bne.n	800160a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	085b      	lsrs	r3, r3, #1
 8001602:	3b01      	subs	r3, #1
 8001604:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001606:	429a      	cmp	r2, r3
 8001608:	d06e      	beq.n	80016e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	2b0c      	cmp	r3, #12
 800160e:	d069      	beq.n	80016e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001610:	4b5d      	ldr	r3, [pc, #372]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d105      	bne.n	8001628 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800161c:	4b5a      	ldr	r3, [pc, #360]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0a9      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800162c:	4b56      	ldr	r3, [pc, #344]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a55      	ldr	r2, [pc, #340]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 8001632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001636:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001638:	f7ff f97c 	bl	8000934 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff f978 	bl	8000934 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e096      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001652:	4b4d      	ldr	r3, [pc, #308]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800165e:	4b4a      	ldr	r3, [pc, #296]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	4b4a      	ldr	r3, [pc, #296]	; (800178c <HAL_RCC_OscConfig+0x7ac>)
 8001664:	4013      	ands	r3, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800166e:	3a01      	subs	r2, #1
 8001670:	0112      	lsls	r2, r2, #4
 8001672:	4311      	orrs	r1, r2
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001678:	0212      	lsls	r2, r2, #8
 800167a:	4311      	orrs	r1, r2
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001680:	0852      	lsrs	r2, r2, #1
 8001682:	3a01      	subs	r2, #1
 8001684:	0552      	lsls	r2, r2, #21
 8001686:	4311      	orrs	r1, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800168c:	0852      	lsrs	r2, r2, #1
 800168e:	3a01      	subs	r2, #1
 8001690:	0652      	lsls	r2, r2, #25
 8001692:	4311      	orrs	r1, r2
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001698:	0912      	lsrs	r2, r2, #4
 800169a:	0452      	lsls	r2, r2, #17
 800169c:	430a      	orrs	r2, r1
 800169e:	493a      	ldr	r1, [pc, #232]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016a4:	4b38      	ldr	r3, [pc, #224]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a37      	ldr	r2, [pc, #220]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 80016aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016b0:	4b35      	ldr	r3, [pc, #212]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4a34      	ldr	r2, [pc, #208]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 80016b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016bc:	f7ff f93a 	bl	8000934 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff f936 	bl	8000934 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e054      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016d6:	4b2c      	ldr	r3, [pc, #176]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016e2:	e04c      	b.n	800177e <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e04b      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016e8:	4b27      	ldr	r3, [pc, #156]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d144      	bne.n	800177e <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80016f4:	4b24      	ldr	r3, [pc, #144]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a23      	ldr	r2, [pc, #140]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 80016fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001700:	4b21      	ldr	r3, [pc, #132]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	4a20      	ldr	r2, [pc, #128]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 8001706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800170a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800170c:	f7ff f912 	bl	8000934 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001714:	f7ff f90e 	bl	8000934 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e02c      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0x734>
 8001732:	e024      	b.n	800177e <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	2b0c      	cmp	r3, #12
 8001738:	d01f      	beq.n	800177a <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800173a:	4b13      	ldr	r3, [pc, #76]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 8001740:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001746:	f7ff f8f5 	bl	8000934 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174e:	f7ff f8f1 	bl	8000934 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e00f      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	4905      	ldr	r1, [pc, #20]	; (8001788 <HAL_RCC_OscConfig+0x7a8>)
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <HAL_RCC_OscConfig+0x7b0>)
 8001774:	4013      	ands	r3, r2
 8001776:	60cb      	str	r3, [r1, #12]
 8001778:	e001      	b.n	800177e <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40021000 	.word	0x40021000
 800178c:	f99d808c 	.word	0xf99d808c
 8001790:	feeefffc 	.word	0xfeeefffc

08001794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0e7      	b.n	8001978 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a8:	4b75      	ldr	r3, [pc, #468]	; (8001980 <HAL_RCC_ClockConfig+0x1ec>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d910      	bls.n	80017d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b72      	ldr	r3, [pc, #456]	; (8001980 <HAL_RCC_ClockConfig+0x1ec>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f023 0207 	bic.w	r2, r3, #7
 80017be:	4970      	ldr	r1, [pc, #448]	; (8001980 <HAL_RCC_ClockConfig+0x1ec>)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c6:	4b6e      	ldr	r3, [pc, #440]	; (8001980 <HAL_RCC_ClockConfig+0x1ec>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0cf      	b.n	8001978 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d010      	beq.n	8001806 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	4b66      	ldr	r3, [pc, #408]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d908      	bls.n	8001806 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f4:	4b63      	ldr	r3, [pc, #396]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4960      	ldr	r1, [pc, #384]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 8001802:	4313      	orrs	r3, r2
 8001804:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d04c      	beq.n	80018ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b03      	cmp	r3, #3
 8001818:	d107      	bne.n	800182a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800181a:	4b5a      	ldr	r3, [pc, #360]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d121      	bne.n	800186a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e0a6      	b.n	8001978 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001832:	4b54      	ldr	r3, [pc, #336]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d115      	bne.n	800186a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e09a      	b.n	8001978 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800184a:	4b4e      	ldr	r3, [pc, #312]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e08e      	b.n	8001978 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800185a:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e086      	b.n	8001978 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800186a:	4b46      	ldr	r3, [pc, #280]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f023 0203 	bic.w	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4943      	ldr	r1, [pc, #268]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 8001878:	4313      	orrs	r3, r2
 800187a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800187c:	f7ff f85a 	bl	8000934 <HAL_GetTick>
 8001880:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	e00a      	b.n	800189a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001884:	f7ff f856 	bl	8000934 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e06e      	b.n	8001978 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	4b3a      	ldr	r3, [pc, #232]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 020c 	and.w	r2, r3, #12
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d1eb      	bne.n	8001884 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d010      	beq.n	80018da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	4b31      	ldr	r3, [pc, #196]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d208      	bcs.n	80018da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c8:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	492b      	ldr	r1, [pc, #172]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <HAL_RCC_ClockConfig+0x1ec>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d210      	bcs.n	800190a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e8:	4b25      	ldr	r3, [pc, #148]	; (8001980 <HAL_RCC_ClockConfig+0x1ec>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f023 0207 	bic.w	r2, r3, #7
 80018f0:	4923      	ldr	r1, [pc, #140]	; (8001980 <HAL_RCC_ClockConfig+0x1ec>)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f8:	4b21      	ldr	r3, [pc, #132]	; (8001980 <HAL_RCC_ClockConfig+0x1ec>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d001      	beq.n	800190a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e036      	b.n	8001978 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	d008      	beq.n	8001928 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	4918      	ldr	r1, [pc, #96]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 8001924:	4313      	orrs	r3, r2
 8001926:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b00      	cmp	r3, #0
 8001932:	d009      	beq.n	8001948 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4910      	ldr	r1, [pc, #64]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 8001944:	4313      	orrs	r3, r2
 8001946:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001948:	f000 f824 	bl	8001994 <HAL_RCC_GetSysClockFreq>
 800194c:	4602      	mov	r2, r0
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	091b      	lsrs	r3, r3, #4
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	490b      	ldr	r1, [pc, #44]	; (8001988 <HAL_RCC_ClockConfig+0x1f4>)
 800195a:	5ccb      	ldrb	r3, [r1, r3]
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
 8001964:	4a09      	ldr	r2, [pc, #36]	; (800198c <HAL_RCC_ClockConfig+0x1f8>)
 8001966:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_RCC_ClockConfig+0x1fc>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe ff91 	bl	8000894 <HAL_InitTick>
 8001972:	4603      	mov	r3, r0
 8001974:	72fb      	strb	r3, [r7, #11]

  return status;
 8001976:	7afb      	ldrb	r3, [r7, #11]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40022000 	.word	0x40022000
 8001984:	40021000 	.word	0x40021000
 8001988:	080029fc 	.word	0x080029fc
 800198c:	20000000 	.word	0x20000000
 8001990:	20000004 	.word	0x20000004

08001994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019a2:	4b3e      	ldr	r3, [pc, #248]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019ac:	4b3b      	ldr	r3, [pc, #236]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_GetSysClockFreq+0x34>
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	d121      	bne.n	8001a06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d11e      	bne.n	8001a06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019c8:	4b34      	ldr	r3, [pc, #208]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d107      	bne.n	80019e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019d4:	4b31      	ldr	r3, [pc, #196]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80019d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019da:	0a1b      	lsrs	r3, r3, #8
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	e005      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019e4:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019f0:	4a2b      	ldr	r2, [pc, #172]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10d      	bne.n	8001a1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d102      	bne.n	8001a12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a0c:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a0e:	61bb      	str	r3, [r7, #24]
 8001a10:	e004      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	2b0c      	cmp	r3, #12
 8001a20:	d134      	bne.n	8001a8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a22:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d003      	beq.n	8001a3a <HAL_RCC_GetSysClockFreq+0xa6>
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d003      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0xac>
 8001a38:	e005      	b.n	8001a46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a3c:	617b      	str	r3, [r7, #20]
      break;
 8001a3e:	e005      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a42:	617b      	str	r3, [r7, #20]
      break;
 8001a44:	e002      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	617b      	str	r3, [r7, #20]
      break;
 8001a4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	3301      	adds	r3, #1
 8001a58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	0a1b      	lsrs	r3, r3, #8
 8001a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	fb02 f203 	mul.w	r2, r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	0e5b      	lsrs	r3, r3, #25
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a8c:	69bb      	ldr	r3, [r7, #24]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	; 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	08002a0c 	.word	0x08002a0c
 8001aa4:	00f42400 	.word	0x00f42400
 8001aa8:	007a1200 	.word	0x007a1200

08001aac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ac4:	f7ff fa28 	bl	8000f18 <HAL_PWREx_GetVoltageRange>
 8001ac8:	6178      	str	r0, [r7, #20]
 8001aca:	e014      	b.n	8001af6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001acc:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad0:	4a24      	ldr	r2, [pc, #144]	; (8001b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ad8:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ae4:	f7ff fa18 	bl	8000f18 <HAL_PWREx_GetVoltageRange>
 8001ae8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001aea:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aee:	4a1d      	ldr	r2, [pc, #116]	; (8001b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001afc:	d10b      	bne.n	8001b16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b80      	cmp	r3, #128	; 0x80
 8001b02:	d919      	bls.n	8001b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2ba0      	cmp	r3, #160	; 0xa0
 8001b08:	d902      	bls.n	8001b10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	e013      	b.n	8001b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b10:	2301      	movs	r3, #1
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	e010      	b.n	8001b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b80      	cmp	r3, #128	; 0x80
 8001b1a:	d902      	bls.n	8001b22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	e00a      	b.n	8001b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b80      	cmp	r3, #128	; 0x80
 8001b26:	d102      	bne.n	8001b2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b28:	2302      	movs	r3, #2
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	e004      	b.n	8001b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b70      	cmp	r3, #112	; 0x70
 8001b32:	d101      	bne.n	8001b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b34:	2301      	movs	r3, #1
 8001b36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 0207 	bic.w	r2, r3, #7
 8001b40:	4909      	ldr	r1, [pc, #36]	; (8001b68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d001      	beq.n	8001b5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40022000 	.word	0x40022000

08001b6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e095      	b.n	8001caa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d108      	bne.n	8001b98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b8e:	d009      	beq.n	8001ba4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
 8001b96:	e005      	b.n	8001ba4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7fe fd6a 	bl	8000698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001be4:	d902      	bls.n	8001bec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	e002      	b.n	8001bf2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001bfa:	d007      	beq.n	8001c0c <HAL_SPI_Init+0xa0>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001c04:	d002      	beq.n	8001c0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4e:	ea42 0103 	orr.w	r1, r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	0c1b      	lsrs	r3, r3, #16
 8001c68:	f003 0204 	and.w	r2, r3, #4
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001c88:	ea42 0103 	orr.w	r1, r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b088      	sub	sp, #32
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_SPI_Transmit+0x22>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e158      	b.n	8001f86 <HAL_SPI_Transmit+0x2d4>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cdc:	f7fe fe2a 	bl	8000934 <HAL_GetTick>
 8001ce0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d002      	beq.n	8001cf8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001cf6:	e13d      	b.n	8001f74 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <HAL_SPI_Transmit+0x52>
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d08:	e134      	b.n	8001f74 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	88fa      	ldrh	r2, [r7, #6]
 8001d22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	88fa      	ldrh	r2, [r7, #6]
 8001d28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d54:	d10f      	bne.n	8001d76 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d80:	2b40      	cmp	r3, #64	; 0x40
 8001d82:	d007      	beq.n	8001d94 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d9c:	d94b      	bls.n	8001e36 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <HAL_SPI_Transmit+0xfa>
 8001da6:	8afb      	ldrh	r3, [r7, #22]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d13e      	bne.n	8001e2a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db0:	881a      	ldrh	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dbc:	1c9a      	adds	r2, r3, #2
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001dd0:	e02b      	b.n	8001e2a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d112      	bne.n	8001e06 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de4:	881a      	ldrh	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df0:	1c9a      	adds	r2, r3, #2
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e04:	e011      	b.n	8001e2a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e06:	f7fe fd95 	bl	8000934 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d803      	bhi.n	8001e1e <HAL_SPI_Transmit+0x16c>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d102      	bne.n	8001e24 <HAL_SPI_Transmit+0x172>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d102      	bne.n	8001e2a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e28:	e0a4      	b.n	8001f74 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1ce      	bne.n	8001dd2 <HAL_SPI_Transmit+0x120>
 8001e34:	e07c      	b.n	8001f30 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <HAL_SPI_Transmit+0x192>
 8001e3e:	8afb      	ldrh	r3, [r7, #22]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d170      	bne.n	8001f26 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d912      	bls.n	8001e74 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e52:	881a      	ldrh	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5e:	1c9a      	adds	r2, r3, #2
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	3b02      	subs	r3, #2
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e72:	e058      	b.n	8001f26 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	330c      	adds	r3, #12
 8001e7e:	7812      	ldrb	r2, [r2, #0]
 8001e80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001e9a:	e044      	b.n	8001f26 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d12b      	bne.n	8001f02 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d912      	bls.n	8001eda <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb8:	881a      	ldrh	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec4:	1c9a      	adds	r2, r3, #2
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	3b02      	subs	r3, #2
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ed8:	e025      	b.n	8001f26 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	330c      	adds	r3, #12
 8001ee4:	7812      	ldrb	r2, [r2, #0]
 8001ee6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f00:	e011      	b.n	8001f26 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f02:	f7fe fd17 	bl	8000934 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d803      	bhi.n	8001f1a <HAL_SPI_Transmit+0x268>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f18:	d102      	bne.n	8001f20 <HAL_SPI_Transmit+0x26e>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f24:	e026      	b.n	8001f74 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1b5      	bne.n	8001e9c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	6839      	ldr	r1, [r7, #0]
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 fce3 	bl	8002900 <SPI_EndRxTxTransaction>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2220      	movs	r2, #32
 8001f44:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10a      	bne.n	8001f64 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	77fb      	strb	r3, [r7, #31]
 8001f70:	e000      	b.n	8001f74 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8001f72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001f84:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3720      	adds	r7, #32
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b088      	sub	sp, #32
 8001f92:	af02      	add	r7, sp, #8
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001faa:	d112      	bne.n	8001fd2 <HAL_SPI_Receive+0x44>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10e      	bne.n	8001fd2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001fbc:	88fa      	ldrh	r2, [r7, #6]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 f910 	bl	80021ee <HAL_SPI_TransmitReceive>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	e109      	b.n	80021e6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_SPI_Receive+0x52>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e102      	b.n	80021e6 <HAL_SPI_Receive+0x258>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fe8:	f7fe fca4 	bl	8000934 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d002      	beq.n	8002000 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001ffe:	e0e9      	b.n	80021d4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <HAL_SPI_Receive+0x7e>
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d102      	bne.n	8002012 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002010:	e0e0      	b.n	80021d4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2204      	movs	r2, #4
 8002016:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	88fa      	ldrh	r2, [r7, #6]
 800202a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	88fa      	ldrh	r2, [r7, #6]
 8002032:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800205c:	d908      	bls.n	8002070 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	e007      	b.n	8002080 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800207e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002088:	d10f      	bne.n	80020aa <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002098:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b4:	2b40      	cmp	r3, #64	; 0x40
 80020b6:	d007      	beq.n	80020c8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80020d0:	d867      	bhi.n	80021a2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80020d2:	e030      	b.n	8002136 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d117      	bne.n	8002112 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f103 020c 	add.w	r2, r3, #12
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	7812      	ldrb	r2, [r2, #0]
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002104:	b29b      	uxth	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002110:	e011      	b.n	8002136 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002112:	f7fe fc0f 	bl	8000934 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d803      	bhi.n	800212a <HAL_SPI_Receive+0x19c>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002128:	d102      	bne.n	8002130 <HAL_SPI_Receive+0x1a2>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d102      	bne.n	8002136 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002134:	e04e      	b.n	80021d4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800213c:	b29b      	uxth	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1c8      	bne.n	80020d4 <HAL_SPI_Receive+0x146>
 8002142:	e034      	b.n	80021ae <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b01      	cmp	r3, #1
 8002150:	d115      	bne.n	800217e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	b292      	uxth	r2, r2
 800215e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	1c9a      	adds	r2, r3, #2
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002170:	b29b      	uxth	r3, r3
 8002172:	3b01      	subs	r3, #1
 8002174:	b29a      	uxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800217c:	e011      	b.n	80021a2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800217e:	f7fe fbd9 	bl	8000934 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d803      	bhi.n	8002196 <HAL_SPI_Receive+0x208>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002194:	d102      	bne.n	800219c <HAL_SPI_Receive+0x20e>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d102      	bne.n	80021a2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80021a0:	e018      	b.n	80021d4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1ca      	bne.n	8002144 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	6839      	ldr	r1, [r7, #0]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 fb4c 	bl	8002850 <SPI_EndRxTransaction>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2220      	movs	r2, #32
 80021c2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	75fb      	strb	r3, [r7, #23]
 80021d0:	e000      	b.n	80021d4 <HAL_SPI_Receive+0x246>
  }

error :
 80021d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b08a      	sub	sp, #40	; 0x28
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80021fc:	2301      	movs	r3, #1
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_SPI_TransmitReceive+0x26>
 8002210:	2302      	movs	r3, #2
 8002212:	e1fb      	b.n	800260c <HAL_SPI_TransmitReceive+0x41e>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800221c:	f7fe fb8a 	bl	8000934 <HAL_GetTick>
 8002220:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002228:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002230:	887b      	ldrh	r3, [r7, #2]
 8002232:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002234:	887b      	ldrh	r3, [r7, #2]
 8002236:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002238:	7efb      	ldrb	r3, [r7, #27]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d00e      	beq.n	800225c <HAL_SPI_TransmitReceive+0x6e>
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002244:	d106      	bne.n	8002254 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d102      	bne.n	8002254 <HAL_SPI_TransmitReceive+0x66>
 800224e:	7efb      	ldrb	r3, [r7, #27]
 8002250:	2b04      	cmp	r3, #4
 8002252:	d003      	beq.n	800225c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002254:	2302      	movs	r3, #2
 8002256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800225a:	e1cd      	b.n	80025f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_SPI_TransmitReceive+0x80>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <HAL_SPI_TransmitReceive+0x80>
 8002268:	887b      	ldrh	r3, [r7, #2]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d103      	bne.n	8002276 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002274:	e1c0      	b.n	80025f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b04      	cmp	r3, #4
 8002280:	d003      	beq.n	800228a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2205      	movs	r2, #5
 8002286:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	887a      	ldrh	r2, [r7, #2]
 800229a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	887a      	ldrh	r2, [r7, #2]
 80022a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	887a      	ldrh	r2, [r7, #2]
 80022b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	887a      	ldrh	r2, [r7, #2]
 80022b6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022cc:	d802      	bhi.n	80022d4 <HAL_SPI_TransmitReceive+0xe6>
 80022ce:	8a3b      	ldrh	r3, [r7, #16]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d908      	bls.n	80022e6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	e007      	b.n	80022f6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022f4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002300:	2b40      	cmp	r3, #64	; 0x40
 8002302:	d007      	beq.n	8002314 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002312:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800231c:	d97c      	bls.n	8002418 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <HAL_SPI_TransmitReceive+0x13e>
 8002326:	8a7b      	ldrh	r3, [r7, #18]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d169      	bne.n	8002400 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002330:	881a      	ldrh	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233c:	1c9a      	adds	r2, r3, #2
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002346:	b29b      	uxth	r3, r3
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002350:	e056      	b.n	8002400 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b02      	cmp	r3, #2
 800235e:	d11b      	bne.n	8002398 <HAL_SPI_TransmitReceive+0x1aa>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002364:	b29b      	uxth	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d016      	beq.n	8002398 <HAL_SPI_TransmitReceive+0x1aa>
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	2b01      	cmp	r3, #1
 800236e:	d113      	bne.n	8002398 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002374:	881a      	ldrh	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002380:	1c9a      	adds	r2, r3, #2
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800238a:	b29b      	uxth	r3, r3
 800238c:	3b01      	subs	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d11c      	bne.n	80023e0 <HAL_SPI_TransmitReceive+0x1f2>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d016      	beq.n	80023e0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	b292      	uxth	r2, r2
 80023be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	1c9a      	adds	r2, r3, #2
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023dc:	2301      	movs	r3, #1
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80023e0:	f7fe faa8 	bl	8000934 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d807      	bhi.n	8002400 <HAL_SPI_TransmitReceive+0x212>
 80023f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f6:	d003      	beq.n	8002400 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80023fe:	e0fb      	b.n	80025f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1a3      	bne.n	8002352 <HAL_SPI_TransmitReceive+0x164>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d19d      	bne.n	8002352 <HAL_SPI_TransmitReceive+0x164>
 8002416:	e0df      	b.n	80025d8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_SPI_TransmitReceive+0x23a>
 8002420:	8a7b      	ldrh	r3, [r7, #18]
 8002422:	2b01      	cmp	r3, #1
 8002424:	f040 80cb 	bne.w	80025be <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800242c:	b29b      	uxth	r3, r3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d912      	bls.n	8002458 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	881a      	ldrh	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002442:	1c9a      	adds	r2, r3, #2
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b02      	subs	r3, #2
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002456:	e0b2      	b.n	80025be <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	330c      	adds	r3, #12
 8002462:	7812      	ldrb	r2, [r2, #0]
 8002464:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002474:	b29b      	uxth	r3, r3
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800247e:	e09e      	b.n	80025be <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b02      	cmp	r3, #2
 800248c:	d134      	bne.n	80024f8 <HAL_SPI_TransmitReceive+0x30a>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002492:	b29b      	uxth	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d02f      	beq.n	80024f8 <HAL_SPI_TransmitReceive+0x30a>
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	2b01      	cmp	r3, #1
 800249c:	d12c      	bne.n	80024f8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d912      	bls.n	80024ce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ac:	881a      	ldrh	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	1c9a      	adds	r2, r3, #2
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b02      	subs	r3, #2
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024cc:	e012      	b.n	80024f4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	330c      	adds	r3, #12
 80024d8:	7812      	ldrb	r2, [r2, #0]
 80024da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d148      	bne.n	8002598 <HAL_SPI_TransmitReceive+0x3aa>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800250c:	b29b      	uxth	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d042      	beq.n	8002598 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d923      	bls.n	8002566 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	b292      	uxth	r2, r2
 800252a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	1c9a      	adds	r2, r3, #2
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800253c:	b29b      	uxth	r3, r3
 800253e:	3b02      	subs	r3, #2
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800254e:	b29b      	uxth	r3, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	d81f      	bhi.n	8002594 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	e016      	b.n	8002594 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f103 020c 	add.w	r2, r3, #12
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	7812      	ldrb	r2, [r2, #0]
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002588:	b29b      	uxth	r3, r3
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002594:	2301      	movs	r3, #1
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002598:	f7fe f9cc 	bl	8000934 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d803      	bhi.n	80025b0 <HAL_SPI_TransmitReceive+0x3c2>
 80025a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ae:	d102      	bne.n	80025b6 <HAL_SPI_TransmitReceive+0x3c8>
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d103      	bne.n	80025be <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80025bc:	e01c      	b.n	80025f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f47f af5b 	bne.w	8002480 <HAL_SPI_TransmitReceive+0x292>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f47f af54 	bne.w	8002480 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f98f 	bl	8002900 <SPI_EndRxTxTransaction>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d006      	beq.n	80025f6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2220      	movs	r2, #32
 80025f2:	661a      	str	r2, [r3, #96]	; 0x60
 80025f4:	e000      	b.n	80025f8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80025f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002608:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800260c:	4618      	mov	r0, r3
 800260e:	3728      	adds	r7, #40	; 0x28
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	4613      	mov	r3, r2
 8002622:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002624:	f7fe f986 	bl	8000934 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	1a9b      	subs	r3, r3, r2
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	4413      	add	r3, r2
 8002632:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002634:	f7fe f97e 	bl	8000934 <HAL_GetTick>
 8002638:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800263a:	4b39      	ldr	r3, [pc, #228]	; (8002720 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	015b      	lsls	r3, r3, #5
 8002640:	0d1b      	lsrs	r3, r3, #20
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	fb02 f303 	mul.w	r3, r2, r3
 8002648:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800264a:	e054      	b.n	80026f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002652:	d050      	beq.n	80026f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002654:	f7fe f96e 	bl	8000934 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	429a      	cmp	r2, r3
 8002662:	d902      	bls.n	800266a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d13d      	bne.n	80026e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002678:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002682:	d111      	bne.n	80026a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800268c:	d004      	beq.n	8002698 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002696:	d107      	bne.n	80026a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026b0:	d10f      	bne.n	80026d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e017      	b.n	8002716 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	4013      	ands	r3, r2
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	429a      	cmp	r2, r3
 8002704:	bf0c      	ite	eq
 8002706:	2301      	moveq	r3, #1
 8002708:	2300      	movne	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	429a      	cmp	r2, r3
 8002712:	d19b      	bne.n	800264c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3720      	adds	r7, #32
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000000 	.word	0x20000000

08002724 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002736:	f7fe f8fd 	bl	8000934 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	4413      	add	r3, r2
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002746:	f7fe f8f5 	bl	8000934 <HAL_GetTick>
 800274a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	330c      	adds	r3, #12
 8002752:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002754:	4b3d      	ldr	r3, [pc, #244]	; (800284c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	00da      	lsls	r2, r3, #3
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	0d1b      	lsrs	r3, r3, #20
 8002764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800276c:	e060      	b.n	8002830 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002774:	d107      	bne.n	8002786 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d104      	bne.n	8002786 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002784:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278c:	d050      	beq.n	8002830 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800278e:	f7fe f8d1 	bl	8000934 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279a:	429a      	cmp	r2, r3
 800279c:	d902      	bls.n	80027a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d13d      	bne.n	8002820 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027bc:	d111      	bne.n	80027e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027c6:	d004      	beq.n	80027d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d0:	d107      	bne.n	80027e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ea:	d10f      	bne.n	800280c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800280a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e010      	b.n	8002842 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	3b01      	subs	r3, #1
 800282e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	4013      	ands	r3, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	429a      	cmp	r2, r3
 800283e:	d196      	bne.n	800276e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3728      	adds	r7, #40	; 0x28
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000000 	.word	0x20000000

08002850 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af02      	add	r7, sp, #8
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002864:	d111      	bne.n	800288a <SPI_EndRxTransaction+0x3a>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800286e:	d004      	beq.n	800287a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002878:	d107      	bne.n	800288a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002888:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2200      	movs	r2, #0
 8002892:	2180      	movs	r1, #128	; 0x80
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f7ff febd 	bl	8002614 <SPI_WaitFlagStateUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d007      	beq.n	80028b0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a4:	f043 0220 	orr.w	r2, r3, #32
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e023      	b.n	80028f8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028b8:	d11d      	bne.n	80028f6 <SPI_EndRxTransaction+0xa6>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028c2:	d004      	beq.n	80028ce <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028cc:	d113      	bne.n	80028f6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f7ff ff22 	bl	8002724 <SPI_WaitFifoStateUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d007      	beq.n	80028f6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ea:	f043 0220 	orr.w	r2, r3, #32
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e000      	b.n	80028f8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2200      	movs	r2, #0
 8002914:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f7ff ff03 	bl	8002724 <SPI_WaitFifoStateUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d007      	beq.n	8002934 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002928:	f043 0220 	orr.w	r2, r3, #32
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e027      	b.n	8002984 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2200      	movs	r2, #0
 800293c:	2180      	movs	r1, #128	; 0x80
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f7ff fe68 	bl	8002614 <SPI_WaitFlagStateUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800294e:	f043 0220 	orr.w	r2, r3, #32
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e014      	b.n	8002984 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2200      	movs	r2, #0
 8002962:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f7ff fedc 	bl	8002724 <SPI_WaitFifoStateUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d007      	beq.n	8002982 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002976:	f043 0220 	orr.w	r2, r3, #32
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e000      	b.n	8002984 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <__libc_init_array>:
 800298c:	b570      	push	{r4, r5, r6, lr}
 800298e:	4d0d      	ldr	r5, [pc, #52]	; (80029c4 <__libc_init_array+0x38>)
 8002990:	4c0d      	ldr	r4, [pc, #52]	; (80029c8 <__libc_init_array+0x3c>)
 8002992:	1b64      	subs	r4, r4, r5
 8002994:	10a4      	asrs	r4, r4, #2
 8002996:	2600      	movs	r6, #0
 8002998:	42a6      	cmp	r6, r4
 800299a:	d109      	bne.n	80029b0 <__libc_init_array+0x24>
 800299c:	4d0b      	ldr	r5, [pc, #44]	; (80029cc <__libc_init_array+0x40>)
 800299e:	4c0c      	ldr	r4, [pc, #48]	; (80029d0 <__libc_init_array+0x44>)
 80029a0:	f000 f820 	bl	80029e4 <_init>
 80029a4:	1b64      	subs	r4, r4, r5
 80029a6:	10a4      	asrs	r4, r4, #2
 80029a8:	2600      	movs	r6, #0
 80029aa:	42a6      	cmp	r6, r4
 80029ac:	d105      	bne.n	80029ba <__libc_init_array+0x2e>
 80029ae:	bd70      	pop	{r4, r5, r6, pc}
 80029b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029b4:	4798      	blx	r3
 80029b6:	3601      	adds	r6, #1
 80029b8:	e7ee      	b.n	8002998 <__libc_init_array+0xc>
 80029ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80029be:	4798      	blx	r3
 80029c0:	3601      	adds	r6, #1
 80029c2:	e7f2      	b.n	80029aa <__libc_init_array+0x1e>
 80029c4:	08002a3c 	.word	0x08002a3c
 80029c8:	08002a3c 	.word	0x08002a3c
 80029cc:	08002a3c 	.word	0x08002a3c
 80029d0:	08002a40 	.word	0x08002a40

080029d4 <memset>:
 80029d4:	4402      	add	r2, r0
 80029d6:	4603      	mov	r3, r0
 80029d8:	4293      	cmp	r3, r2
 80029da:	d100      	bne.n	80029de <memset+0xa>
 80029dc:	4770      	bx	lr
 80029de:	f803 1b01 	strb.w	r1, [r3], #1
 80029e2:	e7f9      	b.n	80029d8 <memset+0x4>

080029e4 <_init>:
 80029e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e6:	bf00      	nop
 80029e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ea:	bc08      	pop	{r3}
 80029ec:	469e      	mov	lr, r3
 80029ee:	4770      	bx	lr

080029f0 <_fini>:
 80029f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f2:	bf00      	nop
 80029f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029f6:	bc08      	pop	{r3}
 80029f8:	469e      	mov	lr, r3
 80029fa:	4770      	bx	lr
