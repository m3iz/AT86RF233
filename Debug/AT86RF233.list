
AT86RF233.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002868  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080029f0  080029f0  000129f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a30  08002a30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a30  08002a30  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a30  08002a30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a30  08002a30  00012a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a34  08002a34  00012a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002a44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002a44  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008159  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014f6  00000000  00000000  00028195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  00029690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  00029e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024fc6  00000000  00000000  0002a538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007c37  00000000  00000000  0004f4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3cc9  00000000  00000000  00057135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013adfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dd8  00000000  00000000  0013ae54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080029d8 	.word	0x080029d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080029d8 	.word	0x080029d8

080001c8 <readRegister>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t readRegister(const uint8_t addr)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    uint8_t readCommand = addr | AT86RF2XX_ACCESS_REG | AT86RF2XX_ACCESS_READ;
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80001d8:	b2db      	uxtb	r3, r3
 80001da:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80001dc:	2200      	movs	r2, #0
 80001de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001e2:	4810      	ldr	r0, [pc, #64]	; (8000224 <readRegister+0x5c>)
 80001e4:	f000 fe60 	bl	8000ea8 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi3, &readCommand, &value, sizeof(value), HAL_MAX_DELAY);
 80001e8:	f107 020f 	add.w	r2, r7, #15
 80001ec:	f107 010e 	add.w	r1, r7, #14
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	9300      	str	r3, [sp, #0]
 80001f6:	2301      	movs	r3, #1
 80001f8:	480b      	ldr	r0, [pc, #44]	; (8000228 <readRegister+0x60>)
 80001fa:	f001 fff2 	bl	80021e2 <HAL_SPI_TransmitReceive>
    //HAL_SPI_Transmit(&hspi3, readCommand, 1, HAL_MAX_DELAY);
    HAL_SPI_Receive(&hspi3, &value, sizeof(value), HAL_MAX_DELAY);
 80001fe:	f107 010f 	add.w	r1, r7, #15
 8000202:	f04f 33ff 	mov.w	r3, #4294967295
 8000206:	2201      	movs	r2, #1
 8000208:	4807      	ldr	r0, [pc, #28]	; (8000228 <readRegister+0x60>)
 800020a:	f001 feba 	bl	8001f82 <HAL_SPI_Receive>
    //HAL_SPI_TransmitReceive(&hspi3, 0x00, value, 1, HAL_MAX_DELAY);
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800020e:	2201      	movs	r2, #1
 8000210:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <readRegister+0x5c>)
 8000216:	f000 fe47 	bl	8000ea8 <HAL_GPIO_WritePin>

    return (uint8_t)value;
 800021a:	7bfb      	ldrb	r3, [r7, #15]
}
 800021c:	4618      	mov	r0, r3
 800021e:	3710      	adds	r7, #16
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	48000800 	.word	0x48000800
 8000228:	20000028 	.word	0x20000028

0800022c <writeRegister>:

void writeRegister(const uint8_t addr,
        const uint8_t value)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	460a      	mov	r2, r1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	4613      	mov	r3, r2
 800023a:	71bb      	strb	r3, [r7, #6]
	uint8_t writeCommand = addr | AT86RF2XX_ACCESS_REG | AT86RF2XX_ACCESS_WRITE;
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000242:	b2db      	uxtb	r3, r3
 8000244:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000246:	2200      	movs	r2, #0
 8000248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800024c:	480d      	ldr	r0, [pc, #52]	; (8000284 <writeRegister+0x58>)
 800024e:	f000 fe2b 	bl	8000ea8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &writeCommand, sizeof(writeCommand), HAL_MAX_DELAY);
 8000252:	f107 010f 	add.w	r1, r7, #15
 8000256:	f04f 33ff 	mov.w	r3, #4294967295
 800025a:	2201      	movs	r2, #1
 800025c:	480a      	ldr	r0, [pc, #40]	; (8000288 <writeRegister+0x5c>)
 800025e:	f001 fd22 	bl	8001ca6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &value, sizeof(value), HAL_MAX_DELAY);
 8000262:	1db9      	adds	r1, r7, #6
 8000264:	f04f 33ff 	mov.w	r3, #4294967295
 8000268:	2201      	movs	r2, #1
 800026a:	4807      	ldr	r0, [pc, #28]	; (8000288 <writeRegister+0x5c>)
 800026c:	f001 fd1b 	bl	8001ca6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000270:	2201      	movs	r2, #1
 8000272:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000276:	4803      	ldr	r0, [pc, #12]	; (8000284 <writeRegister+0x58>)
 8000278:	f000 fe16 	bl	8000ea8 <HAL_GPIO_WritePin>

}
 800027c:	bf00      	nop
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	48000800 	.word	0x48000800
 8000288:	20000028 	.word	0x20000028

0800028c <at86rf233_init>:

void at86rf233_init(){
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0


	//hardware_reset();
	HAL_GPIO_WritePin(SLP_GPIO_Port, SLP_Pin, GPIO_PIN_RESET);
 8000292:	2200      	movs	r2, #0
 8000294:	2140      	movs	r1, #64	; 0x40
 8000296:	4846      	ldr	r0, [pc, #280]	; (80003b0 <at86rf233_init+0x124>)
 8000298:	f000 fe06 	bl	8000ea8 <HAL_GPIO_WritePin>
	//digitalWrite(SLP_TR, LOW);
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 800029c:	2201      	movs	r2, #1
 800029e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a2:	4843      	ldr	r0, [pc, #268]	; (80003b0 <at86rf233_init+0x124>)
 80002a4:	f000 fe00 	bl	8000ea8 <HAL_GPIO_WritePin>
	//digitalWrite(RESET, HIGH);
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002ae:	4841      	ldr	r0, [pc, #260]	; (80003b4 <at86rf233_init+0x128>)
 80002b0:	f000 fdfa 	bl	8000ea8 <HAL_GPIO_WritePin>

	//

	//

	writeRegister(0x08, 0x0B); //Channel: 2405 MHz
 80002b4:	210b      	movs	r1, #11
 80002b6:	2008      	movs	r0, #8
 80002b8:	f7ff ffb8 	bl	800022c <writeRegister>

	  // Enable promiscuous mode:
	writeRegister(0x20, 0x12); //Short address bit[7:0]
 80002bc:	2112      	movs	r1, #18
 80002be:	2020      	movs	r0, #32
 80002c0:	f7ff ffb4 	bl	800022c <writeRegister>
	writeRegister(0x21, 0x34); //Short address bit[15:8]
 80002c4:	2134      	movs	r1, #52	; 0x34
 80002c6:	2021      	movs	r0, #33	; 0x21
 80002c8:	f7ff ffb0 	bl	800022c <writeRegister>
	writeRegister(0x22, 0x10); //PAN ID bit[7:0]
 80002cc:	2110      	movs	r1, #16
 80002ce:	2022      	movs	r0, #34	; 0x22
 80002d0:	f7ff ffac 	bl	800022c <writeRegister>
	writeRegister(0x23, 0x20); //PAN ID bit[15:8]
 80002d4:	2120      	movs	r1, #32
 80002d6:	2023      	movs	r0, #35	; 0x23
 80002d8:	f7ff ffa8 	bl	800022c <writeRegister>
	writeRegister(0x24, 0x30); //IEEE_ADDR_0
 80002dc:	2130      	movs	r1, #48	; 0x30
 80002de:	2024      	movs	r0, #36	; 0x24
 80002e0:	f7ff ffa4 	bl	800022c <writeRegister>
	writeRegister(0x25, 0x40); //IEEE_ADDR_1
 80002e4:	2140      	movs	r1, #64	; 0x40
 80002e6:	2025      	movs	r0, #37	; 0x25
 80002e8:	f7ff ffa0 	bl	800022c <writeRegister>
	writeRegister(0x26, 0x50); //IEEE_ADDR_2
 80002ec:	2150      	movs	r1, #80	; 0x50
 80002ee:	2026      	movs	r0, #38	; 0x26
 80002f0:	f7ff ff9c 	bl	800022c <writeRegister>
	writeRegister(0x27, 0x60); //IEEE_ADDR_3
 80002f4:	2160      	movs	r1, #96	; 0x60
 80002f6:	2027      	movs	r0, #39	; 0x27
 80002f8:	f7ff ff98 	bl	800022c <writeRegister>
	writeRegister(0x28, 0x70); //IEEE_ADDR_4
 80002fc:	2170      	movs	r1, #112	; 0x70
 80002fe:	2028      	movs	r0, #40	; 0x28
 8000300:	f7ff ff94 	bl	800022c <writeRegister>
	writeRegister(0x29, 0x80); //IEEE_ADDR_5
 8000304:	2180      	movs	r1, #128	; 0x80
 8000306:	2029      	movs	r0, #41	; 0x29
 8000308:	f7ff ff90 	bl	800022c <writeRegister>
	writeRegister(0x2A, 0x90); //IEEE_ADDR_6
 800030c:	2190      	movs	r1, #144	; 0x90
 800030e:	202a      	movs	r0, #42	; 0x2a
 8000310:	f7ff ff8c 	bl	800022c <writeRegister>
	writeRegister(0x2B, 0x22); //IEEE_ADDR_7
 8000314:	2122      	movs	r1, #34	; 0x22
 8000316:	202b      	movs	r0, #43	; 0x2b
 8000318:	f7ff ff88 	bl	800022c <writeRegister>
	writeRegister(0x05, 0x0); // tx power
 800031c:	2100      	movs	r1, #0
 800031e:	2005      	movs	r0, #5
 8000320:	f7ff ff84 	bl	800022c <writeRegister>

	uint8_t val = readRegister(0x04); //TX_AUTO_CRC_ON_1
 8000324:	2004      	movs	r0, #4
 8000326:	f7ff ff4f 	bl	80001c8 <readRegister>
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
		val = val | 0b10000;
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	f043 0310 	orr.w	r3, r3, #16
 8000334:	71fb      	strb	r3, [r7, #7]
		writeRegister(0x04, val);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	4619      	mov	r1, r3
 800033a:	2004      	movs	r0, #4
 800033c:	f7ff ff76 	bl	800022c <writeRegister>

		val = readRegister(0x2C); //MAX_FRAME_RETRIES, MAX_CSMA_RETRIES
 8000340:	202c      	movs	r0, #44	; 0x2c
 8000342:	f7ff ff41 	bl	80001c8 <readRegister>
 8000346:	4603      	mov	r3, r0
 8000348:	71fb      	strb	r3, [r7, #7]
		val = val | 0b110110;
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	f043 0336 	orr.w	r3, r3, #54	; 0x36
 8000350:	71fb      	strb	r3, [r7, #7]
		writeRegister(0x2C, val);
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	4619      	mov	r1, r3
 8000356:	202c      	movs	r0, #44	; 0x2c
 8000358:	f7ff ff68 	bl	800022c <writeRegister>


		writeRegister(0x2C, 0xEA);//CSMA_SEED
 800035c:	21ea      	movs	r1, #234	; 0xea
 800035e:	202c      	movs	r0, #44	; 0x2c
 8000360:	f7ff ff64 	bl	800022c <writeRegister>
		val = readRegister(0x2E);
 8000364:	202e      	movs	r0, #46	; 0x2e
 8000366:	f7ff ff2f 	bl	80001c8 <readRegister>
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
		val = val | 0b110;
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	f043 0306 	orr.w	r3, r3, #6
 8000374:	71fb      	strb	r3, [r7, #7]
		writeRegister(0x2E, val);
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	4619      	mov	r1, r3
 800037a:	202e      	movs	r0, #46	; 0x2e
 800037c:	f7ff ff56 	bl	800022c <writeRegister>

		//max min be
		val = readRegister(0x2F);
 8000380:	202f      	movs	r0, #47	; 0x2f
 8000382:	f7ff ff21 	bl	80001c8 <readRegister>
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
		val = val | 0b110001;
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 8000390:	71fb      	strb	r3, [r7, #7]
		writeRegister(0x2F, val);
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	4619      	mov	r1, r3
 8000396:	202f      	movs	r0, #47	; 0x2f
 8000398:	f7ff ff48 	bl	800022c <writeRegister>


		readRegister(0x1C);
 800039c:	201c      	movs	r0, #28
 800039e:	f7ff ff13 	bl	80001c8 <readRegister>
	  //Serial.print("Detected part nr: 0x");
	  //Serial.println(readRegister(0x1C), HEX);
	  //Serial.print("Version: 0x");
	  //Serial.println(readRegister(0x1D), HEX);

	HAL_Delay(1);
 80003a2:	2001      	movs	r0, #1
 80003a4:	f000 facc 	bl	8000940 <HAL_Delay>
}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	48000400 	.word	0x48000400
 80003b4:	48000800 	.word	0x48000800

080003b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
int main(void)
 80003be:	f107 0318 	add.w	r3, r7, #24
 80003c2:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c4:	f000 fa47 	bl	8000856 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c8:	f000 f82c 	bl	8000424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003cc:	f000 f8ae 	bl	800052c <MX_GPIO_Init>
  MX_SPI3_Init();
 80003d0:	f000 f86e 	bl	80004b0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  at86rf233_init();
 80003d4:	f7ff ff5a 	bl	800028c <at86rf233_init>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80003d8:	2180      	movs	r1, #128	; 0x80
 80003da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003de:	f000 fd7b 	bl	8000ed8 <HAL_GPIO_TogglePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //writeRegister(0x02,0x02);
	  //send("bla", sizeof("bla"));
	  uint8_t CurrentState = readRegister(0x01); //Page 37 of datasheet
 80003e2:	2001      	movs	r0, #1
 80003e4:	f7ff fef0 	bl	80001c8 <readRegister>
 80003e8:	4603      	mov	r3, r0
 80003ea:	73fb      	strb	r3, [r7, #15]
	  uint8_t Interrupt = readRegister(0x0F);
 80003ec:	200f      	movs	r0, #15
 80003ee:	f7ff feeb 	bl	80001c8 <readRegister>
 80003f2:	4603      	mov	r3, r0
 80003f4:	73bb      	strb	r3, [r7, #14]
	  uint8_t PHY_RSSI = readRegister(0x06); //if bit[7] = 1 (RX_CRC_VALID), FCS is valid
 80003f6:	2006      	movs	r0, #6
 80003f8:	f7ff fee6 	bl	80001c8 <readRegister>
 80003fc:	4603      	mov	r3, r0
 80003fe:	737b      	strb	r3, [r7, #13]

	  uint8_t irq_mask = readRegister(AT86RF2XX_REG__IRQ_STATUS);
 8000400:	200f      	movs	r0, #15
 8000402:	f7ff fee1 	bl	80001c8 <readRegister>
 8000406:	4603      	mov	r3, r0
 8000408:	733b      	strb	r3, [r7, #12]

	  if (irq_mask & AT86RF2XX_IRQ_STATUS_MASK__RX_START){
 800040a:	7b3b      	ldrb	r3, [r7, #12]
 800040c:	f003 0304 	and.w	r3, r3, #4
 8000410:	2b00      	cmp	r3, #0
 8000412:	d0e6      	beq.n	80003e2 <main+0x2a>
		  	uint8_t test = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	72fb      	strb	r3, [r7, #11]
		  	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041e:	f000 fd5b 	bl	8000ed8 <HAL_GPIO_TogglePin>
  {
 8000422:	e7de      	b.n	80003e2 <main+0x2a>

08000424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b096      	sub	sp, #88	; 0x58
 8000428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042a:	f107 0314 	add.w	r3, r7, #20
 800042e:	2244      	movs	r2, #68	; 0x44
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f002 fac8 	bl	80029c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000438:	463b      	mov	r3, r7
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
 8000444:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000446:	f44f 7000 	mov.w	r0, #512	; 0x200
 800044a:	f000 fd6d 	bl	8000f28 <HAL_PWREx_ControlVoltageScaling>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000454:	f000 f8f0 	bl	8000638 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000458:	2310      	movs	r3, #16
 800045a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800045c:	2301      	movs	r3, #1
 800045e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000464:	2360      	movs	r3, #96	; 0x60
 8000466:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000468:	2300      	movs	r3, #0
 800046a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	4618      	mov	r0, r3
 8000472:	f000 fdaf 	bl	8000fd4 <HAL_RCC_OscConfig>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800047c:	f000 f8dc 	bl	8000638 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000480:	230f      	movs	r3, #15
 8000482:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000484:	2300      	movs	r3, #0
 8000486:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000494:	463b      	mov	r3, r7
 8000496:	2100      	movs	r1, #0
 8000498:	4618      	mov	r0, r3
 800049a:	f001 f975 	bl	8001788 <HAL_RCC_ClockConfig>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80004a4:	f000 f8c8 	bl	8000638 <Error_Handler>
  }
}
 80004a8:	bf00      	nop
 80004aa:	3758      	adds	r7, #88	; 0x58
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80004b4:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <MX_SPI3_Init+0x74>)
 80004b6:	4a1c      	ldr	r2, [pc, #112]	; (8000528 <MX_SPI3_Init+0x78>)
 80004b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80004ba:	4b1a      	ldr	r3, [pc, #104]	; (8000524 <MX_SPI3_Init+0x74>)
 80004bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80004c2:	4b18      	ldr	r3, [pc, #96]	; (8000524 <MX_SPI3_Init+0x74>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80004c8:	4b16      	ldr	r3, [pc, #88]	; (8000524 <MX_SPI3_Init+0x74>)
 80004ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80004ce:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004d0:	4b14      	ldr	r3, [pc, #80]	; (8000524 <MX_SPI3_Init+0x74>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004d6:	4b13      	ldr	r3, [pc, #76]	; (8000524 <MX_SPI3_Init+0x74>)
 80004d8:	2200      	movs	r2, #0
 80004da:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <MX_SPI3_Init+0x74>)
 80004de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004e2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MX_SPI3_Init+0x74>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <MX_SPI3_Init+0x74>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_SPI3_Init+0x74>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <MX_SPI3_Init+0x74>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MX_SPI3_Init+0x74>)
 80004fe:	2207      	movs	r2, #7
 8000500:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <MX_SPI3_Init+0x74>)
 8000504:	2200      	movs	r2, #0
 8000506:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MX_SPI3_Init+0x74>)
 800050a:	2208      	movs	r2, #8
 800050c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_SPI3_Init+0x74>)
 8000510:	f001 fb26 	bl	8001b60 <HAL_SPI_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800051a:	f000 f88d 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000028 	.word	0x20000028
 8000528:	40003c00 	.word	0x40003c00

0800052c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b088      	sub	sp, #32
 8000530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b3a      	ldr	r3, [pc, #232]	; (800062c <MX_GPIO_Init+0x100>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	4a39      	ldr	r2, [pc, #228]	; (800062c <MX_GPIO_Init+0x100>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054e:	4b37      	ldr	r3, [pc, #220]	; (800062c <MX_GPIO_Init+0x100>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055a:	4b34      	ldr	r3, [pc, #208]	; (800062c <MX_GPIO_Init+0x100>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	4a33      	ldr	r2, [pc, #204]	; (800062c <MX_GPIO_Init+0x100>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000566:	4b31      	ldr	r3, [pc, #196]	; (800062c <MX_GPIO_Init+0x100>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	4b2e      	ldr	r3, [pc, #184]	; (800062c <MX_GPIO_Init+0x100>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	4a2d      	ldr	r2, [pc, #180]	; (800062c <MX_GPIO_Init+0x100>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057e:	4b2b      	ldr	r3, [pc, #172]	; (800062c <MX_GPIO_Init+0x100>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f000 fc89 	bl	8000ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800059c:	4824      	ldr	r0, [pc, #144]	; (8000630 <MX_GPIO_Init+0x104>)
 800059e:	f000 fc83 	bl	8000ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SLP_Pin|RESET_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80005a8:	4822      	ldr	r0, [pc, #136]	; (8000634 <MX_GPIO_Init+0x108>)
 80005aa:	f000 fc7d 	bl	8000ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005ae:	2380      	movs	r3, #128	; 0x80
 80005b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4619      	mov	r1, r3
 80005c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c8:	f000 fac4 	bl	8000b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80005cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	4619      	mov	r1, r3
 80005e0:	4813      	ldr	r0, [pc, #76]	; (8000630 <MX_GPIO_Init+0x104>)
 80005e2:	f000 fab7 	bl	8000b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80005e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	2301      	movs	r3, #1
 80005ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	4619      	mov	r1, r3
 80005fe:	480c      	ldr	r0, [pc, #48]	; (8000630 <MX_GPIO_Init+0x104>)
 8000600:	f000 faa8 	bl	8000b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SLP_Pin RESET_Pin */
  GPIO_InitStruct.Pin = SLP_Pin|RESET_Pin;
 8000604:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060a:	2301      	movs	r3, #1
 800060c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2300      	movs	r3, #0
 8000614:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	4619      	mov	r1, r3
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_GPIO_Init+0x108>)
 800061e:	f000 fa99 	bl	8000b54 <HAL_GPIO_Init>

}
 8000622:	bf00      	nop
 8000624:	3720      	adds	r7, #32
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000
 8000630:	48000800 	.word	0x48000800
 8000634:	48000400 	.word	0x48000400

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000640:	e7fe      	b.n	8000640 <Error_Handler+0x8>
	...

08000644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <HAL_MspInit+0x44>)
 800064c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800064e:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <HAL_MspInit+0x44>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6613      	str	r3, [r2, #96]	; 0x60
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <HAL_MspInit+0x44>)
 8000658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <HAL_MspInit+0x44>)
 8000664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000666:	4a08      	ldr	r2, [pc, #32]	; (8000688 <HAL_MspInit+0x44>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066c:	6593      	str	r3, [r2, #88]	; 0x58
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_MspInit+0x44>)
 8000670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000

0800068c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a34      	ldr	r2, [pc, #208]	; (800077c <HAL_SPI_MspInit+0xf0>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d162      	bne.n	8000774 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80006ae:	4b34      	ldr	r3, [pc, #208]	; (8000780 <HAL_SPI_MspInit+0xf4>)
 80006b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006b2:	4a33      	ldr	r2, [pc, #204]	; (8000780 <HAL_SPI_MspInit+0xf4>)
 80006b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006b8:	6593      	str	r3, [r2, #88]	; 0x58
 80006ba:	4b31      	ldr	r3, [pc, #196]	; (8000780 <HAL_SPI_MspInit+0xf4>)
 80006bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006c2:	61bb      	str	r3, [r7, #24]
 80006c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <HAL_SPI_MspInit+0xf4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4a2d      	ldr	r2, [pc, #180]	; (8000780 <HAL_SPI_MspInit+0xf4>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <HAL_SPI_MspInit+0xf4>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <HAL_SPI_MspInit+0xf4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	4a27      	ldr	r2, [pc, #156]	; (8000780 <HAL_SPI_MspInit+0xf4>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ea:	4b25      	ldr	r3, [pc, #148]	; (8000780 <HAL_SPI_MspInit+0xf4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b22      	ldr	r3, [pc, #136]	; (8000780 <HAL_SPI_MspInit+0xf4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a21      	ldr	r2, [pc, #132]	; (8000780 <HAL_SPI_MspInit+0xf4>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <HAL_SPI_MspInit+0xf4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
    PA15 (JTDI)     ------> SPI3_NSS
    PC12     ------> SPI3_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800070e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000720:	2306      	movs	r3, #6
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072e:	f000 fa11 	bl	8000b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000744:	2306      	movs	r3, #6
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4619      	mov	r1, r3
 800074e:	480d      	ldr	r0, [pc, #52]	; (8000784 <HAL_SPI_MspInit+0xf8>)
 8000750:	f000 fa00 	bl	8000b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000754:	2318      	movs	r3, #24
 8000756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000760:	2303      	movs	r3, #3
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000764:	2306      	movs	r3, #6
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	4806      	ldr	r0, [pc, #24]	; (8000788 <HAL_SPI_MspInit+0xfc>)
 8000770:	f000 f9f0 	bl	8000b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000774:	bf00      	nop
 8000776:	3730      	adds	r7, #48	; 0x30
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40003c00 	.word	0x40003c00
 8000780:	40021000 	.word	0x40021000
 8000784:	48000800 	.word	0x48000800
 8000788:	48000400 	.word	0x48000400

0800078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <NMI_Handler+0x4>

08000792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <HardFault_Handler+0x4>

08000798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <MemManage_Handler+0x4>

0800079e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <BusFault_Handler+0x4>

080007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <UsageFault_Handler+0x4>

080007aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d8:	f000 f892 	bl	8000900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <SystemInit+0x20>)
 80007e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ea:	4a05      	ldr	r2, [pc, #20]	; (8000800 <SystemInit+0x20>)
 80007ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800083c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000808:	f7ff ffea 	bl	80007e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <LoopForever+0x6>)
  ldr r1, =_edata
 800080e:	490d      	ldr	r1, [pc, #52]	; (8000844 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <LoopForever+0xe>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000814:	e002      	b.n	800081c <LoopCopyDataInit>

08000816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081a:	3304      	adds	r3, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800081c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000820:	d3f9      	bcc.n	8000816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000824:	4c0a      	ldr	r4, [pc, #40]	; (8000850 <LoopForever+0x16>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000828:	e001      	b.n	800082e <LoopFillZerobss>

0800082a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082c:	3204      	adds	r2, #4

0800082e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000830:	d3fb      	bcc.n	800082a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000832:	f002 f8a5 	bl	8002980 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000836:	f7ff fdbf 	bl	80003b8 <main>

0800083a <LoopForever>:

LoopForever:
    b LoopForever
 800083a:	e7fe      	b.n	800083a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800083c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000844:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000848:	08002a38 	.word	0x08002a38
  ldr r2, =_sbss
 800084c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000850:	20000090 	.word	0x20000090

08000854 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000854:	e7fe      	b.n	8000854 <ADC1_2_IRQHandler>

08000856 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800085c:	2300      	movs	r3, #0
 800085e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000860:	2003      	movs	r0, #3
 8000862:	f000 f943 	bl	8000aec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000866:	200f      	movs	r0, #15
 8000868:	f000 f80e 	bl	8000888 <HAL_InitTick>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d002      	beq.n	8000878 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	e001      	b.n	800087c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000878:	f7ff fee4 	bl	8000644 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800087c:	79fb      	ldrb	r3, [r7, #7]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000890:	2300      	movs	r3, #0
 8000892:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_InitTick+0x6c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d023      	beq.n	80008e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <HAL_InitTick+0x70>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_InitTick+0x6c>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f941 	bl	8000b3a <HAL_SYSTICK_Config>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d10f      	bne.n	80008de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d809      	bhi.n	80008d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c4:	2200      	movs	r2, #0
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f000 f919 	bl	8000b02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d0:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <HAL_InitTick+0x74>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
 80008d6:	e007      	b.n	80008e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008d8:	2301      	movs	r3, #1
 80008da:	73fb      	strb	r3, [r7, #15]
 80008dc:	e004      	b.n	80008e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	73fb      	strb	r3, [r7, #15]
 80008e2:	e001      	b.n	80008e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008e4:	2301      	movs	r3, #1
 80008e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000004 	.word	0x20000004

08000900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_IncTick+0x20>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_IncTick+0x24>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4413      	add	r3, r2
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <HAL_IncTick+0x24>)
 8000912:	6013      	str	r3, [r2, #0]
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000008 	.word	0x20000008
 8000924:	2000008c 	.word	0x2000008c

08000928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return uwTick;
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <HAL_GetTick+0x14>)
 800092e:	681b      	ldr	r3, [r3, #0]
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	2000008c 	.word	0x2000008c

08000940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000948:	f7ff ffee 	bl	8000928 <HAL_GetTick>
 800094c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000958:	d005      	beq.n	8000966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_Delay+0x44>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	461a      	mov	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	4413      	add	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000966:	bf00      	nop
 8000968:	f7ff ffde 	bl	8000928 <HAL_GetTick>
 800096c:	4602      	mov	r2, r0
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	429a      	cmp	r2, r3
 8000976:	d8f7      	bhi.n	8000968 <HAL_Delay+0x28>
  {
  }
}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000008 	.word	0x20000008

08000988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a4:	4013      	ands	r3, r2
 80009a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ba:	4a04      	ldr	r2, [pc, #16]	; (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	60d3      	str	r3, [r2, #12]
}
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <__NVIC_GetPriorityGrouping+0x18>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	0a1b      	lsrs	r3, r3, #8
 80009da:	f003 0307 	and.w	r3, r3, #7
}
 80009de:	4618      	mov	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	6039      	str	r1, [r7, #0]
 80009f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	db0a      	blt.n	8000a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	490c      	ldr	r1, [pc, #48]	; (8000a38 <__NVIC_SetPriority+0x4c>)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	0112      	lsls	r2, r2, #4
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	440b      	add	r3, r1
 8000a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a14:	e00a      	b.n	8000a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4908      	ldr	r1, [pc, #32]	; (8000a3c <__NVIC_SetPriority+0x50>)
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	f003 030f 	and.w	r3, r3, #15
 8000a22:	3b04      	subs	r3, #4
 8000a24:	0112      	lsls	r2, r2, #4
 8000a26:	b2d2      	uxtb	r2, r2
 8000a28:	440b      	add	r3, r1
 8000a2a:	761a      	strb	r2, [r3, #24]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000e100 	.word	0xe000e100
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b089      	sub	sp, #36	; 0x24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	f1c3 0307 	rsb	r3, r3, #7
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	bf28      	it	cs
 8000a5e:	2304      	movcs	r3, #4
 8000a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3304      	adds	r3, #4
 8000a66:	2b06      	cmp	r3, #6
 8000a68:	d902      	bls.n	8000a70 <NVIC_EncodePriority+0x30>
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3b03      	subs	r3, #3
 8000a6e:	e000      	b.n	8000a72 <NVIC_EncodePriority+0x32>
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	f04f 32ff 	mov.w	r2, #4294967295
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43da      	mvns	r2, r3
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	401a      	ands	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a88:	f04f 31ff 	mov.w	r1, #4294967295
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a92:	43d9      	mvns	r1, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	4313      	orrs	r3, r2
         );
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3724      	adds	r7, #36	; 0x24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab8:	d301      	bcc.n	8000abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00f      	b.n	8000ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <SysTick_Config+0x40>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac6:	210f      	movs	r1, #15
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f7ff ff8e 	bl	80009ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <SysTick_Config+0x40>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad6:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <SysTick_Config+0x40>)
 8000ad8:	2207      	movs	r2, #7
 8000ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	e000e010 	.word	0xe000e010

08000aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ff47 	bl	8000988 <__NVIC_SetPriorityGrouping>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b086      	sub	sp, #24
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b14:	f7ff ff5c 	bl	80009d0 <__NVIC_GetPriorityGrouping>
 8000b18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	68b9      	ldr	r1, [r7, #8]
 8000b1e:	6978      	ldr	r0, [r7, #20]
 8000b20:	f7ff ff8e 	bl	8000a40 <NVIC_EncodePriority>
 8000b24:	4602      	mov	r2, r0
 8000b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff5d 	bl	80009ec <__NVIC_SetPriority>
}
 8000b32:	bf00      	nop
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ffb0 	bl	8000aa8 <SysTick_Config>
 8000b48:	4603      	mov	r3, r0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b087      	sub	sp, #28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b62:	e17f      	b.n	8000e64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	2101      	movs	r1, #1
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b70:	4013      	ands	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f000 8171 	beq.w	8000e5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f003 0303 	and.w	r3, r3, #3
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d005      	beq.n	8000b94 <HAL_GPIO_Init+0x40>
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d130      	bne.n	8000bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	68da      	ldr	r2, [r3, #12]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bca:	2201      	movs	r2, #1
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	091b      	lsrs	r3, r3, #4
 8000be0:	f003 0201 	and.w	r2, r3, #1
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 0303 	and.w	r3, r3, #3
 8000bfe:	2b03      	cmp	r3, #3
 8000c00:	d118      	bne.n	8000c34 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c08:	2201      	movs	r2, #1
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	08db      	lsrs	r3, r3, #3
 8000c1e:	f003 0201 	and.w	r2, r3, #1
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	2b03      	cmp	r3, #3
 8000c3e:	d017      	beq.n	8000c70 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d123      	bne.n	8000cc4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	08da      	lsrs	r2, r3, #3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3208      	adds	r2, #8
 8000c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	f003 0307 	and.w	r3, r3, #7
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	220f      	movs	r2, #15
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	691a      	ldr	r2, [r3, #16]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	08da      	lsrs	r2, r3, #3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3208      	adds	r2, #8
 8000cbe:	6939      	ldr	r1, [r7, #16]
 8000cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	2203      	movs	r2, #3
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0203 	and.w	r2, r3, #3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f000 80ac 	beq.w	8000e5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	4b5f      	ldr	r3, [pc, #380]	; (8000e84 <HAL_GPIO_Init+0x330>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0a:	4a5e      	ldr	r2, [pc, #376]	; (8000e84 <HAL_GPIO_Init+0x330>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6613      	str	r3, [r2, #96]	; 0x60
 8000d12:	4b5c      	ldr	r3, [pc, #368]	; (8000e84 <HAL_GPIO_Init+0x330>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d1e:	4a5a      	ldr	r2, [pc, #360]	; (8000e88 <HAL_GPIO_Init+0x334>)
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	089b      	lsrs	r3, r3, #2
 8000d24:	3302      	adds	r3, #2
 8000d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	220f      	movs	r2, #15
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d48:	d025      	beq.n	8000d96 <HAL_GPIO_Init+0x242>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a4f      	ldr	r2, [pc, #316]	; (8000e8c <HAL_GPIO_Init+0x338>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d01f      	beq.n	8000d92 <HAL_GPIO_Init+0x23e>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a4e      	ldr	r2, [pc, #312]	; (8000e90 <HAL_GPIO_Init+0x33c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d019      	beq.n	8000d8e <HAL_GPIO_Init+0x23a>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a4d      	ldr	r2, [pc, #308]	; (8000e94 <HAL_GPIO_Init+0x340>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d013      	beq.n	8000d8a <HAL_GPIO_Init+0x236>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a4c      	ldr	r2, [pc, #304]	; (8000e98 <HAL_GPIO_Init+0x344>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d00d      	beq.n	8000d86 <HAL_GPIO_Init+0x232>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a4b      	ldr	r2, [pc, #300]	; (8000e9c <HAL_GPIO_Init+0x348>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d007      	beq.n	8000d82 <HAL_GPIO_Init+0x22e>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a4a      	ldr	r2, [pc, #296]	; (8000ea0 <HAL_GPIO_Init+0x34c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d101      	bne.n	8000d7e <HAL_GPIO_Init+0x22a>
 8000d7a:	2306      	movs	r3, #6
 8000d7c:	e00c      	b.n	8000d98 <HAL_GPIO_Init+0x244>
 8000d7e:	2307      	movs	r3, #7
 8000d80:	e00a      	b.n	8000d98 <HAL_GPIO_Init+0x244>
 8000d82:	2305      	movs	r3, #5
 8000d84:	e008      	b.n	8000d98 <HAL_GPIO_Init+0x244>
 8000d86:	2304      	movs	r3, #4
 8000d88:	e006      	b.n	8000d98 <HAL_GPIO_Init+0x244>
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e004      	b.n	8000d98 <HAL_GPIO_Init+0x244>
 8000d8e:	2302      	movs	r3, #2
 8000d90:	e002      	b.n	8000d98 <HAL_GPIO_Init+0x244>
 8000d92:	2301      	movs	r3, #1
 8000d94:	e000      	b.n	8000d98 <HAL_GPIO_Init+0x244>
 8000d96:	2300      	movs	r3, #0
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	f002 0203 	and.w	r2, r2, #3
 8000d9e:	0092      	lsls	r2, r2, #2
 8000da0:	4093      	lsls	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000da8:	4937      	ldr	r1, [pc, #220]	; (8000e88 <HAL_GPIO_Init+0x334>)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	089b      	lsrs	r3, r3, #2
 8000dae:	3302      	adds	r3, #2
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000db6:	4b3b      	ldr	r3, [pc, #236]	; (8000ea4 <HAL_GPIO_Init+0x350>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dda:	4a32      	ldr	r2, [pc, #200]	; (8000ea4 <HAL_GPIO_Init+0x350>)
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000de0:	4b30      	ldr	r3, [pc, #192]	; (8000ea4 <HAL_GPIO_Init+0x350>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	43db      	mvns	r3, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d003      	beq.n	8000e04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e04:	4a27      	ldr	r2, [pc, #156]	; (8000ea4 <HAL_GPIO_Init+0x350>)
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e0a:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <HAL_GPIO_Init+0x350>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	43db      	mvns	r3, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ea4 <HAL_GPIO_Init+0x350>)
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <HAL_GPIO_Init+0x350>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e58:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <HAL_GPIO_Init+0x350>)
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	3301      	adds	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f47f ae78 	bne.w	8000b64 <HAL_GPIO_Init+0x10>
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	371c      	adds	r7, #28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010000 	.word	0x40010000
 8000e8c:	48000400 	.word	0x48000400
 8000e90:	48000800 	.word	0x48000800
 8000e94:	48000c00 	.word	0x48000c00
 8000e98:	48001000 	.word	0x48001000
 8000e9c:	48001400 	.word	0x48001400
 8000ea0:	48001800 	.word	0x48001800
 8000ea4:	40010400 	.word	0x40010400

08000ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eb8:	787b      	ldrb	r3, [r7, #1]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ebe:	887a      	ldrh	r2, [r7, #2]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ec4:	e002      	b.n	8000ecc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ec6:	887a      	ldrh	r2, [r7, #2]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eea:	887a      	ldrh	r2, [r7, #2]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	041a      	lsls	r2, r3, #16
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43d9      	mvns	r1, r3
 8000ef6:	887b      	ldrh	r3, [r7, #2]
 8000ef8:	400b      	ands	r3, r1
 8000efa:	431a      	orrs	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	619a      	str	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40007000 	.word	0x40007000

08000f28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f36:	d130      	bne.n	8000f9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f38:	4b23      	ldr	r3, [pc, #140]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f44:	d038      	beq.n	8000fb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f46:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f4e:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f56:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2232      	movs	r2, #50	; 0x32
 8000f5c:	fb02 f303 	mul.w	r3, r2, r3
 8000f60:	4a1b      	ldr	r2, [pc, #108]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f62:	fba2 2303 	umull	r2, r3, r2, r3
 8000f66:	0c9b      	lsrs	r3, r3, #18
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f6c:	e002      	b.n	8000f74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f80:	d102      	bne.n	8000f88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1f2      	bne.n	8000f6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f94:	d110      	bne.n	8000fb8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e00f      	b.n	8000fba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fa6:	d007      	beq.n	8000fb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fb0:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40007000 	.word	0x40007000
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	431bde83 	.word	0x431bde83

08000fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e3c6      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fe6:	4ba1      	ldr	r3, [pc, #644]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 030c 	and.w	r3, r3, #12
 8000fee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ff0:	4b9e      	ldr	r3, [pc, #632]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0310 	and.w	r3, r3, #16
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 80e4 	beq.w	80011d0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d007      	beq.n	800101e <HAL_RCC_OscConfig+0x4a>
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	2b0c      	cmp	r3, #12
 8001012:	f040 808b 	bne.w	800112c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	2b01      	cmp	r3, #1
 800101a:	f040 8087 	bne.w	800112c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800101e:	4b93      	ldr	r3, [pc, #588]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d005      	beq.n	8001036 <HAL_RCC_OscConfig+0x62>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e39e      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a1a      	ldr	r2, [r3, #32]
 800103a:	4b8c      	ldr	r3, [pc, #560]	; (800126c <HAL_RCC_OscConfig+0x298>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	2b00      	cmp	r3, #0
 8001044:	d004      	beq.n	8001050 <HAL_RCC_OscConfig+0x7c>
 8001046:	4b89      	ldr	r3, [pc, #548]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800104e:	e005      	b.n	800105c <HAL_RCC_OscConfig+0x88>
 8001050:	4b86      	ldr	r3, [pc, #536]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8001052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001056:	091b      	lsrs	r3, r3, #4
 8001058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800105c:	4293      	cmp	r3, r2
 800105e:	d223      	bcs.n	80010a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fd1b 	bl	8001aa0 <RCC_SetFlashLatencyFromMSIRange>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e37f      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001074:	4b7d      	ldr	r3, [pc, #500]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a7c      	ldr	r2, [pc, #496]	; (800126c <HAL_RCC_OscConfig+0x298>)
 800107a:	f043 0308 	orr.w	r3, r3, #8
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b7a      	ldr	r3, [pc, #488]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	4977      	ldr	r1, [pc, #476]	; (800126c <HAL_RCC_OscConfig+0x298>)
 800108e:	4313      	orrs	r3, r2
 8001090:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001092:	4b76      	ldr	r3, [pc, #472]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	4972      	ldr	r1, [pc, #456]	; (800126c <HAL_RCC_OscConfig+0x298>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	604b      	str	r3, [r1, #4]
 80010a6:	e025      	b.n	80010f4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010a8:	4b70      	ldr	r3, [pc, #448]	; (800126c <HAL_RCC_OscConfig+0x298>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a6f      	ldr	r2, [pc, #444]	; (800126c <HAL_RCC_OscConfig+0x298>)
 80010ae:	f043 0308 	orr.w	r3, r3, #8
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b6d      	ldr	r3, [pc, #436]	; (800126c <HAL_RCC_OscConfig+0x298>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	496a      	ldr	r1, [pc, #424]	; (800126c <HAL_RCC_OscConfig+0x298>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010c6:	4b69      	ldr	r3, [pc, #420]	; (800126c <HAL_RCC_OscConfig+0x298>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	4965      	ldr	r1, [pc, #404]	; (800126c <HAL_RCC_OscConfig+0x298>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d109      	bne.n	80010f4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 fcdb 	bl	8001aa0 <RCC_SetFlashLatencyFromMSIRange>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e33f      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010f4:	f000 fc48 	bl	8001988 <HAL_RCC_GetSysClockFreq>
 80010f8:	4602      	mov	r2, r0
 80010fa:	4b5c      	ldr	r3, [pc, #368]	; (800126c <HAL_RCC_OscConfig+0x298>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	091b      	lsrs	r3, r3, #4
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	495a      	ldr	r1, [pc, #360]	; (8001270 <HAL_RCC_OscConfig+0x29c>)
 8001106:	5ccb      	ldrb	r3, [r1, r3]
 8001108:	f003 031f 	and.w	r3, r3, #31
 800110c:	fa22 f303 	lsr.w	r3, r2, r3
 8001110:	4a58      	ldr	r2, [pc, #352]	; (8001274 <HAL_RCC_OscConfig+0x2a0>)
 8001112:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001114:	4b58      	ldr	r3, [pc, #352]	; (8001278 <HAL_RCC_OscConfig+0x2a4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fbb5 	bl	8000888 <HAL_InitTick>
 800111e:	4603      	mov	r3, r0
 8001120:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d052      	beq.n	80011ce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	e323      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d032      	beq.n	800119a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001134:	4b4d      	ldr	r3, [pc, #308]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a4c      	ldr	r2, [pc, #304]	; (800126c <HAL_RCC_OscConfig+0x298>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001140:	f7ff fbf2 	bl	8000928 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001148:	f7ff fbee 	bl	8000928 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e30c      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800115a:	4b44      	ldr	r3, [pc, #272]	; (800126c <HAL_RCC_OscConfig+0x298>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f0      	beq.n	8001148 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001166:	4b41      	ldr	r3, [pc, #260]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a40      	ldr	r2, [pc, #256]	; (800126c <HAL_RCC_OscConfig+0x298>)
 800116c:	f043 0308 	orr.w	r3, r3, #8
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	4b3e      	ldr	r3, [pc, #248]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	493b      	ldr	r1, [pc, #236]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8001180:	4313      	orrs	r3, r2
 8001182:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001184:	4b39      	ldr	r3, [pc, #228]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	4936      	ldr	r1, [pc, #216]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8001194:	4313      	orrs	r3, r2
 8001196:	604b      	str	r3, [r1, #4]
 8001198:	e01a      	b.n	80011d0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800119a:	4b34      	ldr	r3, [pc, #208]	; (800126c <HAL_RCC_OscConfig+0x298>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a33      	ldr	r2, [pc, #204]	; (800126c <HAL_RCC_OscConfig+0x298>)
 80011a0:	f023 0301 	bic.w	r3, r3, #1
 80011a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011a6:	f7ff fbbf 	bl	8000928 <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011ae:	f7ff fbbb 	bl	8000928 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e2d9      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011c0:	4b2a      	ldr	r3, [pc, #168]	; (800126c <HAL_RCC_OscConfig+0x298>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1f0      	bne.n	80011ae <HAL_RCC_OscConfig+0x1da>
 80011cc:	e000      	b.n	80011d0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d074      	beq.n	80012c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	2b08      	cmp	r3, #8
 80011e0:	d005      	beq.n	80011ee <HAL_RCC_OscConfig+0x21a>
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	2b0c      	cmp	r3, #12
 80011e6:	d10e      	bne.n	8001206 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d10b      	bne.n	8001206 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <HAL_RCC_OscConfig+0x298>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d064      	beq.n	80012c4 <HAL_RCC_OscConfig+0x2f0>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d160      	bne.n	80012c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e2b6      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800120e:	d106      	bne.n	800121e <HAL_RCC_OscConfig+0x24a>
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a15      	ldr	r2, [pc, #84]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8001216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	e01d      	b.n	800125a <HAL_RCC_OscConfig+0x286>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001226:	d10c      	bne.n	8001242 <HAL_RCC_OscConfig+0x26e>
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <HAL_RCC_OscConfig+0x298>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0f      	ldr	r2, [pc, #60]	; (800126c <HAL_RCC_OscConfig+0x298>)
 800122e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0c      	ldr	r2, [pc, #48]	; (800126c <HAL_RCC_OscConfig+0x298>)
 800123a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	e00b      	b.n	800125a <HAL_RCC_OscConfig+0x286>
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a09      	ldr	r2, [pc, #36]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8001248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a06      	ldr	r2, [pc, #24]	; (800126c <HAL_RCC_OscConfig+0x298>)
 8001254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001258:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d01c      	beq.n	800129c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001262:	f7ff fb61 	bl	8000928 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001268:	e011      	b.n	800128e <HAL_RCC_OscConfig+0x2ba>
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000
 8001270:	080029f0 	.word	0x080029f0
 8001274:	20000000 	.word	0x20000000
 8001278:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800127c:	f7ff fb54 	bl	8000928 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b64      	cmp	r3, #100	; 0x64
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e272      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800128e:	4baf      	ldr	r3, [pc, #700]	; (800154c <HAL_RCC_OscConfig+0x578>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <HAL_RCC_OscConfig+0x2a8>
 800129a:	e014      	b.n	80012c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129c:	f7ff fb44 	bl	8000928 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a4:	f7ff fb40 	bl	8000928 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b64      	cmp	r3, #100	; 0x64
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e25e      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012b6:	4ba5      	ldr	r3, [pc, #660]	; (800154c <HAL_RCC_OscConfig+0x578>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x2d0>
 80012c2:	e000      	b.n	80012c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d060      	beq.n	8001394 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2b04      	cmp	r3, #4
 80012d6:	d005      	beq.n	80012e4 <HAL_RCC_OscConfig+0x310>
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2b0c      	cmp	r3, #12
 80012dc:	d119      	bne.n	8001312 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d116      	bne.n	8001312 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012e4:	4b99      	ldr	r3, [pc, #612]	; (800154c <HAL_RCC_OscConfig+0x578>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_RCC_OscConfig+0x328>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e23b      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fc:	4b93      	ldr	r3, [pc, #588]	; (800154c <HAL_RCC_OscConfig+0x578>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	061b      	lsls	r3, r3, #24
 800130a:	4990      	ldr	r1, [pc, #576]	; (800154c <HAL_RCC_OscConfig+0x578>)
 800130c:	4313      	orrs	r3, r2
 800130e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001310:	e040      	b.n	8001394 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d023      	beq.n	8001362 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800131a:	4b8c      	ldr	r3, [pc, #560]	; (800154c <HAL_RCC_OscConfig+0x578>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a8b      	ldr	r2, [pc, #556]	; (800154c <HAL_RCC_OscConfig+0x578>)
 8001320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001326:	f7ff faff 	bl	8000928 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800132e:	f7ff fafb 	bl	8000928 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e219      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001340:	4b82      	ldr	r3, [pc, #520]	; (800154c <HAL_RCC_OscConfig+0x578>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134c:	4b7f      	ldr	r3, [pc, #508]	; (800154c <HAL_RCC_OscConfig+0x578>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	061b      	lsls	r3, r3, #24
 800135a:	497c      	ldr	r1, [pc, #496]	; (800154c <HAL_RCC_OscConfig+0x578>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
 8001360:	e018      	b.n	8001394 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001362:	4b7a      	ldr	r3, [pc, #488]	; (800154c <HAL_RCC_OscConfig+0x578>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a79      	ldr	r2, [pc, #484]	; (800154c <HAL_RCC_OscConfig+0x578>)
 8001368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800136c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136e:	f7ff fadb 	bl	8000928 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001376:	f7ff fad7 	bl	8000928 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e1f5      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001388:	4b70      	ldr	r3, [pc, #448]	; (800154c <HAL_RCC_OscConfig+0x578>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f0      	bne.n	8001376 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	2b00      	cmp	r3, #0
 800139e:	d03c      	beq.n	800141a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d01c      	beq.n	80013e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013a8:	4b68      	ldr	r3, [pc, #416]	; (800154c <HAL_RCC_OscConfig+0x578>)
 80013aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ae:	4a67      	ldr	r2, [pc, #412]	; (800154c <HAL_RCC_OscConfig+0x578>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b8:	f7ff fab6 	bl	8000928 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c0:	f7ff fab2 	bl	8000928 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e1d0      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013d2:	4b5e      	ldr	r3, [pc, #376]	; (800154c <HAL_RCC_OscConfig+0x578>)
 80013d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0ef      	beq.n	80013c0 <HAL_RCC_OscConfig+0x3ec>
 80013e0:	e01b      	b.n	800141a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013e2:	4b5a      	ldr	r3, [pc, #360]	; (800154c <HAL_RCC_OscConfig+0x578>)
 80013e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013e8:	4a58      	ldr	r2, [pc, #352]	; (800154c <HAL_RCC_OscConfig+0x578>)
 80013ea:	f023 0301 	bic.w	r3, r3, #1
 80013ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f2:	f7ff fa99 	bl	8000928 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013fa:	f7ff fa95 	bl	8000928 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e1b3      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800140c:	4b4f      	ldr	r3, [pc, #316]	; (800154c <HAL_RCC_OscConfig+0x578>)
 800140e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1ef      	bne.n	80013fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 80a6 	beq.w	8001574 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001428:	2300      	movs	r3, #0
 800142a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800142c:	4b47      	ldr	r3, [pc, #284]	; (800154c <HAL_RCC_OscConfig+0x578>)
 800142e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d10d      	bne.n	8001454 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001438:	4b44      	ldr	r3, [pc, #272]	; (800154c <HAL_RCC_OscConfig+0x578>)
 800143a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143c:	4a43      	ldr	r2, [pc, #268]	; (800154c <HAL_RCC_OscConfig+0x578>)
 800143e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001442:	6593      	str	r3, [r2, #88]	; 0x58
 8001444:	4b41      	ldr	r3, [pc, #260]	; (800154c <HAL_RCC_OscConfig+0x578>)
 8001446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001450:	2301      	movs	r3, #1
 8001452:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001454:	4b3e      	ldr	r3, [pc, #248]	; (8001550 <HAL_RCC_OscConfig+0x57c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145c:	2b00      	cmp	r3, #0
 800145e:	d118      	bne.n	8001492 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001460:	4b3b      	ldr	r3, [pc, #236]	; (8001550 <HAL_RCC_OscConfig+0x57c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a3a      	ldr	r2, [pc, #232]	; (8001550 <HAL_RCC_OscConfig+0x57c>)
 8001466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800146c:	f7ff fa5c 	bl	8000928 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001474:	f7ff fa58 	bl	8000928 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e176      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001486:	4b32      	ldr	r3, [pc, #200]	; (8001550 <HAL_RCC_OscConfig+0x57c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d108      	bne.n	80014ac <HAL_RCC_OscConfig+0x4d8>
 800149a:	4b2c      	ldr	r3, [pc, #176]	; (800154c <HAL_RCC_OscConfig+0x578>)
 800149c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a0:	4a2a      	ldr	r2, [pc, #168]	; (800154c <HAL_RCC_OscConfig+0x578>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014aa:	e024      	b.n	80014f6 <HAL_RCC_OscConfig+0x522>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b05      	cmp	r3, #5
 80014b2:	d110      	bne.n	80014d6 <HAL_RCC_OscConfig+0x502>
 80014b4:	4b25      	ldr	r3, [pc, #148]	; (800154c <HAL_RCC_OscConfig+0x578>)
 80014b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ba:	4a24      	ldr	r2, [pc, #144]	; (800154c <HAL_RCC_OscConfig+0x578>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014c4:	4b21      	ldr	r3, [pc, #132]	; (800154c <HAL_RCC_OscConfig+0x578>)
 80014c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ca:	4a20      	ldr	r2, [pc, #128]	; (800154c <HAL_RCC_OscConfig+0x578>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014d4:	e00f      	b.n	80014f6 <HAL_RCC_OscConfig+0x522>
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_RCC_OscConfig+0x578>)
 80014d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014dc:	4a1b      	ldr	r2, [pc, #108]	; (800154c <HAL_RCC_OscConfig+0x578>)
 80014de:	f023 0301 	bic.w	r3, r3, #1
 80014e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014e6:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_RCC_OscConfig+0x578>)
 80014e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ec:	4a17      	ldr	r2, [pc, #92]	; (800154c <HAL_RCC_OscConfig+0x578>)
 80014ee:	f023 0304 	bic.w	r3, r3, #4
 80014f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d016      	beq.n	800152c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fe:	f7ff fa13 	bl	8000928 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001504:	e00a      	b.n	800151c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001506:	f7ff fa0f 	bl	8000928 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	f241 3288 	movw	r2, #5000	; 0x1388
 8001514:	4293      	cmp	r3, r2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e12b      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_RCC_OscConfig+0x578>)
 800151e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0ed      	beq.n	8001506 <HAL_RCC_OscConfig+0x532>
 800152a:	e01a      	b.n	8001562 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152c:	f7ff f9fc 	bl	8000928 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001532:	e00f      	b.n	8001554 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7ff f9f8 	bl	8000928 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001542:	4293      	cmp	r3, r2
 8001544:	d906      	bls.n	8001554 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e114      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000
 8001550:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001554:	4b89      	ldr	r3, [pc, #548]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 8001556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1e8      	bne.n	8001534 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001562:	7ffb      	ldrb	r3, [r7, #31]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d105      	bne.n	8001574 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001568:	4b84      	ldr	r3, [pc, #528]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 800156a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156c:	4a83      	ldr	r2, [pc, #524]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 800156e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001572:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 80fa 	beq.w	8001772 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001582:	2b02      	cmp	r3, #2
 8001584:	f040 80d0 	bne.w	8001728 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001588:	4b7c      	ldr	r3, [pc, #496]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f003 0203 	and.w	r2, r3, #3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001598:	429a      	cmp	r2, r3
 800159a:	d130      	bne.n	80015fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	3b01      	subs	r3, #1
 80015a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d127      	bne.n	80015fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d11f      	bne.n	80015fe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015c8:	2a07      	cmp	r2, #7
 80015ca:	bf14      	ite	ne
 80015cc:	2201      	movne	r2, #1
 80015ce:	2200      	moveq	r2, #0
 80015d0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d113      	bne.n	80015fe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e0:	085b      	lsrs	r3, r3, #1
 80015e2:	3b01      	subs	r3, #1
 80015e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d109      	bne.n	80015fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	085b      	lsrs	r3, r3, #1
 80015f6:	3b01      	subs	r3, #1
 80015f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d06e      	beq.n	80016dc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	2b0c      	cmp	r3, #12
 8001602:	d069      	beq.n	80016d8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001604:	4b5d      	ldr	r3, [pc, #372]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d105      	bne.n	800161c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001610:	4b5a      	ldr	r3, [pc, #360]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e0a9      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001620:	4b56      	ldr	r3, [pc, #344]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a55      	ldr	r2, [pc, #340]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 8001626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800162a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800162c:	f7ff f97c 	bl	8000928 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001634:	f7ff f978 	bl	8000928 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e096      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001646:	4b4d      	ldr	r3, [pc, #308]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001652:	4b4a      	ldr	r3, [pc, #296]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	4b4a      	ldr	r3, [pc, #296]	; (8001780 <HAL_RCC_OscConfig+0x7ac>)
 8001658:	4013      	ands	r3, r2
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001662:	3a01      	subs	r2, #1
 8001664:	0112      	lsls	r2, r2, #4
 8001666:	4311      	orrs	r1, r2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800166c:	0212      	lsls	r2, r2, #8
 800166e:	4311      	orrs	r1, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001674:	0852      	lsrs	r2, r2, #1
 8001676:	3a01      	subs	r2, #1
 8001678:	0552      	lsls	r2, r2, #21
 800167a:	4311      	orrs	r1, r2
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001680:	0852      	lsrs	r2, r2, #1
 8001682:	3a01      	subs	r2, #1
 8001684:	0652      	lsls	r2, r2, #25
 8001686:	4311      	orrs	r1, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800168c:	0912      	lsrs	r2, r2, #4
 800168e:	0452      	lsls	r2, r2, #17
 8001690:	430a      	orrs	r2, r1
 8001692:	493a      	ldr	r1, [pc, #232]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 8001694:	4313      	orrs	r3, r2
 8001696:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001698:	4b38      	ldr	r3, [pc, #224]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a37      	ldr	r2, [pc, #220]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 800169e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016a4:	4b35      	ldr	r3, [pc, #212]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	4a34      	ldr	r2, [pc, #208]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 80016aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016b0:	f7ff f93a 	bl	8000928 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b8:	f7ff f936 	bl	8000928 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e054      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ca:	4b2c      	ldr	r3, [pc, #176]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016d6:	e04c      	b.n	8001772 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e04b      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016dc:	4b27      	ldr	r3, [pc, #156]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d144      	bne.n	8001772 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80016e8:	4b24      	ldr	r3, [pc, #144]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a23      	ldr	r2, [pc, #140]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 80016ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4a20      	ldr	r2, [pc, #128]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 80016fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001700:	f7ff f912 	bl	8000928 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff f90e 	bl	8000928 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e02c      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x734>
 8001726:	e024      	b.n	8001772 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2b0c      	cmp	r3, #12
 800172c:	d01f      	beq.n	800176e <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 8001734:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173a:	f7ff f8f5 	bl	8000928 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001742:	f7ff f8f1 	bl	8000928 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e00f      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1f0      	bne.n	8001742 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	4905      	ldr	r1, [pc, #20]	; (800177c <HAL_RCC_OscConfig+0x7a8>)
 8001766:	4b07      	ldr	r3, [pc, #28]	; (8001784 <HAL_RCC_OscConfig+0x7b0>)
 8001768:	4013      	ands	r3, r2
 800176a:	60cb      	str	r3, [r1, #12]
 800176c:	e001      	b.n	8001772 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3720      	adds	r7, #32
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40021000 	.word	0x40021000
 8001780:	f99d808c 	.word	0xf99d808c
 8001784:	feeefffc 	.word	0xfeeefffc

08001788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0e7      	b.n	800196c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800179c:	4b75      	ldr	r3, [pc, #468]	; (8001974 <HAL_RCC_ClockConfig+0x1ec>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d910      	bls.n	80017cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b72      	ldr	r3, [pc, #456]	; (8001974 <HAL_RCC_ClockConfig+0x1ec>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 0207 	bic.w	r2, r3, #7
 80017b2:	4970      	ldr	r1, [pc, #448]	; (8001974 <HAL_RCC_ClockConfig+0x1ec>)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ba:	4b6e      	ldr	r3, [pc, #440]	; (8001974 <HAL_RCC_ClockConfig+0x1ec>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0cf      	b.n	800196c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d010      	beq.n	80017fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	4b66      	ldr	r3, [pc, #408]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d908      	bls.n	80017fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e8:	4b63      	ldr	r3, [pc, #396]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	4960      	ldr	r1, [pc, #384]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d04c      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b03      	cmp	r3, #3
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800180e:	4b5a      	ldr	r3, [pc, #360]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d121      	bne.n	800185e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e0a6      	b.n	800196c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d107      	bne.n	8001836 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001826:	4b54      	ldr	r3, [pc, #336]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d115      	bne.n	800185e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e09a      	b.n	800196c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d107      	bne.n	800184e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800183e:	4b4e      	ldr	r3, [pc, #312]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e08e      	b.n	800196c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800184e:	4b4a      	ldr	r3, [pc, #296]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e086      	b.n	800196c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800185e:	4b46      	ldr	r3, [pc, #280]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f023 0203 	bic.w	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4943      	ldr	r1, [pc, #268]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 800186c:	4313      	orrs	r3, r2
 800186e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001870:	f7ff f85a 	bl	8000928 <HAL_GetTick>
 8001874:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	e00a      	b.n	800188e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001878:	f7ff f856 	bl	8000928 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f241 3288 	movw	r2, #5000	; 0x1388
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e06e      	b.n	800196c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	4b3a      	ldr	r3, [pc, #232]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 020c 	and.w	r2, r3, #12
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	429a      	cmp	r2, r3
 800189e:	d1eb      	bne.n	8001878 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d010      	beq.n	80018ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	4b31      	ldr	r3, [pc, #196]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d208      	bcs.n	80018ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018bc:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	492b      	ldr	r1, [pc, #172]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018ce:	4b29      	ldr	r3, [pc, #164]	; (8001974 <HAL_RCC_ClockConfig+0x1ec>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d210      	bcs.n	80018fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018dc:	4b25      	ldr	r3, [pc, #148]	; (8001974 <HAL_RCC_ClockConfig+0x1ec>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 0207 	bic.w	r2, r3, #7
 80018e4:	4923      	ldr	r1, [pc, #140]	; (8001974 <HAL_RCC_ClockConfig+0x1ec>)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ec:	4b21      	ldr	r3, [pc, #132]	; (8001974 <HAL_RCC_ClockConfig+0x1ec>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d001      	beq.n	80018fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e036      	b.n	800196c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	2b00      	cmp	r3, #0
 8001908:	d008      	beq.n	800191c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800190a:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	4918      	ldr	r1, [pc, #96]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 8001918:	4313      	orrs	r3, r2
 800191a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d009      	beq.n	800193c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4910      	ldr	r1, [pc, #64]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 8001938:	4313      	orrs	r3, r2
 800193a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800193c:	f000 f824 	bl	8001988 <HAL_RCC_GetSysClockFreq>
 8001940:	4602      	mov	r2, r0
 8001942:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	f003 030f 	and.w	r3, r3, #15
 800194c:	490b      	ldr	r1, [pc, #44]	; (800197c <HAL_RCC_ClockConfig+0x1f4>)
 800194e:	5ccb      	ldrb	r3, [r1, r3]
 8001950:	f003 031f 	and.w	r3, r3, #31
 8001954:	fa22 f303 	lsr.w	r3, r2, r3
 8001958:	4a09      	ldr	r2, [pc, #36]	; (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 800195a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_RCC_ClockConfig+0x1fc>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe ff91 	bl	8000888 <HAL_InitTick>
 8001966:	4603      	mov	r3, r0
 8001968:	72fb      	strb	r3, [r7, #11]

  return status;
 800196a:	7afb      	ldrb	r3, [r7, #11]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40022000 	.word	0x40022000
 8001978:	40021000 	.word	0x40021000
 800197c:	080029f0 	.word	0x080029f0
 8001980:	20000000 	.word	0x20000000
 8001984:	20000004 	.word	0x20000004

08001988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	; 0x24
 800198c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001996:	4b3e      	ldr	r3, [pc, #248]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019a0:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x34>
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	2b0c      	cmp	r3, #12
 80019b4:	d121      	bne.n	80019fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d11e      	bne.n	80019fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019bc:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d107      	bne.n	80019d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019c8:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80019ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ce:	0a1b      	lsrs	r3, r3, #8
 80019d0:	f003 030f 	and.w	r3, r3, #15
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	e005      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019d8:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019e4:	4a2b      	ldr	r2, [pc, #172]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10d      	bne.n	8001a10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019f8:	e00a      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d102      	bne.n	8001a06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a00:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a02:	61bb      	str	r3, [r7, #24]
 8001a04:	e004      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a0c:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x114>)
 8001a0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	2b0c      	cmp	r3, #12
 8001a14:	d134      	bne.n	8001a80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a16:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d003      	beq.n	8001a2e <HAL_RCC_GetSysClockFreq+0xa6>
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d003      	beq.n	8001a34 <HAL_RCC_GetSysClockFreq+0xac>
 8001a2c:	e005      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a30:	617b      	str	r3, [r7, #20]
      break;
 8001a32:	e005      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x114>)
 8001a36:	617b      	str	r3, [r7, #20]
      break;
 8001a38:	e002      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	617b      	str	r3, [r7, #20]
      break;
 8001a3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	0a1b      	lsrs	r3, r3, #8
 8001a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	fb02 f203 	mul.w	r2, r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	0e5b      	lsrs	r3, r3, #25
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	3301      	adds	r3, #1
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a80:	69bb      	ldr	r3, [r7, #24]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3724      	adds	r7, #36	; 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000
 8001a94:	08002a00 	.word	0x08002a00
 8001a98:	00f42400 	.word	0x00f42400
 8001a9c:	007a1200 	.word	0x007a1200

08001aa0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001aac:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ab8:	f7ff fa28 	bl	8000f0c <HAL_PWREx_GetVoltageRange>
 8001abc:	6178      	str	r0, [r7, #20]
 8001abe:	e014      	b.n	8001aea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ac0:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	4a24      	ldr	r2, [pc, #144]	; (8001b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aca:	6593      	str	r3, [r2, #88]	; 0x58
 8001acc:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ad8:	f7ff fa18 	bl	8000f0c <HAL_PWREx_GetVoltageRange>
 8001adc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	4a1d      	ldr	r2, [pc, #116]	; (8001b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001af0:	d10b      	bne.n	8001b0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b80      	cmp	r3, #128	; 0x80
 8001af6:	d919      	bls.n	8001b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2ba0      	cmp	r3, #160	; 0xa0
 8001afc:	d902      	bls.n	8001b04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001afe:	2302      	movs	r3, #2
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	e013      	b.n	8001b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b04:	2301      	movs	r3, #1
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	e010      	b.n	8001b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b80      	cmp	r3, #128	; 0x80
 8001b0e:	d902      	bls.n	8001b16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b10:	2303      	movs	r3, #3
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	e00a      	b.n	8001b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b80      	cmp	r3, #128	; 0x80
 8001b1a:	d102      	bne.n	8001b22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	e004      	b.n	8001b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b70      	cmp	r3, #112	; 0x70
 8001b26:	d101      	bne.n	8001b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b28:	2301      	movs	r3, #1
 8001b2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f023 0207 	bic.w	r2, r3, #7
 8001b34:	4909      	ldr	r1, [pc, #36]	; (8001b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d001      	beq.n	8001b4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40022000 	.word	0x40022000

08001b60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e095      	b.n	8001c9e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d108      	bne.n	8001b8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b82:	d009      	beq.n	8001b98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
 8001b8a:	e005      	b.n	8001b98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7fe fd6a 	bl	800068c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001bd8:	d902      	bls.n	8001be0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	e002      	b.n	8001be6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001bee:	d007      	beq.n	8001c00 <HAL_SPI_Init+0xa0>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001bf8:	d002      	beq.n	8001c00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c42:	ea42 0103 	orr.w	r1, r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	0c1b      	lsrs	r3, r3, #16
 8001c5c:	f003 0204 	and.w	r2, r3, #4
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	f003 0310 	and.w	r3, r3, #16
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001c7c:	ea42 0103 	orr.w	r1, r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b088      	sub	sp, #32
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_SPI_Transmit+0x22>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e158      	b.n	8001f7a <HAL_SPI_Transmit+0x2d4>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cd0:	f7fe fe2a 	bl	8000928 <HAL_GetTick>
 8001cd4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d002      	beq.n	8001cec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001cea:	e13d      	b.n	8001f68 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <HAL_SPI_Transmit+0x52>
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001cfc:	e134      	b.n	8001f68 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2203      	movs	r2, #3
 8001d02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	88fa      	ldrh	r2, [r7, #6]
 8001d16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	88fa      	ldrh	r2, [r7, #6]
 8001d1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d48:	d10f      	bne.n	8001d6a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d74:	2b40      	cmp	r3, #64	; 0x40
 8001d76:	d007      	beq.n	8001d88 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d90:	d94b      	bls.n	8001e2a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <HAL_SPI_Transmit+0xfa>
 8001d9a:	8afb      	ldrh	r3, [r7, #22]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d13e      	bne.n	8001e1e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da4:	881a      	ldrh	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db0:	1c9a      	adds	r2, r3, #2
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001dc4:	e02b      	b.n	8001e1e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d112      	bne.n	8001dfa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd8:	881a      	ldrh	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de4:	1c9a      	adds	r2, r3, #2
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001df8:	e011      	b.n	8001e1e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dfa:	f7fe fd95 	bl	8000928 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d803      	bhi.n	8001e12 <HAL_SPI_Transmit+0x16c>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e10:	d102      	bne.n	8001e18 <HAL_SPI_Transmit+0x172>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d102      	bne.n	8001e1e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e1c:	e0a4      	b.n	8001f68 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1ce      	bne.n	8001dc6 <HAL_SPI_Transmit+0x120>
 8001e28:	e07c      	b.n	8001f24 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <HAL_SPI_Transmit+0x192>
 8001e32:	8afb      	ldrh	r3, [r7, #22]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d170      	bne.n	8001f1a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d912      	bls.n	8001e68 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e46:	881a      	ldrh	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e52:	1c9a      	adds	r2, r3, #2
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	3b02      	subs	r3, #2
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e66:	e058      	b.n	8001f1a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	330c      	adds	r3, #12
 8001e72:	7812      	ldrb	r2, [r2, #0]
 8001e74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001e8e:	e044      	b.n	8001f1a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d12b      	bne.n	8001ef6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d912      	bls.n	8001ece <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eac:	881a      	ldrh	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb8:	1c9a      	adds	r2, r3, #2
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	3b02      	subs	r3, #2
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ecc:	e025      	b.n	8001f1a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	330c      	adds	r3, #12
 8001ed8:	7812      	ldrb	r2, [r2, #0]
 8001eda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ef4:	e011      	b.n	8001f1a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ef6:	f7fe fd17 	bl	8000928 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d803      	bhi.n	8001f0e <HAL_SPI_Transmit+0x268>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0c:	d102      	bne.n	8001f14 <HAL_SPI_Transmit+0x26e>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d102      	bne.n	8001f1a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f18:	e026      	b.n	8001f68 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1b5      	bne.n	8001e90 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	6839      	ldr	r1, [r7, #0]
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 fce3 	bl	80028f4 <SPI_EndRxTxTransaction>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2220      	movs	r2, #32
 8001f38:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10a      	bne.n	8001f58 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	77fb      	strb	r3, [r7, #31]
 8001f64:	e000      	b.n	8001f68 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8001f66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001f78:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3720      	adds	r7, #32
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b088      	sub	sp, #32
 8001f86:	af02      	add	r7, sp, #8
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	603b      	str	r3, [r7, #0]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f9e:	d112      	bne.n	8001fc6 <HAL_SPI_Receive+0x44>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10e      	bne.n	8001fc6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2204      	movs	r2, #4
 8001fac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001fb0:	88fa      	ldrh	r2, [r7, #6]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	68b9      	ldr	r1, [r7, #8]
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 f910 	bl	80021e2 <HAL_SPI_TransmitReceive>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	e109      	b.n	80021da <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_SPI_Receive+0x52>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e102      	b.n	80021da <HAL_SPI_Receive+0x258>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fdc:	f7fe fca4 	bl	8000928 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d002      	beq.n	8001ff4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001ff2:	e0e9      	b.n	80021c8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <HAL_SPI_Receive+0x7e>
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d102      	bne.n	8002006 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002004:	e0e0      	b.n	80021c8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2204      	movs	r2, #4
 800200a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	88fa      	ldrh	r2, [r7, #6]
 800201e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	88fa      	ldrh	r2, [r7, #6]
 8002026:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002050:	d908      	bls.n	8002064 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	e007      	b.n	8002074 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002072:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800207c:	d10f      	bne.n	800209e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800208c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800209c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a8:	2b40      	cmp	r3, #64	; 0x40
 80020aa:	d007      	beq.n	80020bc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80020c4:	d867      	bhi.n	8002196 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80020c6:	e030      	b.n	800212a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d117      	bne.n	8002106 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f103 020c 	add.w	r2, r3, #12
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002104:	e011      	b.n	800212a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002106:	f7fe fc0f 	bl	8000928 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d803      	bhi.n	800211e <HAL_SPI_Receive+0x19c>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d102      	bne.n	8002124 <HAL_SPI_Receive+0x1a2>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002128:	e04e      	b.n	80021c8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002130:	b29b      	uxth	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1c8      	bne.n	80020c8 <HAL_SPI_Receive+0x146>
 8002136:	e034      	b.n	80021a2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b01      	cmp	r3, #1
 8002144:	d115      	bne.n	8002172 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	b292      	uxth	r2, r2
 8002152:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	1c9a      	adds	r2, r3, #2
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002164:	b29b      	uxth	r3, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002170:	e011      	b.n	8002196 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002172:	f7fe fbd9 	bl	8000928 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d803      	bhi.n	800218a <HAL_SPI_Receive+0x208>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d102      	bne.n	8002190 <HAL_SPI_Receive+0x20e>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002194:	e018      	b.n	80021c8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1ca      	bne.n	8002138 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	6839      	ldr	r1, [r7, #0]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fb4c 	bl	8002844 <SPI_EndRxTransaction>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2220      	movs	r2, #32
 80021b6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	75fb      	strb	r3, [r7, #23]
 80021c4:	e000      	b.n	80021c8 <HAL_SPI_Receive+0x246>
  }

error :
 80021c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80021d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b08a      	sub	sp, #40	; 0x28
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80021f0:	2301      	movs	r3, #1
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_SPI_TransmitReceive+0x26>
 8002204:	2302      	movs	r3, #2
 8002206:	e1fb      	b.n	8002600 <HAL_SPI_TransmitReceive+0x41e>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002210:	f7fe fb8a 	bl	8000928 <HAL_GetTick>
 8002214:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800221c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002224:	887b      	ldrh	r3, [r7, #2]
 8002226:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002228:	887b      	ldrh	r3, [r7, #2]
 800222a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800222c:	7efb      	ldrb	r3, [r7, #27]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d00e      	beq.n	8002250 <HAL_SPI_TransmitReceive+0x6e>
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002238:	d106      	bne.n	8002248 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d102      	bne.n	8002248 <HAL_SPI_TransmitReceive+0x66>
 8002242:	7efb      	ldrb	r3, [r7, #27]
 8002244:	2b04      	cmp	r3, #4
 8002246:	d003      	beq.n	8002250 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002248:	2302      	movs	r3, #2
 800224a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800224e:	e1cd      	b.n	80025ec <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_SPI_TransmitReceive+0x80>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <HAL_SPI_TransmitReceive+0x80>
 800225c:	887b      	ldrh	r3, [r7, #2]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d103      	bne.n	800226a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002268:	e1c0      	b.n	80025ec <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b04      	cmp	r3, #4
 8002274:	d003      	beq.n	800227e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2205      	movs	r2, #5
 800227a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	887a      	ldrh	r2, [r7, #2]
 800228e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	887a      	ldrh	r2, [r7, #2]
 8002296:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	887a      	ldrh	r2, [r7, #2]
 80022a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	887a      	ldrh	r2, [r7, #2]
 80022aa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022c0:	d802      	bhi.n	80022c8 <HAL_SPI_TransmitReceive+0xe6>
 80022c2:	8a3b      	ldrh	r3, [r7, #16]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d908      	bls.n	80022da <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	e007      	b.n	80022ea <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022e8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f4:	2b40      	cmp	r3, #64	; 0x40
 80022f6:	d007      	beq.n	8002308 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002306:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002310:	d97c      	bls.n	800240c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <HAL_SPI_TransmitReceive+0x13e>
 800231a:	8a7b      	ldrh	r3, [r7, #18]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d169      	bne.n	80023f4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002324:	881a      	ldrh	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002330:	1c9a      	adds	r2, r3, #2
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002344:	e056      	b.n	80023f4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b02      	cmp	r3, #2
 8002352:	d11b      	bne.n	800238c <HAL_SPI_TransmitReceive+0x1aa>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d016      	beq.n	800238c <HAL_SPI_TransmitReceive+0x1aa>
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	2b01      	cmp	r3, #1
 8002362:	d113      	bne.n	800238c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002368:	881a      	ldrh	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002374:	1c9a      	adds	r2, r3, #2
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b01      	cmp	r3, #1
 8002398:	d11c      	bne.n	80023d4 <HAL_SPI_TransmitReceive+0x1f2>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d016      	beq.n	80023d4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	b292      	uxth	r2, r2
 80023b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	1c9a      	adds	r2, r3, #2
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023d0:	2301      	movs	r3, #1
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80023d4:	f7fe faa8 	bl	8000928 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d807      	bhi.n	80023f4 <HAL_SPI_TransmitReceive+0x212>
 80023e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ea:	d003      	beq.n	80023f4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80023f2:	e0fb      	b.n	80025ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1a3      	bne.n	8002346 <HAL_SPI_TransmitReceive+0x164>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d19d      	bne.n	8002346 <HAL_SPI_TransmitReceive+0x164>
 800240a:	e0df      	b.n	80025cc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_SPI_TransmitReceive+0x23a>
 8002414:	8a7b      	ldrh	r3, [r7, #18]
 8002416:	2b01      	cmp	r3, #1
 8002418:	f040 80cb 	bne.w	80025b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d912      	bls.n	800244c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242a:	881a      	ldrh	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	1c9a      	adds	r2, r3, #2
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b02      	subs	r3, #2
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	87da      	strh	r2, [r3, #62]	; 0x3e
 800244a:	e0b2      	b.n	80025b2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	330c      	adds	r3, #12
 8002456:	7812      	ldrb	r2, [r2, #0]
 8002458:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002472:	e09e      	b.n	80025b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b02      	cmp	r3, #2
 8002480:	d134      	bne.n	80024ec <HAL_SPI_TransmitReceive+0x30a>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d02f      	beq.n	80024ec <HAL_SPI_TransmitReceive+0x30a>
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	2b01      	cmp	r3, #1
 8002490:	d12c      	bne.n	80024ec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b01      	cmp	r3, #1
 800249a:	d912      	bls.n	80024c2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	881a      	ldrh	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ac:	1c9a      	adds	r2, r3, #2
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	3b02      	subs	r3, #2
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024c0:	e012      	b.n	80024e8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	330c      	adds	r3, #12
 80024cc:	7812      	ldrb	r2, [r2, #0]
 80024ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d148      	bne.n	800258c <HAL_SPI_TransmitReceive+0x3aa>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d042      	beq.n	800258c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800250c:	b29b      	uxth	r3, r3
 800250e:	2b01      	cmp	r3, #1
 8002510:	d923      	bls.n	800255a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	b292      	uxth	r2, r2
 800251e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	1c9a      	adds	r2, r3, #2
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002530:	b29b      	uxth	r3, r3
 8002532:	3b02      	subs	r3, #2
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002542:	b29b      	uxth	r3, r3
 8002544:	2b01      	cmp	r3, #1
 8002546:	d81f      	bhi.n	8002588 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	e016      	b.n	8002588 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f103 020c 	add.w	r2, r3, #12
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	7812      	ldrb	r2, [r2, #0]
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002588:	2301      	movs	r3, #1
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800258c:	f7fe f9cc 	bl	8000928 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002598:	429a      	cmp	r2, r3
 800259a:	d803      	bhi.n	80025a4 <HAL_SPI_TransmitReceive+0x3c2>
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a2:	d102      	bne.n	80025aa <HAL_SPI_TransmitReceive+0x3c8>
 80025a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80025b0:	e01c      	b.n	80025ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f47f af5b 	bne.w	8002474 <HAL_SPI_TransmitReceive+0x292>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f47f af54 	bne.w	8002474 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025cc:	69fa      	ldr	r2, [r7, #28]
 80025ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f98f 	bl	80028f4 <SPI_EndRxTxTransaction>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d006      	beq.n	80025ea <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2220      	movs	r2, #32
 80025e6:	661a      	str	r2, [r3, #96]	; 0x60
 80025e8:	e000      	b.n	80025ec <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80025ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80025fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002600:	4618      	mov	r0, r3
 8002602:	3728      	adds	r7, #40	; 0x28
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	4613      	mov	r3, r2
 8002616:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002618:	f7fe f986 	bl	8000928 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	4413      	add	r3, r2
 8002626:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002628:	f7fe f97e 	bl	8000928 <HAL_GetTick>
 800262c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800262e:	4b39      	ldr	r3, [pc, #228]	; (8002714 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	015b      	lsls	r3, r3, #5
 8002634:	0d1b      	lsrs	r3, r3, #20
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800263e:	e054      	b.n	80026ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002646:	d050      	beq.n	80026ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002648:	f7fe f96e 	bl	8000928 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	69fa      	ldr	r2, [r7, #28]
 8002654:	429a      	cmp	r2, r3
 8002656:	d902      	bls.n	800265e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d13d      	bne.n	80026da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800266c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002676:	d111      	bne.n	800269c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002680:	d004      	beq.n	800268c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268a:	d107      	bne.n	800269c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800269a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a4:	d10f      	bne.n	80026c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e017      	b.n	800270a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4013      	ands	r3, r2
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	429a      	cmp	r2, r3
 8002706:	d19b      	bne.n	8002640 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3720      	adds	r7, #32
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000000 	.word	0x20000000

08002718 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08a      	sub	sp, #40	; 0x28
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800272a:	f7fe f8fd 	bl	8000928 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	4413      	add	r3, r2
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800273a:	f7fe f8f5 	bl	8000928 <HAL_GetTick>
 800273e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	330c      	adds	r3, #12
 8002746:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002748:	4b3d      	ldr	r3, [pc, #244]	; (8002840 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	00da      	lsls	r2, r3, #3
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	0d1b      	lsrs	r3, r3, #20
 8002758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002760:	e060      	b.n	8002824 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002768:	d107      	bne.n	800277a <SPI_WaitFifoStateUntilTimeout+0x62>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d104      	bne.n	800277a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002778:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d050      	beq.n	8002824 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002782:	f7fe f8d1 	bl	8000928 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278e:	429a      	cmp	r2, r3
 8002790:	d902      	bls.n	8002798 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	2b00      	cmp	r3, #0
 8002796:	d13d      	bne.n	8002814 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027b0:	d111      	bne.n	80027d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027ba:	d004      	beq.n	80027c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c4:	d107      	bne.n	80027d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027de:	d10f      	bne.n	8002800 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e010      	b.n	8002836 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	3b01      	subs	r3, #1
 8002822:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4013      	ands	r3, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	429a      	cmp	r2, r3
 8002832:	d196      	bne.n	8002762 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3728      	adds	r7, #40	; 0x28
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000000 	.word	0x20000000

08002844 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af02      	add	r7, sp, #8
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002858:	d111      	bne.n	800287e <SPI_EndRxTransaction+0x3a>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002862:	d004      	beq.n	800286e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286c:	d107      	bne.n	800287e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800287c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2200      	movs	r2, #0
 8002886:	2180      	movs	r1, #128	; 0x80
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f7ff febd 	bl	8002608 <SPI_WaitFlagStateUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002898:	f043 0220 	orr.w	r2, r3, #32
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e023      	b.n	80028ec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ac:	d11d      	bne.n	80028ea <SPI_EndRxTransaction+0xa6>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b6:	d004      	beq.n	80028c2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c0:	d113      	bne.n	80028ea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f7ff ff22 	bl	8002718 <SPI_WaitFifoStateUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d007      	beq.n	80028ea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028de:	f043 0220 	orr.w	r2, r3, #32
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e000      	b.n	80028ec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2200      	movs	r2, #0
 8002908:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f7ff ff03 	bl	8002718 <SPI_WaitFifoStateUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291c:	f043 0220 	orr.w	r2, r3, #32
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e027      	b.n	8002978 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2200      	movs	r2, #0
 8002930:	2180      	movs	r1, #128	; 0x80
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f7ff fe68 	bl	8002608 <SPI_WaitFlagStateUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d007      	beq.n	800294e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002942:	f043 0220 	orr.w	r2, r3, #32
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e014      	b.n	8002978 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2200      	movs	r2, #0
 8002956:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f7ff fedc 	bl	8002718 <SPI_WaitFifoStateUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296a:	f043 0220 	orr.w	r2, r3, #32
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e000      	b.n	8002978 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <__libc_init_array>:
 8002980:	b570      	push	{r4, r5, r6, lr}
 8002982:	4d0d      	ldr	r5, [pc, #52]	; (80029b8 <__libc_init_array+0x38>)
 8002984:	4c0d      	ldr	r4, [pc, #52]	; (80029bc <__libc_init_array+0x3c>)
 8002986:	1b64      	subs	r4, r4, r5
 8002988:	10a4      	asrs	r4, r4, #2
 800298a:	2600      	movs	r6, #0
 800298c:	42a6      	cmp	r6, r4
 800298e:	d109      	bne.n	80029a4 <__libc_init_array+0x24>
 8002990:	4d0b      	ldr	r5, [pc, #44]	; (80029c0 <__libc_init_array+0x40>)
 8002992:	4c0c      	ldr	r4, [pc, #48]	; (80029c4 <__libc_init_array+0x44>)
 8002994:	f000 f820 	bl	80029d8 <_init>
 8002998:	1b64      	subs	r4, r4, r5
 800299a:	10a4      	asrs	r4, r4, #2
 800299c:	2600      	movs	r6, #0
 800299e:	42a6      	cmp	r6, r4
 80029a0:	d105      	bne.n	80029ae <__libc_init_array+0x2e>
 80029a2:	bd70      	pop	{r4, r5, r6, pc}
 80029a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a8:	4798      	blx	r3
 80029aa:	3601      	adds	r6, #1
 80029ac:	e7ee      	b.n	800298c <__libc_init_array+0xc>
 80029ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80029b2:	4798      	blx	r3
 80029b4:	3601      	adds	r6, #1
 80029b6:	e7f2      	b.n	800299e <__libc_init_array+0x1e>
 80029b8:	08002a30 	.word	0x08002a30
 80029bc:	08002a30 	.word	0x08002a30
 80029c0:	08002a30 	.word	0x08002a30
 80029c4:	08002a34 	.word	0x08002a34

080029c8 <memset>:
 80029c8:	4402      	add	r2, r0
 80029ca:	4603      	mov	r3, r0
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d100      	bne.n	80029d2 <memset+0xa>
 80029d0:	4770      	bx	lr
 80029d2:	f803 1b01 	strb.w	r1, [r3], #1
 80029d6:	e7f9      	b.n	80029cc <memset+0x4>

080029d8 <_init>:
 80029d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029da:	bf00      	nop
 80029dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029de:	bc08      	pop	{r3}
 80029e0:	469e      	mov	lr, r3
 80029e2:	4770      	bx	lr

080029e4 <_fini>:
 80029e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e6:	bf00      	nop
 80029e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ea:	bc08      	pop	{r3}
 80029ec:	469e      	mov	lr, r3
 80029ee:	4770      	bx	lr
