
AT86RF233.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d38  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002ec0  08002ec0  00012ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f08  08002f08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f08  08002f08  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f08  08002f08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f08  08002f08  00012f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f0c  08002f0c  00012f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002f1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002f1c  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000874d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000159f  00000000  00000000  00028789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  00029d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  0002a568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025197  00000000  00000000  0002ad00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000802e  00000000  00000000  0004fe97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e40d4  00000000  00000000  00057ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013bf99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002068  00000000  00000000  0013bfec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ea8 	.word	0x08002ea8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002ea8 	.word	0x08002ea8

080001c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80001cc:	f3bf 8f4f 	dsb	sy
}
 80001d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80001d2:	4b06      	ldr	r3, [pc, #24]	; (80001ec <__NVIC_SystemReset+0x24>)
 80001d4:	68db      	ldr	r3, [r3, #12]
 80001d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80001da:	4904      	ldr	r1, [pc, #16]	; (80001ec <__NVIC_SystemReset+0x24>)
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <__NVIC_SystemReset+0x28>)
 80001de:	4313      	orrs	r3, r2
 80001e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80001e2:	f3bf 8f4f 	dsb	sy
}
 80001e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80001e8:	bf00      	nop
 80001ea:	e7fd      	b.n	80001e8 <__NVIC_SystemReset+0x20>
 80001ec:	e000ed00 	.word	0xe000ed00
 80001f0:	05fa0004 	.word	0x05fa0004

080001f4 <readRegister>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t readRegister(const uint8_t addr)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af02      	add	r7, sp, #8
 80001fa:	4603      	mov	r3, r0
 80001fc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    uint8_t readCommand = addr | AT86RF2XX_ACCESS_REG | AT86RF2XX_ACCESS_READ;
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000204:	b2db      	uxtb	r3, r3
 8000206:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000208:	2200      	movs	r2, #0
 800020a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800020e:	4810      	ldr	r0, [pc, #64]	; (8000250 <readRegister+0x5c>)
 8000210:	f001 f8cc 	bl	80013ac <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi3, &readCommand, &value, sizeof(value), HAL_MAX_DELAY);
 8000214:	f107 020f 	add.w	r2, r7, #15
 8000218:	f107 010e 	add.w	r1, r7, #14
 800021c:	f04f 33ff 	mov.w	r3, #4294967295
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	2301      	movs	r3, #1
 8000224:	480b      	ldr	r0, [pc, #44]	; (8000254 <readRegister+0x60>)
 8000226:	f002 fa44 	bl	80026b2 <HAL_SPI_TransmitReceive>
    //HAL_SPI_Transmit(&hspi3, readCommand, 1, HAL_MAX_DELAY);
    HAL_SPI_Receive(&hspi3, &value, sizeof(value), HAL_MAX_DELAY);
 800022a:	f107 010f 	add.w	r1, r7, #15
 800022e:	f04f 33ff 	mov.w	r3, #4294967295
 8000232:	2201      	movs	r2, #1
 8000234:	4807      	ldr	r0, [pc, #28]	; (8000254 <readRegister+0x60>)
 8000236:	f002 f90c 	bl	8002452 <HAL_SPI_Receive>
    //HAL_SPI_TransmitReceive(&hspi3, 0x00, value, 1, HAL_MAX_DELAY);
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800023a:	2201      	movs	r2, #1
 800023c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000240:	4803      	ldr	r0, [pc, #12]	; (8000250 <readRegister+0x5c>)
 8000242:	f001 f8b3 	bl	80013ac <HAL_GPIO_WritePin>

    return (uint8_t)value;
 8000246:	7bfb      	ldrb	r3, [r7, #15]
}
 8000248:	4618      	mov	r0, r3
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	48000800 	.word	0x48000800
 8000254:	20000030 	.word	0x20000030

08000258 <writeRegister>:

void writeRegister(const uint8_t addr,
        const uint8_t value)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	460a      	mov	r2, r1
 8000262:	71fb      	strb	r3, [r7, #7]
 8000264:	4613      	mov	r3, r2
 8000266:	71bb      	strb	r3, [r7, #6]
	uint8_t writeCommand = addr | AT86RF2XX_ACCESS_REG | AT86RF2XX_ACCESS_WRITE;
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800026e:	b2db      	uxtb	r3, r3
 8000270:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000272:	2200      	movs	r2, #0
 8000274:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000278:	480d      	ldr	r0, [pc, #52]	; (80002b0 <writeRegister+0x58>)
 800027a:	f001 f897 	bl	80013ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &writeCommand, sizeof(writeCommand), HAL_MAX_DELAY);
 800027e:	f107 010f 	add.w	r1, r7, #15
 8000282:	f04f 33ff 	mov.w	r3, #4294967295
 8000286:	2201      	movs	r2, #1
 8000288:	480a      	ldr	r0, [pc, #40]	; (80002b4 <writeRegister+0x5c>)
 800028a:	f001 ff74 	bl	8002176 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &value, sizeof(value), HAL_MAX_DELAY);
 800028e:	1db9      	adds	r1, r7, #6
 8000290:	f04f 33ff 	mov.w	r3, #4294967295
 8000294:	2201      	movs	r2, #1
 8000296:	4807      	ldr	r0, [pc, #28]	; (80002b4 <writeRegister+0x5c>)
 8000298:	f001 ff6d 	bl	8002176 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800029c:	2201      	movs	r2, #1
 800029e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002a2:	4803      	ldr	r0, [pc, #12]	; (80002b0 <writeRegister+0x58>)
 80002a4:	f001 f882 	bl	80013ac <HAL_GPIO_WritePin>

}
 80002a8:	bf00      	nop
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	48000800 	.word	0x48000800
 80002b4:	20000030 	.word	0x20000030

080002b8 <get_status>:

uint8_t get_status(void){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	return readRegister(0x01);
 80002bc:	2001      	movs	r0, #1
 80002be:	f7ff ff99 	bl	80001f4 <readRegister>
 80002c2:	4603      	mov	r3, r0
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <set_csma_max_retries>:

void set_csma_max_retries(int8_t retries)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
    retries = (retries > 5) ? 5 : retries; /* valid values: 0-5 */
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	2b05      	cmp	r3, #5
 80002d8:	bfa8      	it	ge
 80002da:	2305      	movge	r3, #5
 80002dc:	71fb      	strb	r3, [r7, #7]
    retries = (retries < 0) ? 7 : retries; /* max < 0 => disable CSMA (set to 7) */
 80002de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	db02      	blt.n	80002ec <set_csma_max_retries+0x24>
 80002e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ea:	e000      	b.n	80002ee <set_csma_max_retries+0x26>
 80002ec:	2307      	movs	r3, #7
 80002ee:	71fb      	strb	r3, [r7, #7]
    //DEBUG("[at86rf2xx] opt: Set CSMA retries to %u\n", retries);

    uint8_t tmp = readRegister(AT86RF2XX_REG__XAH_CTRL_0);
 80002f0:	202c      	movs	r0, #44	; 0x2c
 80002f2:	f7ff ff7f 	bl	80001f4 <readRegister>
 80002f6:	4603      	mov	r3, r0
 80002f8:	73fb      	strb	r3, [r7, #15]
    tmp &= ~(AT86RF2XX_XAH_CTRL_0__MAX_CSMA_RETRIES);
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
 80002fc:	f023 030e 	bic.w	r3, r3, #14
 8000300:	73fb      	strb	r3, [r7, #15]
    tmp |= (retries << 1);
 8000302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000306:	005b      	lsls	r3, r3, #1
 8000308:	b25a      	sxtb	r2, r3
 800030a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800030e:	4313      	orrs	r3, r2
 8000310:	b25b      	sxtb	r3, r3
 8000312:	73fb      	strb	r3, [r7, #15]
    writeRegister(AT86RF2XX_REG__XAH_CTRL_0, tmp);
 8000314:	7bfb      	ldrb	r3, [r7, #15]
 8000316:	4619      	mov	r1, r3
 8000318:	202c      	movs	r0, #44	; 0x2c
 800031a:	f7ff ff9d 	bl	8000258 <writeRegister>
}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <set_csma_backoff_exp>:

void set_csma_backoff_exp(uint8_t min, uint8_t max)
{
 8000326:	b580      	push	{r7, lr}
 8000328:	b082      	sub	sp, #8
 800032a:	af00      	add	r7, sp, #0
 800032c:	4603      	mov	r3, r0
 800032e:	460a      	mov	r2, r1
 8000330:	71fb      	strb	r3, [r7, #7]
 8000332:	4613      	mov	r3, r2
 8000334:	71bb      	strb	r3, [r7, #6]
    max = (max > 8) ? 8 : max;
 8000336:	79bb      	ldrb	r3, [r7, #6]
 8000338:	2b08      	cmp	r3, #8
 800033a:	bf28      	it	cs
 800033c:	2308      	movcs	r3, #8
 800033e:	71bb      	strb	r3, [r7, #6]
    min = (min > max) ? max : min;
 8000340:	79fa      	ldrb	r2, [r7, #7]
 8000342:	79bb      	ldrb	r3, [r7, #6]
 8000344:	4293      	cmp	r3, r2
 8000346:	bf28      	it	cs
 8000348:	4613      	movcs	r3, r2
 800034a:	71fb      	strb	r3, [r7, #7]
    //DEBUG("[at86rf2xx] opt: Set min BE=%u, max BE=%u\n", min, max);

    writeRegister(AT86RF2XX_REG__CSMA_BE, (max << 4) | (min));
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	011b      	lsls	r3, r3, #4
 8000350:	b25a      	sxtb	r2, r3
 8000352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000356:	4313      	orrs	r3, r2
 8000358:	b25b      	sxtb	r3, r3
 800035a:	b2db      	uxtb	r3, r3
 800035c:	4619      	mov	r1, r3
 800035e:	202f      	movs	r0, #47	; 0x2f
 8000360:	f7ff ff7a 	bl	8000258 <writeRegister>
}
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <set_csma_seed>:

void set_csma_seed(uint8_t entropy[2])
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
    if(entropy == NULL) {
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d020      	beq.n	80003bc <set_csma_seed+0x50>
        //DEBUG("[at86rf2xx] opt: CSMA seed entropy is nullpointer\n");
        return;
    }
    //DEBUG("[at86rf2xx] opt: Set CSMA seed to 0x%x 0x%x\n", entropy[0], entropy[1]);

    writeRegister(AT86RF2XX_REG__CSMA_SEED_0, entropy[0]);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	4619      	mov	r1, r3
 8000380:	202d      	movs	r0, #45	; 0x2d
 8000382:	f7ff ff69 	bl	8000258 <writeRegister>

    uint8_t tmp = readRegister(AT86RF2XX_REG__CSMA_SEED_1);
 8000386:	202e      	movs	r0, #46	; 0x2e
 8000388:	f7ff ff34 	bl	80001f4 <readRegister>
 800038c:	4603      	mov	r3, r0
 800038e:	73fb      	strb	r3, [r7, #15]
    tmp &= ~(AT86RF2XX_CSMA_SEED_1__CSMA_SEED_1);
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	f023 0307 	bic.w	r3, r3, #7
 8000396:	73fb      	strb	r3, [r7, #15]
    tmp |= entropy[1] & AT86RF2XX_CSMA_SEED_1__CSMA_SEED_1;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	3301      	adds	r3, #1
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	b25b      	sxtb	r3, r3
 80003a0:	f003 0307 	and.w	r3, r3, #7
 80003a4:	b25a      	sxtb	r2, r3
 80003a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003aa:	4313      	orrs	r3, r2
 80003ac:	b25b      	sxtb	r3, r3
 80003ae:	73fb      	strb	r3, [r7, #15]
    writeRegister(AT86RF2XX_REG__CSMA_SEED_1, tmp);
 80003b0:	7bfb      	ldrb	r3, [r7, #15]
 80003b2:	4619      	mov	r1, r3
 80003b4:	202e      	movs	r0, #46	; 0x2e
 80003b6:	f7ff ff4f 	bl	8000258 <writeRegister>
 80003ba:	e000      	b.n	80003be <set_csma_seed+0x52>
        return;
 80003bc:	bf00      	nop
}
 80003be:	3710      	adds	r7, #16
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <set_option>:

void set_option(uint16_t option, int state)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	6039      	str	r1, [r7, #0]
 80003ce:	80fb      	strh	r3, [r7, #6]
    uint8_t tmp;

    //DEBUG("set option %i to %i\n", option, state);

    /* set option field */
    if (state) {
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d05c      	beq.n	8000490 <set_option+0xcc>
        options |= option;
 80003d6:	4b62      	ldr	r3, [pc, #392]	; (8000560 <set_option+0x19c>)
 80003d8:	881a      	ldrh	r2, [r3, #0]
 80003da:	88fb      	ldrh	r3, [r7, #6]
 80003dc:	4313      	orrs	r3, r2
 80003de:	b29a      	uxth	r2, r3
 80003e0:	4b5f      	ldr	r3, [pc, #380]	; (8000560 <set_option+0x19c>)
 80003e2:	801a      	strh	r2, [r3, #0]
        /* trigger option specific actions */
        switch (option) {
 80003e4:	88fb      	ldrh	r3, [r7, #6]
 80003e6:	2b40      	cmp	r3, #64	; 0x40
 80003e8:	d043      	beq.n	8000472 <set_option+0xae>
 80003ea:	2b40      	cmp	r3, #64	; 0x40
 80003ec:	f300 80af 	bgt.w	800054e <set_option+0x18a>
 80003f0:	2b04      	cmp	r3, #4
 80003f2:	d012      	beq.n	800041a <set_option+0x56>
 80003f4:	2b04      	cmp	r3, #4
 80003f6:	f300 80aa 	bgt.w	800054e <set_option+0x18a>
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d02a      	beq.n	8000454 <set_option+0x90>
 80003fe:	2b02      	cmp	r3, #2
 8000400:	f040 80a5 	bne.w	800054e <set_option+0x18a>
            case AT86RF2XX_OPT_CSMA:
                //DEBUG("[at86rf2xx] opt: enabling CSMA mode" \
                      "(4 retries, min BE: 3 max BE: 5)\n");
                /* Initialize CSMA seed with hardware address */
                set_csma_seed(0b101011);
 8000404:	202b      	movs	r0, #43	; 0x2b
 8000406:	f7ff ffb1 	bl	800036c <set_csma_seed>
                set_csma_max_retries(4);
 800040a:	2004      	movs	r0, #4
 800040c:	f7ff ff5c 	bl	80002c8 <set_csma_max_retries>
                set_csma_backoff_exp(3, 5);
 8000410:	2105      	movs	r1, #5
 8000412:	2003      	movs	r0, #3
 8000414:	f7ff ff87 	bl	8000326 <set_csma_backoff_exp>
                break;
 8000418:	e09e      	b.n	8000558 <set_option+0x194>
            case AT86RF2XX_OPT_PROMISCUOUS:
                //DEBUG("[at86rf2xx] opt: enabling PROMISCUOUS mode\n");
                /* disable auto ACKs in promiscuous mode */
                tmp = readRegister(AT86RF2XX_REG__CSMA_SEED_1);
 800041a:	202e      	movs	r0, #46	; 0x2e
 800041c:	f7ff feea 	bl	80001f4 <readRegister>
 8000420:	4603      	mov	r3, r0
 8000422:	73fb      	strb	r3, [r7, #15]
                tmp |= AT86RF2XX_CSMA_SEED_1__AACK_DIS_ACK;
 8000424:	7bfb      	ldrb	r3, [r7, #15]
 8000426:	f043 0310 	orr.w	r3, r3, #16
 800042a:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__CSMA_SEED_1, tmp);
 800042c:	7bfb      	ldrb	r3, [r7, #15]
 800042e:	4619      	mov	r1, r3
 8000430:	202e      	movs	r0, #46	; 0x2e
 8000432:	f7ff ff11 	bl	8000258 <writeRegister>
                /* enable promiscuous mode */
                tmp = readRegister(AT86RF2XX_REG__XAH_CTRL_1);
 8000436:	2017      	movs	r0, #23
 8000438:	f7ff fedc 	bl	80001f4 <readRegister>
 800043c:	4603      	mov	r3, r0
 800043e:	73fb      	strb	r3, [r7, #15]
                tmp |= AT86RF2XX_XAH_CTRL_1__AACK_PROM_MODE;
 8000440:	7bfb      	ldrb	r3, [r7, #15]
 8000442:	f043 0302 	orr.w	r3, r3, #2
 8000446:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__XAH_CTRL_1, tmp);
 8000448:	7bfb      	ldrb	r3, [r7, #15]
 800044a:	4619      	mov	r1, r3
 800044c:	2017      	movs	r0, #23
 800044e:	f7ff ff03 	bl	8000258 <writeRegister>
                break;
 8000452:	e081      	b.n	8000558 <set_option+0x194>
            case AT86RF2XX_OPT_AUTOACK:
                //DEBUG("[at86rf2xx] opt: enabling auto ACKs\n");
                tmp = readRegister(AT86RF2XX_REG__CSMA_SEED_1);
 8000454:	202e      	movs	r0, #46	; 0x2e
 8000456:	f7ff fecd 	bl	80001f4 <readRegister>
 800045a:	4603      	mov	r3, r0
 800045c:	73fb      	strb	r3, [r7, #15]
                tmp &= ~(AT86RF2XX_CSMA_SEED_1__AACK_DIS_ACK);
 800045e:	7bfb      	ldrb	r3, [r7, #15]
 8000460:	f023 0310 	bic.w	r3, r3, #16
 8000464:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__CSMA_SEED_1, tmp);
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	4619      	mov	r1, r3
 800046a:	202e      	movs	r0, #46	; 0x2e
 800046c:	f7ff fef4 	bl	8000258 <writeRegister>
                break;
 8000470:	e072      	b.n	8000558 <set_option+0x194>
            case AT86RF2XX_OPT_TELL_RX_START:
                //DEBUG("[at86rf2xx] opt: enabling SFD IRQ\n");
                tmp = readRegister(AT86RF2XX_REG__IRQ_MASK);
 8000472:	200e      	movs	r0, #14
 8000474:	f7ff febe 	bl	80001f4 <readRegister>
 8000478:	4603      	mov	r3, r0
 800047a:	73fb      	strb	r3, [r7, #15]
                tmp |= AT86RF2XX_IRQ_STATUS_MASK__RX_START;
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	f043 0304 	orr.w	r3, r3, #4
 8000482:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__IRQ_MASK, tmp);
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	4619      	mov	r1, r3
 8000488:	200e      	movs	r0, #14
 800048a:	f7ff fee5 	bl	8000258 <writeRegister>
                break;
 800048e:	e063      	b.n	8000558 <set_option+0x194>
                /* do nothing */
                break;
        }
    }
    else {
        options &= ~(option);
 8000490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000494:	43db      	mvns	r3, r3
 8000496:	b21a      	sxth	r2, r3
 8000498:	4b31      	ldr	r3, [pc, #196]	; (8000560 <set_option+0x19c>)
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	b21b      	sxth	r3, r3
 800049e:	4013      	ands	r3, r2
 80004a0:	b21b      	sxth	r3, r3
 80004a2:	b29a      	uxth	r2, r3
 80004a4:	4b2e      	ldr	r3, [pc, #184]	; (8000560 <set_option+0x19c>)
 80004a6:	801a      	strh	r2, [r3, #0]
        /* trigger option specific actions */
        switch (option) {
 80004a8:	88fb      	ldrh	r3, [r7, #6]
 80004aa:	2b40      	cmp	r3, #64	; 0x40
 80004ac:	d040      	beq.n	8000530 <set_option+0x16c>
 80004ae:	2b40      	cmp	r3, #64	; 0x40
 80004b0:	dc4f      	bgt.n	8000552 <set_option+0x18e>
 80004b2:	2b04      	cmp	r3, #4
 80004b4:	d00a      	beq.n	80004cc <set_option+0x108>
 80004b6:	2b04      	cmp	r3, #4
 80004b8:	dc4b      	bgt.n	8000552 <set_option+0x18e>
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d029      	beq.n	8000512 <set_option+0x14e>
 80004be:	2b02      	cmp	r3, #2
 80004c0:	d147      	bne.n	8000552 <set_option+0x18e>
            case AT86RF2XX_OPT_CSMA:
                //DEBUG("[at86rf2xx] opt: disabling CSMA mode\n");
                /* setting retries to -1 means CSMA disabled */
                set_csma_max_retries(-1);
 80004c2:	f04f 30ff 	mov.w	r0, #4294967295
 80004c6:	f7ff feff 	bl	80002c8 <set_csma_max_retries>
                break;
 80004ca:	e045      	b.n	8000558 <set_option+0x194>
            case AT86RF2XX_OPT_PROMISCUOUS:
                //DEBUG("[at86rf2xx] opt: disabling PROMISCUOUS mode\n");
                /* disable promiscuous mode */
                tmp = readRegister(AT86RF2XX_REG__XAH_CTRL_1);
 80004cc:	2017      	movs	r0, #23
 80004ce:	f7ff fe91 	bl	80001f4 <readRegister>
 80004d2:	4603      	mov	r3, r0
 80004d4:	73fb      	strb	r3, [r7, #15]
                tmp &= ~(AT86RF2XX_XAH_CTRL_1__AACK_PROM_MODE);
 80004d6:	7bfb      	ldrb	r3, [r7, #15]
 80004d8:	f023 0302 	bic.w	r3, r3, #2
 80004dc:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__XAH_CTRL_1, tmp);
 80004de:	7bfb      	ldrb	r3, [r7, #15]
 80004e0:	4619      	mov	r1, r3
 80004e2:	2017      	movs	r0, #23
 80004e4:	f7ff feb8 	bl	8000258 <writeRegister>
                /* re-enable AUTOACK only if the option is set */
                if (options & AT86RF2XX_OPT_AUTOACK) {
 80004e8:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <set_option+0x19c>)
 80004ea:	881b      	ldrh	r3, [r3, #0]
 80004ec:	f003 0301 	and.w	r3, r3, #1
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d030      	beq.n	8000556 <set_option+0x192>
                    tmp = readRegister(AT86RF2XX_REG__CSMA_SEED_1);
 80004f4:	202e      	movs	r0, #46	; 0x2e
 80004f6:	f7ff fe7d 	bl	80001f4 <readRegister>
 80004fa:	4603      	mov	r3, r0
 80004fc:	73fb      	strb	r3, [r7, #15]
                    tmp &= ~(AT86RF2XX_CSMA_SEED_1__AACK_DIS_ACK);
 80004fe:	7bfb      	ldrb	r3, [r7, #15]
 8000500:	f023 0310 	bic.w	r3, r3, #16
 8000504:	73fb      	strb	r3, [r7, #15]
                    writeRegister(AT86RF2XX_REG__CSMA_SEED_1,
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	4619      	mov	r1, r3
 800050a:	202e      	movs	r0, #46	; 0x2e
 800050c:	f7ff fea4 	bl	8000258 <writeRegister>
                                        tmp);
                }
                break;
 8000510:	e021      	b.n	8000556 <set_option+0x192>
            case AT86RF2XX_OPT_AUTOACK:
                //DEBUG("[at86rf2xx] opt: disabling auto ACKs\n");
                tmp = readRegister(AT86RF2XX_REG__CSMA_SEED_1);
 8000512:	202e      	movs	r0, #46	; 0x2e
 8000514:	f7ff fe6e 	bl	80001f4 <readRegister>
 8000518:	4603      	mov	r3, r0
 800051a:	73fb      	strb	r3, [r7, #15]
                tmp |= AT86RF2XX_CSMA_SEED_1__AACK_DIS_ACK;
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	f043 0310 	orr.w	r3, r3, #16
 8000522:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__CSMA_SEED_1, tmp);
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	4619      	mov	r1, r3
 8000528:	202e      	movs	r0, #46	; 0x2e
 800052a:	f7ff fe95 	bl	8000258 <writeRegister>
                break;
 800052e:	e013      	b.n	8000558 <set_option+0x194>
            case AT86RF2XX_OPT_TELL_RX_START:
                //DEBUG("[at86rf2xx] opt: disabling SFD IRQ\n");
                tmp = readRegister(AT86RF2XX_REG__IRQ_MASK);
 8000530:	200e      	movs	r0, #14
 8000532:	f7ff fe5f 	bl	80001f4 <readRegister>
 8000536:	4603      	mov	r3, r0
 8000538:	73fb      	strb	r3, [r7, #15]
                tmp &= ~AT86RF2XX_IRQ_STATUS_MASK__RX_START;
 800053a:	7bfb      	ldrb	r3, [r7, #15]
 800053c:	f023 0304 	bic.w	r3, r3, #4
 8000540:	73fb      	strb	r3, [r7, #15]
                writeRegister(AT86RF2XX_REG__IRQ_MASK, tmp);
 8000542:	7bfb      	ldrb	r3, [r7, #15]
 8000544:	4619      	mov	r1, r3
 8000546:	200e      	movs	r0, #14
 8000548:	f7ff fe86 	bl	8000258 <writeRegister>
                break;
 800054c:	e004      	b.n	8000558 <set_option+0x194>
                break;
 800054e:	bf00      	nop
 8000550:	e002      	b.n	8000558 <set_option+0x194>
            default:
                /* do nothing */
                break;
 8000552:	bf00      	nop
 8000554:	e000      	b.n	8000558 <set_option+0x194>
                break;
 8000556:	bf00      	nop
        }
    }
}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000094 	.word	0x20000094

08000564 <_set_state>:

void _set_state(uint8_t state_)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
	writeRegister(AT86RF2XX_REG__TRX_STATE, state_);
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	4619      	mov	r1, r3
 8000572:	2002      	movs	r0, #2
 8000574:	f7ff fe70 	bl	8000258 <writeRegister>
    while (get_status() != state_);
 8000578:	bf00      	nop
 800057a:	f7ff fe9d 	bl	80002b8 <get_status>
 800057e:	4603      	mov	r3, r0
 8000580:	461a      	mov	r2, r3
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	4293      	cmp	r3, r2
 8000586:	d1f8      	bne.n	800057a <_set_state+0x16>
}
 8000588:	bf00      	nop
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <set_state>:

void set_state(uint8_t state_)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	b084      	sub	sp, #16
 8000596:	af00      	add	r7, sp, #0
 8000598:	4603      	mov	r3, r0
 800059a:	71fb      	strb	r3, [r7, #7]
	_set_state(state_);
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff ffe0 	bl	8000564 <_set_state>
    uint8_t old_state = get_status();
 80005a4:	f7ff fe88 	bl	80002b8 <get_status>
 80005a8:	4603      	mov	r3, r0
 80005aa:	73fb      	strb	r3, [r7, #15]

    if (state_ == old_state) {
 80005ac:	79fa      	ldrb	r2, [r7, #7]
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d01d      	beq.n	80005f0 <set_state+0x5e>
        return;
    }
    /* make sure there is no ongoing transmission, or state transition already
     * in progress */
    while (old_state == AT86RF2XX_STATE_BUSY_RX_AACK ||
 80005b4:	e003      	b.n	80005be <set_state+0x2c>
           old_state == AT86RF2XX_STATE_BUSY_TX_ARET ||
           old_state == AT86RF2XX_STATE_IN_PROGRESS) {
        old_state = get_status();
 80005b6:	f7ff fe7f 	bl	80002b8 <get_status>
 80005ba:	4603      	mov	r3, r0
 80005bc:	73fb      	strb	r3, [r7, #15]
    while (old_state == AT86RF2XX_STATE_BUSY_RX_AACK ||
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	2b11      	cmp	r3, #17
 80005c2:	d0f8      	beq.n	80005b6 <set_state+0x24>
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	2b12      	cmp	r3, #18
 80005c8:	d0f5      	beq.n	80005b6 <set_state+0x24>
           old_state == AT86RF2XX_STATE_BUSY_TX_ARET ||
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	2b1f      	cmp	r3, #31
 80005ce:	d0f2      	beq.n	80005b6 <set_state+0x24>
    }

    /* we need to go via PLL_ON if we are moving between RX_AACK_ON <-> TX_ARET_ON */
    if ((old_state == AT86RF2XX_STATE_RX_AACK_ON &&
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	2b16      	cmp	r3, #22
 80005d4:	d102      	bne.n	80005dc <set_state+0x4a>
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2b19      	cmp	r3, #25
 80005da:	d005      	beq.n	80005e8 <set_state+0x56>
             state_ == AT86RF2XX_STATE_TX_ARET_ON) ||
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	2b19      	cmp	r3, #25
 80005e0:	d107      	bne.n	80005f2 <set_state+0x60>
        (old_state == AT86RF2XX_STATE_TX_ARET_ON &&
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	2b16      	cmp	r3, #22
 80005e6:	d104      	bne.n	80005f2 <set_state+0x60>
             state_ == AT86RF2XX_STATE_RX_AACK_ON)) {
        _set_state(AT86RF2XX_STATE_PLL_ON);
 80005e8:	2009      	movs	r0, #9
 80005ea:	f7ff ffbb 	bl	8000564 <_set_state>
 80005ee:	e000      	b.n	80005f2 <set_state+0x60>
        return;
 80005f0:	bf00      	nop
    /* check if we need to wake up from sleep mode */
    else if (old_state == AT86RF2XX_STATE_SLEEP) {
        //DEBUG("at86rf2xx: waking up from sleep mode\n");
        //assert_awake();
    }
}
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <set_addr_short>:

void set_addr_short(uint16_t addr)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	80fb      	strh	r3, [r7, #6]
	uint8_t addr_short[2];
    addr_short[0] = addr >> 8;
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	0a1b      	lsrs	r3, r3, #8
 8000606:	b29b      	uxth	r3, r3
 8000608:	b2db      	uxtb	r3, r3
 800060a:	733b      	strb	r3, [r7, #12]
    addr_short[1] = addr & 0xff;
 800060c:	88fb      	ldrh	r3, [r7, #6]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	737b      	strb	r3, [r7, #13]
    writeRegister(AT86RF2XX_REG__SHORT_ADDR_0,
 8000612:	7b3b      	ldrb	r3, [r7, #12]
 8000614:	4619      	mov	r1, r3
 8000616:	2020      	movs	r0, #32
 8000618:	f7ff fe1e 	bl	8000258 <writeRegister>
                        addr_short[0]);
    writeRegister(AT86RF2XX_REG__SHORT_ADDR_1,
 800061c:	7b7b      	ldrb	r3, [r7, #13]
 800061e:	4619      	mov	r1, r3
 8000620:	2021      	movs	r0, #33	; 0x21
 8000622:	f7ff fe19 	bl	8000258 <writeRegister>
                        addr_short[1]);
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <set_addr_long>:

void set_addr_long(uint64_t addr)
{
 800062e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000630:	b087      	sub	sp, #28
 8000632:	af00      	add	r7, sp, #0
 8000634:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t addr_long[8];
    for (int i = 0; i < 8; i++) {
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	e029      	b.n	8000692 <set_addr_long+0x64>
        addr_long[i] = (addr >> ((7 - i) * 8));
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	f1c3 0307 	rsb	r3, r3, #7
 8000644:	00d9      	lsls	r1, r3, #3
 8000646:	e9d7 2300 	ldrd	r2, r3, [r7]
 800064a:	f1c1 0620 	rsb	r6, r1, #32
 800064e:	f1a1 0020 	sub.w	r0, r1, #32
 8000652:	fa22 f401 	lsr.w	r4, r2, r1
 8000656:	fa03 f606 	lsl.w	r6, r3, r6
 800065a:	4334      	orrs	r4, r6
 800065c:	fa23 f000 	lsr.w	r0, r3, r0
 8000660:	4304      	orrs	r4, r0
 8000662:	fa23 f501 	lsr.w	r5, r3, r1
 8000666:	b2e1      	uxtb	r1, r4
 8000668:	f107 020c 	add.w	r2, r7, #12
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	4413      	add	r3, r2
 8000670:	460a      	mov	r2, r1
 8000672:	701a      	strb	r2, [r3, #0]
        writeRegister((AT86RF2XX_REG__IEEE_ADDR_0 + i), addr_long[i]);
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	3324      	adds	r3, #36	; 0x24
 800067a:	b2d8      	uxtb	r0, r3
 800067c:	f107 020c 	add.w	r2, r7, #12
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	4413      	add	r3, r2
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	4619      	mov	r1, r3
 8000688:	f7ff fde6 	bl	8000258 <writeRegister>
    for (int i = 0; i < 8; i++) {
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	3301      	adds	r3, #1
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	2b07      	cmp	r3, #7
 8000696:	ddd2      	ble.n	800063e <set_addr_long+0x10>
    }
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	371c      	adds	r7, #28
 800069e:	46bd      	mov	sp, r7
 80006a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080006a2 <set_pan>:

void set_pan(uint16_t pan)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	4603      	mov	r3, r0
 80006aa:	80fb      	strh	r3, [r7, #6]
    //pan = pan_;
    //DEBUG("pan0: %u, pan1: %u\n", (uint8_t)pan, pan >> 8);
    writeRegister(AT86RF2XX_REG__PAN_ID_0, (uint8_t)pan);
 80006ac:	88fb      	ldrh	r3, [r7, #6]
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	4619      	mov	r1, r3
 80006b2:	2022      	movs	r0, #34	; 0x22
 80006b4:	f7ff fdd0 	bl	8000258 <writeRegister>
    writeRegister(AT86RF2XX_REG__PAN_ID_1, (pan >> 8));
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	0a1b      	lsrs	r3, r3, #8
 80006bc:	b29b      	uxth	r3, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	4619      	mov	r1, r3
 80006c2:	2023      	movs	r0, #35	; 0x23
 80006c4:	f7ff fdc8 	bl	8000258 <writeRegister>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <set_chan>:

void set_chan(uint8_t channel)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp;

    if (channel < AT86RF2XX_MIN_CHANNEL
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b0a      	cmp	r3, #10
 80006de:	d91b      	bls.n	8000718 <set_chan+0x48>
        || channel > AT86RF2XX_MAX_CHANNEL) {
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	2b1a      	cmp	r3, #26
 80006e4:	d818      	bhi.n	8000718 <set_chan+0x48>
        return;
    }
    //chan = channel;
    tmp = readRegister(AT86RF2XX_REG__PHY_CC_CCA);
 80006e6:	2008      	movs	r0, #8
 80006e8:	f7ff fd84 	bl	80001f4 <readRegister>
 80006ec:	4603      	mov	r3, r0
 80006ee:	73fb      	strb	r3, [r7, #15]
    tmp &= ~(AT86RF2XX_PHY_CC_CCA_MASK__CHANNEL);
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	f023 031f 	bic.w	r3, r3, #31
 80006f6:	73fb      	strb	r3, [r7, #15]
    tmp |= (channel & AT86RF2XX_PHY_CC_CCA_MASK__CHANNEL);
 80006f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fc:	f003 031f 	and.w	r3, r3, #31
 8000700:	b25a      	sxtb	r2, r3
 8000702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000706:	4313      	orrs	r3, r2
 8000708:	b25b      	sxtb	r3, r3
 800070a:	73fb      	strb	r3, [r7, #15]
    writeRegister(AT86RF2XX_REG__PHY_CC_CCA, tmp);
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	4619      	mov	r1, r3
 8000710:	2008      	movs	r0, #8
 8000712:	f7ff fda1 	bl	8000258 <writeRegister>
 8000716:	e000      	b.n	800071a <set_chan+0x4a>
        return;
 8000718:	bf00      	nop
}
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <at86rf233_init>:

void at86rf233_init(){
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0


	HAL_GPIO_WritePin(SLP_GPIO_Port, SLP_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2140      	movs	r1, #64	; 0x40
 800072a:	483b      	ldr	r0, [pc, #236]	; (8000818 <at86rf233_init+0xf8>)
 800072c:	f000 fe3e 	bl	80013ac <HAL_GPIO_WritePin>
	//digitalWrite(SLP_TR, LOW);
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000736:	4838      	ldr	r0, [pc, #224]	; (8000818 <at86rf233_init+0xf8>)
 8000738:	f000 fe38 	bl	80013ac <HAL_GPIO_WritePin>
	//digitalWrite(RESET, HIGH);
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000742:	4836      	ldr	r0, [pc, #216]	; (800081c <at86rf233_init+0xfc>)
 8000744:	f000 fe32 	bl	80013ac <HAL_GPIO_WritePin>
	//digitalWrite(SEL, HIGH);

	uint8_t part_num = readRegister(AT86RF2XX_REG__PART_NUM);
 8000748:	201c      	movs	r0, #28
 800074a:	f7ff fd53 	bl	80001f4 <readRegister>
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	    if (part_num != 0xb) {
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b0b      	cmp	r3, #11
 8000756:	d156      	bne.n	8000806 <at86rf233_init+0xe6>

	        return -1;
	    }
	//
	hardware_reset();
 8000758:	f000 f886 	bl	8000868 <hardware_reset>
	reset_state_machine();
 800075c:	f000 f873 	bl	8000846 <reset_state_machine>
	//

	 seq_nr = 0;
 8000760:	4b2f      	ldr	r3, [pc, #188]	; (8000820 <at86rf233_init+0x100>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
	 options = 0;
 8000766:	4b2f      	ldr	r3, [pc, #188]	; (8000824 <at86rf233_init+0x104>)
 8000768:	2200      	movs	r2, #0
 800076a:	801a      	strh	r2, [r3, #0]


	  // Enable promiscuous mode:
	set_addr_short(0x1);
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff ff43 	bl	80005f8 <set_addr_short>
	set_pan(0x0023);
 8000772:	2023      	movs	r0, #35	; 0x23
 8000774:	f7ff ff95 	bl	80006a2 <set_pan>
	set_addr_long(0x2222334445666768);
 8000778:	a125      	add	r1, pc, #148	; (adr r1, 8000810 <at86rf233_init+0xf0>)
 800077a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800077e:	f7ff ff56 	bl	800062e <set_addr_long>


	set_chan(AT86RF2XX_DEFAULT_CHANNEL);
 8000782:	200b      	movs	r0, #11
 8000784:	f7ff ffa4 	bl	80006d0 <set_chan>


	writeRegister(0x05, 0x0); // tx power
 8000788:	2100      	movs	r1, #0
 800078a:	2005      	movs	r0, #5
 800078c:	f7ff fd64 	bl	8000258 <writeRegister>

	/* set default options */
	 set_option(AT86RF2XX_OPT_PROMISCUOUS, 1);
 8000790:	2101      	movs	r1, #1
 8000792:	2004      	movs	r0, #4
 8000794:	f7ff fe16 	bl	80003c4 <set_option>
	 set_option(AT86RF2XX_OPT_AUTOACK, 1);
 8000798:	2101      	movs	r1, #1
 800079a:	2001      	movs	r0, #1
 800079c:	f7ff fe12 	bl	80003c4 <set_option>
	 set_option(AT86RF2XX_OPT_CSMA, 1);
 80007a0:	2101      	movs	r1, #1
 80007a2:	2002      	movs	r0, #2
 80007a4:	f7ff fe0e 	bl	80003c4 <set_option>
	 set_option(AT86RF2XX_OPT_TELL_RX_START, 1);
 80007a8:	2101      	movs	r1, #1
 80007aa:	2040      	movs	r0, #64	; 0x40
 80007ac:	f7ff fe0a 	bl	80003c4 <set_option>
	 set_option(AT86RF2XX_OPT_TELL_RX_END, 1);
 80007b0:	2101      	movs	r1, #1
 80007b2:	2080      	movs	r0, #128	; 0x80
 80007b4:	f7ff fe06 	bl	80003c4 <set_option>

	writeRegister(AT86RF2XX_REG__TRX_CTRL_2, AT86RF2XX_TRX_CTRL_2_MASK__RX_SAFE_MODE);
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	200c      	movs	r0, #12
 80007bc:	f7ff fd4c 	bl	8000258 <writeRegister>

	readRegister(0x1C);
 80007c0:	201c      	movs	r0, #28
 80007c2:	f7ff fd17 	bl	80001f4 <readRegister>


	/* disable clock output to save power */
    uint8_t tmp = readRegister(AT86RF2XX_REG__TRX_CTRL_0);
 80007c6:	2003      	movs	r0, #3
 80007c8:	f7ff fd14 	bl	80001f4 <readRegister>
 80007cc:	4603      	mov	r3, r0
 80007ce:	71bb      	strb	r3, [r7, #6]
    tmp &= ~(AT86RF2XX_TRX_CTRL_0_MASK__CLKM_CTRL);
 80007d0:	79bb      	ldrb	r3, [r7, #6]
 80007d2:	f023 0307 	bic.w	r3, r3, #7
 80007d6:	71bb      	strb	r3, [r7, #6]
    tmp &= ~(AT86RF2XX_TRX_CTRL_0_MASK__CLKM_SHA_SEL);
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	f023 0308 	bic.w	r3, r3, #8
 80007de:	71bb      	strb	r3, [r7, #6]
    tmp |= (AT86RF2XX_TRX_CTRL_0_CLKM_CTRL__OFF);
    writeRegister(AT86RF2XX_REG__TRX_CTRL_0, tmp);
 80007e0:	79bb      	ldrb	r3, [r7, #6]
 80007e2:	4619      	mov	r1, r3
 80007e4:	2003      	movs	r0, #3
 80007e6:	f7ff fd37 	bl	8000258 <writeRegister>

	    /* enable interrupts */
	writeRegister(AT86RF2XX_REG__IRQ_MASK, AT86RF2XX_IRQ_STATUS_MASK__TRX_END);
 80007ea:	2108      	movs	r1, #8
 80007ec:	200e      	movs	r0, #14
 80007ee:	f7ff fd33 	bl	8000258 <writeRegister>

	    /* clear interrupt flags */
	readRegister(AT86RF2XX_REG__IRQ_STATUS);
 80007f2:	200f      	movs	r0, #15
 80007f4:	f7ff fcfe 	bl	80001f4 <readRegister>

	set_state(6); //16 - RX_ACACK 6 - rx 25 - tx
 80007f8:	2006      	movs	r0, #6
 80007fa:	f7ff feca 	bl	8000592 <set_state>
	  //Serial.print("Detected part nr: 0x");
	  //Serial.println(readRegister(0x1C), HEX);
	  //Serial.print("Version: 0x");
	  //Serial.println(readRegister(0x1D), HEX);

	HAL_Delay(1);
 80007fe:	2001      	movs	r0, #1
 8000800:	f000 fb20 	bl	8000e44 <HAL_Delay>
 8000804:	e000      	b.n	8000808 <at86rf233_init+0xe8>
	        return -1;
 8000806:	bf00      	nop
}
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	45666768 	.word	0x45666768
 8000814:	22223344 	.word	0x22223344
 8000818:	48000400 	.word	0x48000400
 800081c:	48000800 	.word	0x48000800
 8000820:	20000096 	.word	0x20000096
 8000824:	20000094 	.word	0x20000094

08000828 <force_trx_off>:
void force_trx_off()
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
    writeRegister(AT86RF2XX_REG__TRX_STATE, AT86RF2XX_TRX_STATE__FORCE_TRX_OFF);
 800082c:	2103      	movs	r1, #3
 800082e:	2002      	movs	r0, #2
 8000830:	f7ff fd12 	bl	8000258 <writeRegister>
    while (get_status() != AT86RF2XX_STATE_TRX_OFF);
 8000834:	bf00      	nop
 8000836:	f7ff fd3f 	bl	80002b8 <get_status>
 800083a:	4603      	mov	r3, r0
 800083c:	2b08      	cmp	r3, #8
 800083e:	d1fa      	bne.n	8000836 <force_trx_off+0xe>
}
 8000840:	bf00      	nop
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}

08000846 <reset_state_machine>:
void reset_state_machine()
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0

    //assert_awake();

    /* Wait for any state transitions to complete before forcing TRX_OFF */
    do {
        old_state = get_status();
 800084c:	f7ff fd34 	bl	80002b8 <get_status>
 8000850:	4603      	mov	r3, r0
 8000852:	71fb      	strb	r3, [r7, #7]
    } while (old_state == AT86RF2XX_STATE_IN_PROGRESS);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b1f      	cmp	r3, #31
 8000858:	d0f8      	beq.n	800084c <reset_state_machine+0x6>

    force_trx_off();
 800085a:	f7ff ffe5 	bl	8000828 <force_trx_off>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <hardware_reset>:

void hardware_reset(void){
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

	    /* trigger hardware reset */

		HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000872:	4808      	ldr	r0, [pc, #32]	; (8000894 <hardware_reset+0x2c>)
 8000874:	f000 fd9a 	bl	80013ac <HAL_GPIO_WritePin>
	    HAL_Delay(AT86RF2XX_RESET_PULSE_WIDTH);
 8000878:	2001      	movs	r0, #1
 800087a:	f000 fae3 	bl	8000e44 <HAL_Delay>
	    HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 800087e:	2201      	movs	r2, #1
 8000880:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000884:	4803      	ldr	r0, [pc, #12]	; (8000894 <hardware_reset+0x2c>)
 8000886:	f000 fd91 	bl	80013ac <HAL_GPIO_WritePin>
	    HAL_Delay(AT86RF2XX_RESET_PULSE_WIDTH);
 800088a:	2001      	movs	r0, #1
 800088c:	f000 fada 	bl	8000e44 <HAL_Delay>
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	48000400 	.word	0x48000400

08000898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089e:	f000 fa5c 	bl	8000d5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a2:	f000 f841 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a6:	f000 f8c3 	bl	8000a30 <MX_GPIO_Init>
  MX_SPI3_Init();
 80008aa:	f000 f883 	bl	80009b4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  at86rf233_init();
 80008ae:	f7ff ff37 	bl	8000720 <at86rf233_init>
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  connected = 0;
 80008b2:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <main+0x88>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
  int counter = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //writeRegister(0x02,0x02);
	  //send("bla", sizeof("bla"));
	  uint8_t CurrentState = get_status(); //Page 37 of datasheet
 80008bc:	f7ff fcfc 	bl	80002b8 <get_status>
 80008c0:	4603      	mov	r3, r0
 80008c2:	74fb      	strb	r3, [r7, #19]
	  //uint8_t Interrupt = readRegister(0x0F);
	  uint8_t PHY_RSSI = readRegister(0x06); //if bit[7] = 1 (RX_CRC_VALID), FCS is valid
 80008c4:	2006      	movs	r0, #6
 80008c6:	f7ff fc95 	bl	80001f4 <readRegister>
 80008ca:	4603      	mov	r3, r0
 80008cc:	74bb      	strb	r3, [r7, #18]

	  uint8_t irq_mask = readRegister(AT86RF2XX_REG__IRQ_STATUS);
 80008ce:	200f      	movs	r0, #15
 80008d0:	f7ff fc90 	bl	80001f4 <readRegister>
 80008d4:	4603      	mov	r3, r0
 80008d6:	747b      	strb	r3, [r7, #17]

	  if (irq_mask & AT86RF2XX_IRQ_STATUS_MASK__RX_START){
 80008d8:	7c7b      	ldrb	r3, [r7, #17]
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d008      	beq.n	80008f4 <main+0x5c>
		  	uint8_t test = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	743b      	strb	r3, [r7, #16]
		  	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f000 fd5d 	bl	80013ac <HAL_GPIO_WritePin>
 80008f2:	e002      	b.n	80008fa <main+0x62>
	  }
	  else counter ++;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	3301      	adds	r3, #1
 80008f8:	617b      	str	r3, [r7, #20]
	  if(counter>4){
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	2b04      	cmp	r3, #4
 80008fe:	dd01      	ble.n	8000904 <main+0x6c>
		  NVIC_SystemReset();
 8000900:	f7ff fc62 	bl	80001c8 <__NVIC_SystemReset>
	  	  }
	  HAL_Delay(1000);
 8000904:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000908:	f000 fa9c 	bl	8000e44 <HAL_Delay>
	  uint8_t data[] = {0xa7,0x1, 0x431, 'h', 'e', 'l', 'l', 'o'};
 800090c:	4a05      	ldr	r2, [pc, #20]	; (8000924 <main+0x8c>)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000914:	e883 0003 	stmia.w	r3, {r0, r1}
	  size_t len = 7; // Length of the data in bytes
 8000918:	2307      	movs	r3, #7
 800091a:	60fb      	str	r3, [r7, #12]
  {
 800091c:	e7ce      	b.n	80008bc <main+0x24>
 800091e:	bf00      	nop
 8000920:	20000028 	.word	0x20000028
 8000924:	08002ec0 	.word	0x08002ec0

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b096      	sub	sp, #88	; 0x58
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	2244      	movs	r2, #68	; 0x44
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f002 faae 	bl	8002e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	463b      	mov	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800094a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800094e:	f000 fd53 	bl	80013f8 <HAL_PWREx_ControlVoltageScaling>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000958:	f000 f8f0 	bl	8000b3c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800095c:	2310      	movs	r3, #16
 800095e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000960:	2301      	movs	r3, #1
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000968:	2360      	movs	r3, #96	; 0x60
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800096c:	2300      	movs	r3, #0
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4618      	mov	r0, r3
 8000976:	f000 fd95 	bl	80014a4 <HAL_RCC_OscConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000980:	f000 f8dc 	bl	8000b3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000984:	230f      	movs	r3, #15
 8000986:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f001 f95b 	bl	8001c58 <HAL_RCC_ClockConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x84>
  {
    Error_Handler();
 80009a8:	f000 f8c8 	bl	8000b3c <Error_Handler>
  }
}
 80009ac:	bf00      	nop
 80009ae:	3758      	adds	r7, #88	; 0x58
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_SPI3_Init+0x74>)
 80009ba:	4a1c      	ldr	r2, [pc, #112]	; (8000a2c <MX_SPI3_Init+0x78>)
 80009bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_SPI3_Init+0x74>)
 80009c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_SPI3_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_SPI3_Init+0x74>)
 80009ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009d2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_SPI3_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <MX_SPI3_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_SPI3_Init+0x74>)
 80009e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_SPI3_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_SPI3_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_SPI3_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_SPI3_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_SPI3_Init+0x74>)
 8000a02:	2207      	movs	r2, #7
 8000a04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_SPI3_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_SPI3_Init+0x74>)
 8000a0e:	2208      	movs	r2, #8
 8000a10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_SPI3_Init+0x74>)
 8000a14:	f001 fb0c 	bl	8002030 <HAL_SPI_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a1e:	f000 f88d 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000030 	.word	0x20000030
 8000a2c:	40003c00 	.word	0x40003c00

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b3a      	ldr	r3, [pc, #232]	; (8000b30 <MX_GPIO_Init+0x100>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a39      	ldr	r2, [pc, #228]	; (8000b30 <MX_GPIO_Init+0x100>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b37      	ldr	r3, [pc, #220]	; (8000b30 <MX_GPIO_Init+0x100>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <MX_GPIO_Init+0x100>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a33      	ldr	r2, [pc, #204]	; (8000b30 <MX_GPIO_Init+0x100>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <MX_GPIO_Init+0x100>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <MX_GPIO_Init+0x100>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a2d      	ldr	r2, [pc, #180]	; (8000b30 <MX_GPIO_Init+0x100>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <MX_GPIO_Init+0x100>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a96:	f000 fc89 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aa0:	4824      	ldr	r0, [pc, #144]	; (8000b34 <MX_GPIO_Init+0x104>)
 8000aa2:	f000 fc83 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SLP_Pin|RESET_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000aac:	4822      	ldr	r0, [pc, #136]	; (8000b38 <MX_GPIO_Init+0x108>)
 8000aae:	f000 fc7d 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000acc:	f000 fac4 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <MX_GPIO_Init+0x104>)
 8000ae6:	f000 fab7 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000aea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	4619      	mov	r1, r3
 8000b02:	480c      	ldr	r0, [pc, #48]	; (8000b34 <MX_GPIO_Init+0x104>)
 8000b04:	f000 faa8 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : SLP_Pin RESET_Pin */
  GPIO_InitStruct.Pin = SLP_Pin|RESET_Pin;
 8000b08:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_GPIO_Init+0x108>)
 8000b22:	f000 fa99 	bl	8001058 <HAL_GPIO_Init>

}
 8000b26:	bf00      	nop
 8000b28:	3720      	adds	r7, #32
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000
 8000b34:	48000800 	.word	0x48000800
 8000b38:	48000400 	.word	0x48000400

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>
	...

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_MspInit+0x44>)
 8000b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_MspInit+0x44>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_MspInit+0x44>)
 8000b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x44>)
 8000b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_MspInit+0x44>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6593      	str	r3, [r2, #88]	; 0x58
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_MspInit+0x44>)
 8000b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000

08000b90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a34      	ldr	r2, [pc, #208]	; (8000c80 <HAL_SPI_MspInit+0xf0>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d162      	bne.n	8000c78 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bb2:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <HAL_SPI_MspInit+0xf4>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb6:	4a33      	ldr	r2, [pc, #204]	; (8000c84 <HAL_SPI_MspInit+0xf4>)
 8000bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bbe:	4b31      	ldr	r3, [pc, #196]	; (8000c84 <HAL_SPI_MspInit+0xf4>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bc6:	61bb      	str	r3, [r7, #24]
 8000bc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <HAL_SPI_MspInit+0xf4>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	4a2d      	ldr	r2, [pc, #180]	; (8000c84 <HAL_SPI_MspInit+0xf4>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd6:	4b2b      	ldr	r3, [pc, #172]	; (8000c84 <HAL_SPI_MspInit+0xf4>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <HAL_SPI_MspInit+0xf4>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	4a27      	ldr	r2, [pc, #156]	; (8000c84 <HAL_SPI_MspInit+0xf4>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bee:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <HAL_SPI_MspInit+0xf4>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <HAL_SPI_MspInit+0xf4>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	4a21      	ldr	r2, [pc, #132]	; (8000c84 <HAL_SPI_MspInit+0xf4>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <HAL_SPI_MspInit+0xf4>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    PA15 (JTDI)     ------> SPI3_NSS
    PC12     ------> SPI3_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c24:	2306      	movs	r3, #6
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c32:	f000 fa11 	bl	8001058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c48:	2306      	movs	r3, #6
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	480d      	ldr	r0, [pc, #52]	; (8000c88 <HAL_SPI_MspInit+0xf8>)
 8000c54:	f000 fa00 	bl	8001058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000c58:	2318      	movs	r3, #24
 8000c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c68:	2306      	movs	r3, #6
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <HAL_SPI_MspInit+0xfc>)
 8000c74:	f000 f9f0 	bl	8001058 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c78:	bf00      	nop
 8000c7a:	3730      	adds	r7, #48	; 0x30
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40003c00 	.word	0x40003c00
 8000c84:	40021000 	.word	0x40021000
 8000c88:	48000800 	.word	0x48000800
 8000c8c:	48000400 	.word	0x48000400

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 f892 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <SystemInit+0x20>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <SystemInit+0x20>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d0c:	f7ff ffea 	bl	8000ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	; (8000d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <LoopForever+0xe>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	; (8000d54 <LoopForever+0x16>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d36:	f002 f88b 	bl	8002e50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d3a:	f7ff fdad 	bl	8000898 <main>

08000d3e <LoopForever>:

LoopForever:
    b LoopForever
 8000d3e:	e7fe      	b.n	8000d3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d4c:	08002f10 	.word	0x08002f10
  ldr r2, =_sbss
 8000d50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d54:	2000009c 	.word	0x2000009c

08000d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC1_2_IRQHandler>

08000d5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d60:	2300      	movs	r3, #0
 8000d62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d64:	2003      	movs	r0, #3
 8000d66:	f000 f943 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d6a:	200f      	movs	r0, #15
 8000d6c:	f000 f80e 	bl	8000d8c <HAL_InitTick>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d002      	beq.n	8000d7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	71fb      	strb	r3, [r7, #7]
 8000d7a:	e001      	b.n	8000d80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d7c:	f7ff fee4 	bl	8000b48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d80:	79fb      	ldrb	r3, [r7, #7]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <HAL_InitTick+0x6c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d023      	beq.n	8000de8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <HAL_InitTick+0x70>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <HAL_InitTick+0x6c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4619      	mov	r1, r3
 8000daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f941 	bl	800103e <HAL_SYSTICK_Config>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10f      	bne.n	8000de2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d809      	bhi.n	8000ddc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 f919 	bl	8001006 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_InitTick+0x74>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	e007      	b.n	8000dec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
 8000de0:	e004      	b.n	8000dec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
 8000de6:	e001      	b.n	8000dec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	20000004 	.word	0x20000004

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000098 	.word	0x20000098

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000098 	.word	0x20000098

08000e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff ffee 	bl	8000e2c <HAL_GetTick>
 8000e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e5c:	d005      	beq.n	8000e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_Delay+0x44>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e6a:	bf00      	nop
 8000e6c:	f7ff ffde 	bl	8000e2c <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d8f7      	bhi.n	8000e6c <HAL_Delay+0x28>
  {
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008

08000e8c <__NVIC_SetPriorityGrouping>:
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ebe:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	60d3      	str	r3, [r2, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_GetPriorityGrouping>:
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <__NVIC_GetPriorityGrouping+0x18>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	f003 0307 	and.w	r3, r3, #7
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_SetPriority>:
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	; (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fbc:	d301      	bcc.n	8000fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00f      	b.n	8000fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <SysTick_Config+0x40>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fca:	210f      	movs	r1, #15
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f7ff ff8e 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <SysTick_Config+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SysTick_Config+0x40>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff47 	bl	8000e8c <__NVIC_SetPriorityGrouping>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001018:	f7ff ff5c 	bl	8000ed4 <__NVIC_GetPriorityGrouping>
 800101c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff ff8e 	bl	8000f44 <NVIC_EncodePriority>
 8001028:	4602      	mov	r2, r0
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff5d 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffb0 	bl	8000fac <SysTick_Config>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001058:	b480      	push	{r7}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001066:	e17f      	b.n	8001368 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	2101      	movs	r1, #1
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	fa01 f303 	lsl.w	r3, r1, r3
 8001074:	4013      	ands	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 8171 	beq.w	8001362 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b01      	cmp	r3, #1
 800108a:	d005      	beq.n	8001098 <HAL_GPIO_Init+0x40>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d130      	bne.n	80010fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	68da      	ldr	r2, [r3, #12]
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ce:	2201      	movs	r2, #1
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	091b      	lsrs	r3, r3, #4
 80010e4:	f003 0201 	and.w	r2, r3, #1
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	2b03      	cmp	r3, #3
 8001104:	d118      	bne.n	8001138 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800110c:	2201      	movs	r2, #1
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	08db      	lsrs	r3, r3, #3
 8001122:	f003 0201 	and.w	r2, r3, #1
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b03      	cmp	r3, #3
 8001142:	d017      	beq.n	8001174 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d123      	bne.n	80011c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	08da      	lsrs	r2, r3, #3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3208      	adds	r2, #8
 8001188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	220f      	movs	r2, #15
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	691a      	ldr	r2, [r3, #16]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	08da      	lsrs	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3208      	adds	r2, #8
 80011c2:	6939      	ldr	r1, [r7, #16]
 80011c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0203 	and.w	r2, r3, #3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 80ac 	beq.w	8001362 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	4b5f      	ldr	r3, [pc, #380]	; (8001388 <HAL_GPIO_Init+0x330>)
 800120c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120e:	4a5e      	ldr	r2, [pc, #376]	; (8001388 <HAL_GPIO_Init+0x330>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6613      	str	r3, [r2, #96]	; 0x60
 8001216:	4b5c      	ldr	r3, [pc, #368]	; (8001388 <HAL_GPIO_Init+0x330>)
 8001218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001222:	4a5a      	ldr	r2, [pc, #360]	; (800138c <HAL_GPIO_Init+0x334>)
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3302      	adds	r3, #2
 800122a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	220f      	movs	r2, #15
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800124c:	d025      	beq.n	800129a <HAL_GPIO_Init+0x242>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4f      	ldr	r2, [pc, #316]	; (8001390 <HAL_GPIO_Init+0x338>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d01f      	beq.n	8001296 <HAL_GPIO_Init+0x23e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4e      	ldr	r2, [pc, #312]	; (8001394 <HAL_GPIO_Init+0x33c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d019      	beq.n	8001292 <HAL_GPIO_Init+0x23a>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4d      	ldr	r2, [pc, #308]	; (8001398 <HAL_GPIO_Init+0x340>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d013      	beq.n	800128e <HAL_GPIO_Init+0x236>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4c      	ldr	r2, [pc, #304]	; (800139c <HAL_GPIO_Init+0x344>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d00d      	beq.n	800128a <HAL_GPIO_Init+0x232>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4b      	ldr	r2, [pc, #300]	; (80013a0 <HAL_GPIO_Init+0x348>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d007      	beq.n	8001286 <HAL_GPIO_Init+0x22e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4a      	ldr	r2, [pc, #296]	; (80013a4 <HAL_GPIO_Init+0x34c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_GPIO_Init+0x22a>
 800127e:	2306      	movs	r3, #6
 8001280:	e00c      	b.n	800129c <HAL_GPIO_Init+0x244>
 8001282:	2307      	movs	r3, #7
 8001284:	e00a      	b.n	800129c <HAL_GPIO_Init+0x244>
 8001286:	2305      	movs	r3, #5
 8001288:	e008      	b.n	800129c <HAL_GPIO_Init+0x244>
 800128a:	2304      	movs	r3, #4
 800128c:	e006      	b.n	800129c <HAL_GPIO_Init+0x244>
 800128e:	2303      	movs	r3, #3
 8001290:	e004      	b.n	800129c <HAL_GPIO_Init+0x244>
 8001292:	2302      	movs	r3, #2
 8001294:	e002      	b.n	800129c <HAL_GPIO_Init+0x244>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <HAL_GPIO_Init+0x244>
 800129a:	2300      	movs	r3, #0
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	f002 0203 	and.w	r2, r2, #3
 80012a2:	0092      	lsls	r2, r2, #2
 80012a4:	4093      	lsls	r3, r2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012ac:	4937      	ldr	r1, [pc, #220]	; (800138c <HAL_GPIO_Init+0x334>)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3302      	adds	r3, #2
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012ba:	4b3b      	ldr	r3, [pc, #236]	; (80013a8 <HAL_GPIO_Init+0x350>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012de:	4a32      	ldr	r2, [pc, #200]	; (80013a8 <HAL_GPIO_Init+0x350>)
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012e4:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <HAL_GPIO_Init+0x350>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001308:	4a27      	ldr	r2, [pc, #156]	; (80013a8 <HAL_GPIO_Init+0x350>)
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800130e:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <HAL_GPIO_Init+0x350>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001332:	4a1d      	ldr	r2, [pc, #116]	; (80013a8 <HAL_GPIO_Init+0x350>)
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <HAL_GPIO_Init+0x350>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	43db      	mvns	r3, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800135c:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <HAL_GPIO_Init+0x350>)
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3301      	adds	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa22 f303 	lsr.w	r3, r2, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	f47f ae78 	bne.w	8001068 <HAL_GPIO_Init+0x10>
  }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000
 800138c:	40010000 	.word	0x40010000
 8001390:	48000400 	.word	0x48000400
 8001394:	48000800 	.word	0x48000800
 8001398:	48000c00 	.word	0x48000c00
 800139c:	48001000 	.word	0x48001000
 80013a0:	48001400 	.word	0x48001400
 80013a4:	48001800 	.word	0x48001800
 80013a8:	40010400 	.word	0x40010400

080013ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013c8:	e002      	b.n	80013d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ca:	887a      	ldrh	r2, [r7, #2]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40007000 	.word	0x40007000

080013f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001406:	d130      	bne.n	800146a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001408:	4b23      	ldr	r3, [pc, #140]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001414:	d038      	beq.n	8001488 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800141e:	4a1e      	ldr	r2, [pc, #120]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001420:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001424:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2232      	movs	r2, #50	; 0x32
 800142c:	fb02 f303 	mul.w	r3, r2, r3
 8001430:	4a1b      	ldr	r2, [pc, #108]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001432:	fba2 2303 	umull	r2, r3, r2, r3
 8001436:	0c9b      	lsrs	r3, r3, #18
 8001438:	3301      	adds	r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800143c:	e002      	b.n	8001444 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3b01      	subs	r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001450:	d102      	bne.n	8001458 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f2      	bne.n	800143e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001464:	d110      	bne.n	8001488 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e00f      	b.n	800148a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001476:	d007      	beq.n	8001488 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001480:	4a05      	ldr	r2, [pc, #20]	; (8001498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001482:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001486:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40007000 	.word	0x40007000
 800149c:	20000000 	.word	0x20000000
 80014a0:	431bde83 	.word	0x431bde83

080014a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e3c6      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014b6:	4ba1      	ldr	r3, [pc, #644]	; (800173c <HAL_RCC_OscConfig+0x298>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014c0:	4b9e      	ldr	r3, [pc, #632]	; (800173c <HAL_RCC_OscConfig+0x298>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 80e4 	beq.w	80016a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d007      	beq.n	80014ee <HAL_RCC_OscConfig+0x4a>
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	2b0c      	cmp	r3, #12
 80014e2:	f040 808b 	bne.w	80015fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	f040 8087 	bne.w	80015fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014ee:	4b93      	ldr	r3, [pc, #588]	; (800173c <HAL_RCC_OscConfig+0x298>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <HAL_RCC_OscConfig+0x62>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e39e      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1a      	ldr	r2, [r3, #32]
 800150a:	4b8c      	ldr	r3, [pc, #560]	; (800173c <HAL_RCC_OscConfig+0x298>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d004      	beq.n	8001520 <HAL_RCC_OscConfig+0x7c>
 8001516:	4b89      	ldr	r3, [pc, #548]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800151e:	e005      	b.n	800152c <HAL_RCC_OscConfig+0x88>
 8001520:	4b86      	ldr	r3, [pc, #536]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800152c:	4293      	cmp	r3, r2
 800152e:	d223      	bcs.n	8001578 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fd1b 	bl	8001f70 <RCC_SetFlashLatencyFromMSIRange>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e37f      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001544:	4b7d      	ldr	r3, [pc, #500]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a7c      	ldr	r2, [pc, #496]	; (800173c <HAL_RCC_OscConfig+0x298>)
 800154a:	f043 0308 	orr.w	r3, r3, #8
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b7a      	ldr	r3, [pc, #488]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	4977      	ldr	r1, [pc, #476]	; (800173c <HAL_RCC_OscConfig+0x298>)
 800155e:	4313      	orrs	r3, r2
 8001560:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001562:	4b76      	ldr	r3, [pc, #472]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	4972      	ldr	r1, [pc, #456]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001572:	4313      	orrs	r3, r2
 8001574:	604b      	str	r3, [r1, #4]
 8001576:	e025      	b.n	80015c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001578:	4b70      	ldr	r3, [pc, #448]	; (800173c <HAL_RCC_OscConfig+0x298>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a6f      	ldr	r2, [pc, #444]	; (800173c <HAL_RCC_OscConfig+0x298>)
 800157e:	f043 0308 	orr.w	r3, r3, #8
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b6d      	ldr	r3, [pc, #436]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	496a      	ldr	r1, [pc, #424]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001596:	4b69      	ldr	r3, [pc, #420]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	4965      	ldr	r1, [pc, #404]	; (800173c <HAL_RCC_OscConfig+0x298>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d109      	bne.n	80015c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 fcdb 	bl	8001f70 <RCC_SetFlashLatencyFromMSIRange>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e33f      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015c4:	f000 fc48 	bl	8001e58 <HAL_RCC_GetSysClockFreq>
 80015c8:	4602      	mov	r2, r0
 80015ca:	4b5c      	ldr	r3, [pc, #368]	; (800173c <HAL_RCC_OscConfig+0x298>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	f003 030f 	and.w	r3, r3, #15
 80015d4:	495a      	ldr	r1, [pc, #360]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 80015d6:	5ccb      	ldrb	r3, [r1, r3]
 80015d8:	f003 031f 	and.w	r3, r3, #31
 80015dc:	fa22 f303 	lsr.w	r3, r2, r3
 80015e0:	4a58      	ldr	r2, [pc, #352]	; (8001744 <HAL_RCC_OscConfig+0x2a0>)
 80015e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015e4:	4b58      	ldr	r3, [pc, #352]	; (8001748 <HAL_RCC_OscConfig+0x2a4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fbcf 	bl	8000d8c <HAL_InitTick>
 80015ee:	4603      	mov	r3, r0
 80015f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d052      	beq.n	800169e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	e323      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d032      	beq.n	800166a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001604:	4b4d      	ldr	r3, [pc, #308]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a4c      	ldr	r2, [pc, #304]	; (800173c <HAL_RCC_OscConfig+0x298>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001610:	f7ff fc0c 	bl	8000e2c <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001618:	f7ff fc08 	bl	8000e2c <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e30c      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800162a:	4b44      	ldr	r3, [pc, #272]	; (800173c <HAL_RCC_OscConfig+0x298>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001636:	4b41      	ldr	r3, [pc, #260]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a40      	ldr	r2, [pc, #256]	; (800173c <HAL_RCC_OscConfig+0x298>)
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	4b3e      	ldr	r3, [pc, #248]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	493b      	ldr	r1, [pc, #236]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001650:	4313      	orrs	r3, r2
 8001652:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001654:	4b39      	ldr	r3, [pc, #228]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	4936      	ldr	r1, [pc, #216]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
 8001668:	e01a      	b.n	80016a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800166a:	4b34      	ldr	r3, [pc, #208]	; (800173c <HAL_RCC_OscConfig+0x298>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a33      	ldr	r2, [pc, #204]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001670:	f023 0301 	bic.w	r3, r3, #1
 8001674:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001676:	f7ff fbd9 	bl	8000e2c <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800167e:	f7ff fbd5 	bl	8000e2c <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e2d9      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x1da>
 800169c:	e000      	b.n	80016a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800169e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d074      	beq.n	8001796 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d005      	beq.n	80016be <HAL_RCC_OscConfig+0x21a>
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	2b0c      	cmp	r3, #12
 80016b6:	d10e      	bne.n	80016d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d10b      	bne.n	80016d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016be:	4b1f      	ldr	r3, [pc, #124]	; (800173c <HAL_RCC_OscConfig+0x298>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d064      	beq.n	8001794 <HAL_RCC_OscConfig+0x2f0>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d160      	bne.n	8001794 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e2b6      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016de:	d106      	bne.n	80016ee <HAL_RCC_OscConfig+0x24a>
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <HAL_RCC_OscConfig+0x298>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a15      	ldr	r2, [pc, #84]	; (800173c <HAL_RCC_OscConfig+0x298>)
 80016e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	e01d      	b.n	800172a <HAL_RCC_OscConfig+0x286>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f6:	d10c      	bne.n	8001712 <HAL_RCC_OscConfig+0x26e>
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_RCC_OscConfig+0x298>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0f      	ldr	r2, [pc, #60]	; (800173c <HAL_RCC_OscConfig+0x298>)
 80016fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4b0d      	ldr	r3, [pc, #52]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0c      	ldr	r2, [pc, #48]	; (800173c <HAL_RCC_OscConfig+0x298>)
 800170a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	e00b      	b.n	800172a <HAL_RCC_OscConfig+0x286>
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a09      	ldr	r2, [pc, #36]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a06      	ldr	r2, [pc, #24]	; (800173c <HAL_RCC_OscConfig+0x298>)
 8001724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001728:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d01c      	beq.n	800176c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001732:	f7ff fb7b 	bl	8000e2c <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001738:	e011      	b.n	800175e <HAL_RCC_OscConfig+0x2ba>
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	08002ec8 	.word	0x08002ec8
 8001744:	20000000 	.word	0x20000000
 8001748:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fb6e 	bl	8000e2c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	; 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e272      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800175e:	4baf      	ldr	r3, [pc, #700]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0x2a8>
 800176a:	e014      	b.n	8001796 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176c:	f7ff fb5e 	bl	8000e2c <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fb5a 	bl	8000e2c <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e25e      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001786:	4ba5      	ldr	r3, [pc, #660]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x2d0>
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d060      	beq.n	8001864 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_OscConfig+0x310>
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2b0c      	cmp	r3, #12
 80017ac:	d119      	bne.n	80017e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d116      	bne.n	80017e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b4:	4b99      	ldr	r3, [pc, #612]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_OscConfig+0x328>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e23b      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017cc:	4b93      	ldr	r3, [pc, #588]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	061b      	lsls	r3, r3, #24
 80017da:	4990      	ldr	r1, [pc, #576]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017e0:	e040      	b.n	8001864 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d023      	beq.n	8001832 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ea:	4b8c      	ldr	r3, [pc, #560]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a8b      	ldr	r2, [pc, #556]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80017f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f6:	f7ff fb19 	bl	8000e2c <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017fe:	f7ff fb15 	bl	8000e2c <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e219      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001810:	4b82      	ldr	r3, [pc, #520]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181c:	4b7f      	ldr	r3, [pc, #508]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	061b      	lsls	r3, r3, #24
 800182a:	497c      	ldr	r1, [pc, #496]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
 8001830:	e018      	b.n	8001864 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001832:	4b7a      	ldr	r3, [pc, #488]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a79      	ldr	r2, [pc, #484]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800183c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183e:	f7ff faf5 	bl	8000e2c <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001846:	f7ff faf1 	bl	8000e2c <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e1f5      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001858:	4b70      	ldr	r3, [pc, #448]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f0      	bne.n	8001846 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	2b00      	cmp	r3, #0
 800186e:	d03c      	beq.n	80018ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d01c      	beq.n	80018b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001878:	4b68      	ldr	r3, [pc, #416]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 800187a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800187e:	4a67      	ldr	r2, [pc, #412]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001888:	f7ff fad0 	bl	8000e2c <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001890:	f7ff facc 	bl	8000e2c <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e1d0      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018a2:	4b5e      	ldr	r3, [pc, #376]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80018a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0ef      	beq.n	8001890 <HAL_RCC_OscConfig+0x3ec>
 80018b0:	e01b      	b.n	80018ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b2:	4b5a      	ldr	r3, [pc, #360]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80018b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b8:	4a58      	ldr	r2, [pc, #352]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c2:	f7ff fab3 	bl	8000e2c <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ca:	f7ff faaf 	bl	8000e2c <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e1b3      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018dc:	4b4f      	ldr	r3, [pc, #316]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80018de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1ef      	bne.n	80018ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 80a6 	beq.w	8001a44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f8:	2300      	movs	r3, #0
 80018fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018fc:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80018fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10d      	bne.n	8001924 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001908:	4b44      	ldr	r3, [pc, #272]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 800190a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190c:	4a43      	ldr	r2, [pc, #268]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 800190e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001912:	6593      	str	r3, [r2, #88]	; 0x58
 8001914:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001920:	2301      	movs	r3, #1
 8001922:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001924:	4b3e      	ldr	r3, [pc, #248]	; (8001a20 <HAL_RCC_OscConfig+0x57c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192c:	2b00      	cmp	r3, #0
 800192e:	d118      	bne.n	8001962 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001930:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_RCC_OscConfig+0x57c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a3a      	ldr	r2, [pc, #232]	; (8001a20 <HAL_RCC_OscConfig+0x57c>)
 8001936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800193c:	f7ff fa76 	bl	8000e2c <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001944:	f7ff fa72 	bl	8000e2c <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e176      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001956:	4b32      	ldr	r3, [pc, #200]	; (8001a20 <HAL_RCC_OscConfig+0x57c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d108      	bne.n	800197c <HAL_RCC_OscConfig+0x4d8>
 800196a:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 800196c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001970:	4a2a      	ldr	r2, [pc, #168]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800197a:	e024      	b.n	80019c6 <HAL_RCC_OscConfig+0x522>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b05      	cmp	r3, #5
 8001982:	d110      	bne.n	80019a6 <HAL_RCC_OscConfig+0x502>
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198a:	4a24      	ldr	r2, [pc, #144]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 8001996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199a:	4a20      	ldr	r2, [pc, #128]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019a4:	e00f      	b.n	80019c6 <HAL_RCC_OscConfig+0x522>
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80019a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ac:	4a1b      	ldr	r2, [pc, #108]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80019b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019bc:	4a17      	ldr	r2, [pc, #92]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80019be:	f023 0304 	bic.w	r3, r3, #4
 80019c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d016      	beq.n	80019fc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ce:	f7ff fa2d 	bl	8000e2c <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d4:	e00a      	b.n	80019ec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d6:	f7ff fa29 	bl	8000e2c <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e12b      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_RCC_OscConfig+0x578>)
 80019ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0ed      	beq.n	80019d6 <HAL_RCC_OscConfig+0x532>
 80019fa:	e01a      	b.n	8001a32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fc:	f7ff fa16 	bl	8000e2c <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a02:	e00f      	b.n	8001a24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a04:	f7ff fa12 	bl	8000e2c <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d906      	bls.n	8001a24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e114      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a24:	4b89      	ldr	r3, [pc, #548]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1e8      	bne.n	8001a04 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a32:	7ffb      	ldrb	r3, [r7, #31]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d105      	bne.n	8001a44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a38:	4b84      	ldr	r3, [pc, #528]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3c:	4a83      	ldr	r2, [pc, #524]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a42:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80fa 	beq.w	8001c42 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	f040 80d0 	bne.w	8001bf8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a58:	4b7c      	ldr	r3, [pc, #496]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f003 0203 	and.w	r2, r3, #3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d130      	bne.n	8001ace <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	3b01      	subs	r3, #1
 8001a78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d127      	bne.n	8001ace <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d11f      	bne.n	8001ace <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a98:	2a07      	cmp	r2, #7
 8001a9a:	bf14      	ite	ne
 8001a9c:	2201      	movne	r2, #1
 8001a9e:	2200      	moveq	r2, #0
 8001aa0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d113      	bne.n	8001ace <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab0:	085b      	lsrs	r3, r3, #1
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d109      	bne.n	8001ace <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	085b      	lsrs	r3, r3, #1
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d06e      	beq.n	8001bac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	2b0c      	cmp	r3, #12
 8001ad2:	d069      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ad4:	4b5d      	ldr	r3, [pc, #372]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d105      	bne.n	8001aec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ae0:	4b5a      	ldr	r3, [pc, #360]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0a9      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001af0:	4b56      	ldr	r3, [pc, #344]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a55      	ldr	r2, [pc, #340]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001afa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001afc:	f7ff f996 	bl	8000e2c <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b04:	f7ff f992 	bl	8000e2c <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e096      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b16:	4b4d      	ldr	r3, [pc, #308]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b22:	4b4a      	ldr	r3, [pc, #296]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	4b4a      	ldr	r3, [pc, #296]	; (8001c50 <HAL_RCC_OscConfig+0x7ac>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b32:	3a01      	subs	r2, #1
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	4311      	orrs	r1, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b3c:	0212      	lsls	r2, r2, #8
 8001b3e:	4311      	orrs	r1, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b44:	0852      	lsrs	r2, r2, #1
 8001b46:	3a01      	subs	r2, #1
 8001b48:	0552      	lsls	r2, r2, #21
 8001b4a:	4311      	orrs	r1, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b50:	0852      	lsrs	r2, r2, #1
 8001b52:	3a01      	subs	r2, #1
 8001b54:	0652      	lsls	r2, r2, #25
 8001b56:	4311      	orrs	r1, r2
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b5c:	0912      	lsrs	r2, r2, #4
 8001b5e:	0452      	lsls	r2, r2, #17
 8001b60:	430a      	orrs	r2, r1
 8001b62:	493a      	ldr	r1, [pc, #232]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b68:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a37      	ldr	r2, [pc, #220]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b74:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	4a34      	ldr	r2, [pc, #208]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b80:	f7ff f954 	bl	8000e2c <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff f950 	bl	8000e2c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e054      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9a:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ba6:	e04c      	b.n	8001c42 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e04b      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d144      	bne.n	8001c42 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bb8:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a23      	ldr	r2, [pc, #140]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4a20      	ldr	r2, [pc, #128]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bd0:	f7ff f92c 	bl	8000e2c <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd8:	f7ff f928 	bl	8000e2c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e02c      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x734>
 8001bf6:	e024      	b.n	8001c42 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d01f      	beq.n	8001c3e <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001c04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0a:	f7ff f90f 	bl	8000e2c <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c12:	f7ff f90b 	bl	8000e2c <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e00f      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f0      	bne.n	8001c12 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	4905      	ldr	r1, [pc, #20]	; (8001c4c <HAL_RCC_OscConfig+0x7a8>)
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60cb      	str	r3, [r1, #12]
 8001c3c:	e001      	b.n	8001c42 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3720      	adds	r7, #32
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	f99d808c 	.word	0xf99d808c
 8001c54:	feeefffc 	.word	0xfeeefffc

08001c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0e7      	b.n	8001e3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b75      	ldr	r3, [pc, #468]	; (8001e44 <HAL_RCC_ClockConfig+0x1ec>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d910      	bls.n	8001c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b72      	ldr	r3, [pc, #456]	; (8001e44 <HAL_RCC_ClockConfig+0x1ec>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 0207 	bic.w	r2, r3, #7
 8001c82:	4970      	ldr	r1, [pc, #448]	; (8001e44 <HAL_RCC_ClockConfig+0x1ec>)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	4b6e      	ldr	r3, [pc, #440]	; (8001e44 <HAL_RCC_ClockConfig+0x1ec>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0cf      	b.n	8001e3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d010      	beq.n	8001cca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	4b66      	ldr	r3, [pc, #408]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d908      	bls.n	8001cca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb8:	4b63      	ldr	r3, [pc, #396]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	4960      	ldr	r1, [pc, #384]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d04c      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d107      	bne.n	8001cee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cde:	4b5a      	ldr	r3, [pc, #360]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d121      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0a6      	b.n	8001e3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cf6:	4b54      	ldr	r3, [pc, #336]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d115      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e09a      	b.n	8001e3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d107      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d0e:	4b4e      	ldr	r3, [pc, #312]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d109      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e08e      	b.n	8001e3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d1e:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e086      	b.n	8001e3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d2e:	4b46      	ldr	r3, [pc, #280]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f023 0203 	bic.w	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4943      	ldr	r1, [pc, #268]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d40:	f7ff f874 	bl	8000e2c <HAL_GetTick>
 8001d44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d46:	e00a      	b.n	8001d5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d48:	f7ff f870 	bl	8000e2c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e06e      	b.n	8001e3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5e:	4b3a      	ldr	r3, [pc, #232]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 020c 	and.w	r2, r3, #12
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d1eb      	bne.n	8001d48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d010      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d208      	bcs.n	8001d9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d8c:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	492b      	ldr	r1, [pc, #172]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d9e:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <HAL_RCC_ClockConfig+0x1ec>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d210      	bcs.n	8001dce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <HAL_RCC_ClockConfig+0x1ec>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 0207 	bic.w	r2, r3, #7
 8001db4:	4923      	ldr	r1, [pc, #140]	; (8001e44 <HAL_RCC_ClockConfig+0x1ec>)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbc:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <HAL_RCC_ClockConfig+0x1ec>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d001      	beq.n	8001dce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e036      	b.n	8001e3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d008      	beq.n	8001dec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dda:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	4918      	ldr	r1, [pc, #96]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d009      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4910      	ldr	r1, [pc, #64]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e0c:	f000 f824 	bl	8001e58 <HAL_RCC_GetSysClockFreq>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	091b      	lsrs	r3, r3, #4
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	490b      	ldr	r1, [pc, #44]	; (8001e4c <HAL_RCC_ClockConfig+0x1f4>)
 8001e1e:	5ccb      	ldrb	r3, [r1, r3]
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
 8001e28:	4a09      	ldr	r2, [pc, #36]	; (8001e50 <HAL_RCC_ClockConfig+0x1f8>)
 8001e2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_RCC_ClockConfig+0x1fc>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe ffab 	bl	8000d8c <HAL_InitTick>
 8001e36:	4603      	mov	r3, r0
 8001e38:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e3a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40022000 	.word	0x40022000
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	08002ec8 	.word	0x08002ec8
 8001e50:	20000000 	.word	0x20000000
 8001e54:	20000004 	.word	0x20000004

08001e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e66:	4b3e      	ldr	r3, [pc, #248]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e70:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x34>
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	2b0c      	cmp	r3, #12
 8001e84:	d121      	bne.n	8001eca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d11e      	bne.n	8001eca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e8c:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d107      	bne.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e98:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	e005      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001eb4:	4a2b      	ldr	r2, [pc, #172]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10d      	bne.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ec8:	e00a      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d102      	bne.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ed0:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	e004      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001edc:	4b23      	ldr	r3, [pc, #140]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ede:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	2b0c      	cmp	r3, #12
 8001ee4:	d134      	bne.n	8001f50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d003      	beq.n	8001efe <HAL_RCC_GetSysClockFreq+0xa6>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d003      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0xac>
 8001efc:	e005      	b.n	8001f0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001efe:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f00:	617b      	str	r3, [r7, #20]
      break;
 8001f02:	e005      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x114>)
 8001f06:	617b      	str	r3, [r7, #20]
      break;
 8001f08:	e002      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	617b      	str	r3, [r7, #20]
      break;
 8001f0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	0a1b      	lsrs	r3, r3, #8
 8001f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	fb02 f203 	mul.w	r2, r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	0e5b      	lsrs	r3, r3, #25
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	3301      	adds	r3, #1
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f50:	69bb      	ldr	r3, [r7, #24]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3724      	adds	r7, #36	; 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
 8001f64:	08002ed8 	.word	0x08002ed8
 8001f68:	00f42400 	.word	0x00f42400
 8001f6c:	007a1200 	.word	0x007a1200

08001f70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f78:	2300      	movs	r3, #0
 8001f7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f7c:	4b2a      	ldr	r3, [pc, #168]	; (8002028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f88:	f7ff fa28 	bl	80013dc <HAL_PWREx_GetVoltageRange>
 8001f8c:	6178      	str	r0, [r7, #20]
 8001f8e:	e014      	b.n	8001fba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f90:	4b25      	ldr	r3, [pc, #148]	; (8002028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f94:	4a24      	ldr	r2, [pc, #144]	; (8002028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f9c:	4b22      	ldr	r3, [pc, #136]	; (8002028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fa8:	f7ff fa18 	bl	80013dc <HAL_PWREx_GetVoltageRange>
 8001fac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fae:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fc0:	d10b      	bne.n	8001fda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b80      	cmp	r3, #128	; 0x80
 8001fc6:	d919      	bls.n	8001ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2ba0      	cmp	r3, #160	; 0xa0
 8001fcc:	d902      	bls.n	8001fd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fce:	2302      	movs	r3, #2
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	e013      	b.n	8001ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	e010      	b.n	8001ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b80      	cmp	r3, #128	; 0x80
 8001fde:	d902      	bls.n	8001fe6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	e00a      	b.n	8001ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b80      	cmp	r3, #128	; 0x80
 8001fea:	d102      	bne.n	8001ff2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fec:	2302      	movs	r3, #2
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	e004      	b.n	8001ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b70      	cmp	r3, #112	; 0x70
 8001ff6:	d101      	bne.n	8001ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f023 0207 	bic.w	r2, r3, #7
 8002004:	4909      	ldr	r1, [pc, #36]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800200c:	4b07      	ldr	r3, [pc, #28]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	429a      	cmp	r2, r3
 8002018:	d001      	beq.n	800201e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000
 800202c:	40022000 	.word	0x40022000

08002030 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e095      	b.n	800216e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	2b00      	cmp	r3, #0
 8002048:	d108      	bne.n	800205c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002052:	d009      	beq.n	8002068 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
 800205a:	e005      	b.n	8002068 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7fe fd84 	bl	8000b90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800209e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80020a8:	d902      	bls.n	80020b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	e002      	b.n	80020b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80020b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80020be:	d007      	beq.n	80020d0 <HAL_SPI_Init+0xa0>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80020c8:	d002      	beq.n	80020d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002112:	ea42 0103 	orr.w	r1, r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	0c1b      	lsrs	r3, r3, #16
 800212c:	f003 0204 	and.w	r2, r3, #4
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800214c:	ea42 0103 	orr.w	r1, r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b088      	sub	sp, #32
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	4613      	mov	r3, r2
 8002184:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_SPI_Transmit+0x22>
 8002194:	2302      	movs	r3, #2
 8002196:	e158      	b.n	800244a <HAL_SPI_Transmit+0x2d4>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021a0:	f7fe fe44 	bl	8000e2c <HAL_GetTick>
 80021a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d002      	beq.n	80021bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80021b6:	2302      	movs	r3, #2
 80021b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021ba:	e13d      	b.n	8002438 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <HAL_SPI_Transmit+0x52>
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021cc:	e134      	b.n	8002438 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2203      	movs	r2, #3
 80021d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	88fa      	ldrh	r2, [r7, #6]
 80021e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	88fa      	ldrh	r2, [r7, #6]
 80021ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002218:	d10f      	bne.n	800223a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002228:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002238:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002244:	2b40      	cmp	r3, #64	; 0x40
 8002246:	d007      	beq.n	8002258 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002256:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002260:	d94b      	bls.n	80022fa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <HAL_SPI_Transmit+0xfa>
 800226a:	8afb      	ldrh	r3, [r7, #22]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d13e      	bne.n	80022ee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002274:	881a      	ldrh	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002280:	1c9a      	adds	r2, r3, #2
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002294:	e02b      	b.n	80022ee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d112      	bne.n	80022ca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	881a      	ldrh	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b4:	1c9a      	adds	r2, r3, #2
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022c8:	e011      	b.n	80022ee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022ca:	f7fe fdaf 	bl	8000e2c <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d803      	bhi.n	80022e2 <HAL_SPI_Transmit+0x16c>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e0:	d102      	bne.n	80022e8 <HAL_SPI_Transmit+0x172>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d102      	bne.n	80022ee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022ec:	e0a4      	b.n	8002438 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1ce      	bne.n	8002296 <HAL_SPI_Transmit+0x120>
 80022f8:	e07c      	b.n	80023f4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_SPI_Transmit+0x192>
 8002302:	8afb      	ldrh	r3, [r7, #22]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d170      	bne.n	80023ea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b01      	cmp	r3, #1
 8002310:	d912      	bls.n	8002338 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002316:	881a      	ldrh	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002322:	1c9a      	adds	r2, r3, #2
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b02      	subs	r3, #2
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002336:	e058      	b.n	80023ea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	330c      	adds	r3, #12
 8002342:	7812      	ldrb	r2, [r2, #0]
 8002344:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800235e:	e044      	b.n	80023ea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b02      	cmp	r3, #2
 800236c:	d12b      	bne.n	80023c6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b01      	cmp	r3, #1
 8002376:	d912      	bls.n	800239e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237c:	881a      	ldrh	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002388:	1c9a      	adds	r2, r3, #2
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002392:	b29b      	uxth	r3, r3
 8002394:	3b02      	subs	r3, #2
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800239c:	e025      	b.n	80023ea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	330c      	adds	r3, #12
 80023a8:	7812      	ldrb	r2, [r2, #0]
 80023aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023c4:	e011      	b.n	80023ea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023c6:	f7fe fd31 	bl	8000e2c <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d803      	bhi.n	80023de <HAL_SPI_Transmit+0x268>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023dc:	d102      	bne.n	80023e4 <HAL_SPI_Transmit+0x26e>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d102      	bne.n	80023ea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023e8:	e026      	b.n	8002438 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1b5      	bne.n	8002360 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	6839      	ldr	r1, [r7, #0]
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 fce3 	bl	8002dc4 <SPI_EndRxTxTransaction>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10a      	bne.n	8002428 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	77fb      	strb	r3, [r7, #31]
 8002434:	e000      	b.n	8002438 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002436:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002448:	7ffb      	ldrb	r3, [r7, #31]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b088      	sub	sp, #32
 8002456:	af02      	add	r7, sp, #8
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	603b      	str	r3, [r7, #0]
 800245e:	4613      	mov	r3, r2
 8002460:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800246e:	d112      	bne.n	8002496 <HAL_SPI_Receive+0x44>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10e      	bne.n	8002496 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2204      	movs	r2, #4
 800247c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002480:	88fa      	ldrh	r2, [r7, #6]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	4613      	mov	r3, r2
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	68b9      	ldr	r1, [r7, #8]
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f910 	bl	80026b2 <HAL_SPI_TransmitReceive>
 8002492:	4603      	mov	r3, r0
 8002494:	e109      	b.n	80026aa <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_SPI_Receive+0x52>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e102      	b.n	80026aa <HAL_SPI_Receive+0x258>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024ac:	f7fe fcbe 	bl	8000e2c <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d002      	beq.n	80024c4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80024be:	2302      	movs	r3, #2
 80024c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024c2:	e0e9      	b.n	8002698 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <HAL_SPI_Receive+0x7e>
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d102      	bne.n	80024d6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024d4:	e0e0      	b.n	8002698 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2204      	movs	r2, #4
 80024da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	88fa      	ldrh	r2, [r7, #6]
 80024ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	88fa      	ldrh	r2, [r7, #6]
 80024f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002520:	d908      	bls.n	8002534 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	e007      	b.n	8002544 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002542:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800254c:	d10f      	bne.n	800256e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800255c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800256c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002578:	2b40      	cmp	r3, #64	; 0x40
 800257a:	d007      	beq.n	800258c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800258a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002594:	d867      	bhi.n	8002666 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002596:	e030      	b.n	80025fa <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d117      	bne.n	80025d6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f103 020c 	add.w	r2, r3, #12
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	7812      	ldrb	r2, [r2, #0]
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80025d4:	e011      	b.n	80025fa <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025d6:	f7fe fc29 	bl	8000e2c <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d803      	bhi.n	80025ee <HAL_SPI_Receive+0x19c>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d102      	bne.n	80025f4 <HAL_SPI_Receive+0x1a2>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d102      	bne.n	80025fa <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80025f8:	e04e      	b.n	8002698 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1c8      	bne.n	8002598 <HAL_SPI_Receive+0x146>
 8002606:	e034      	b.n	8002672 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b01      	cmp	r3, #1
 8002614:	d115      	bne.n	8002642 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	b292      	uxth	r2, r2
 8002622:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	1c9a      	adds	r2, r3, #2
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002640:	e011      	b.n	8002666 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002642:	f7fe fbf3 	bl	8000e2c <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d803      	bhi.n	800265a <HAL_SPI_Receive+0x208>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002658:	d102      	bne.n	8002660 <HAL_SPI_Receive+0x20e>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d102      	bne.n	8002666 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002664:	e018      	b.n	8002698 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800266c:	b29b      	uxth	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1ca      	bne.n	8002608 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	6839      	ldr	r1, [r7, #0]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fb4c 	bl	8002d14 <SPI_EndRxTransaction>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2220      	movs	r2, #32
 8002686:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	75fb      	strb	r3, [r7, #23]
 8002694:	e000      	b.n	8002698 <HAL_SPI_Receive+0x246>
  }

error :
 8002696:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80026a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b08a      	sub	sp, #40	; 0x28
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026c0:	2301      	movs	r3, #1
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_SPI_TransmitReceive+0x26>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e1fb      	b.n	8002ad0 <HAL_SPI_TransmitReceive+0x41e>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026e0:	f7fe fba4 	bl	8000e2c <HAL_GetTick>
 80026e4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80026ec:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80026f4:	887b      	ldrh	r3, [r7, #2]
 80026f6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80026f8:	887b      	ldrh	r3, [r7, #2]
 80026fa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026fc:	7efb      	ldrb	r3, [r7, #27]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d00e      	beq.n	8002720 <HAL_SPI_TransmitReceive+0x6e>
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002708:	d106      	bne.n	8002718 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d102      	bne.n	8002718 <HAL_SPI_TransmitReceive+0x66>
 8002712:	7efb      	ldrb	r3, [r7, #27]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d003      	beq.n	8002720 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002718:	2302      	movs	r3, #2
 800271a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800271e:	e1cd      	b.n	8002abc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_SPI_TransmitReceive+0x80>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <HAL_SPI_TransmitReceive+0x80>
 800272c:	887b      	ldrh	r3, [r7, #2]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d103      	bne.n	800273a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002738:	e1c0      	b.n	8002abc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b04      	cmp	r3, #4
 8002744:	d003      	beq.n	800274e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2205      	movs	r2, #5
 800274a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	887a      	ldrh	r2, [r7, #2]
 800275e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	887a      	ldrh	r2, [r7, #2]
 8002766:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	887a      	ldrh	r2, [r7, #2]
 8002774:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	887a      	ldrh	r2, [r7, #2]
 800277a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002790:	d802      	bhi.n	8002798 <HAL_SPI_TransmitReceive+0xe6>
 8002792:	8a3b      	ldrh	r3, [r7, #16]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d908      	bls.n	80027aa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	e007      	b.n	80027ba <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027b8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c4:	2b40      	cmp	r3, #64	; 0x40
 80027c6:	d007      	beq.n	80027d8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027e0:	d97c      	bls.n	80028dc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_SPI_TransmitReceive+0x13e>
 80027ea:	8a7b      	ldrh	r3, [r7, #18]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d169      	bne.n	80028c4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	881a      	ldrh	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002800:	1c9a      	adds	r2, r3, #2
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002814:	e056      	b.n	80028c4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b02      	cmp	r3, #2
 8002822:	d11b      	bne.n	800285c <HAL_SPI_TransmitReceive+0x1aa>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d016      	beq.n	800285c <HAL_SPI_TransmitReceive+0x1aa>
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	2b01      	cmp	r3, #1
 8002832:	d113      	bne.n	800285c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002838:	881a      	ldrh	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	1c9a      	adds	r2, r3, #2
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800284e:	b29b      	uxth	r3, r3
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b01      	cmp	r3, #1
 8002868:	d11c      	bne.n	80028a4 <HAL_SPI_TransmitReceive+0x1f2>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d016      	beq.n	80028a4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	b292      	uxth	r2, r2
 8002882:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	1c9a      	adds	r2, r3, #2
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028a0:	2301      	movs	r3, #1
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028a4:	f7fe fac2 	bl	8000e2c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d807      	bhi.n	80028c4 <HAL_SPI_TransmitReceive+0x212>
 80028b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ba:	d003      	beq.n	80028c4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80028c2:	e0fb      	b.n	8002abc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1a3      	bne.n	8002816 <HAL_SPI_TransmitReceive+0x164>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d19d      	bne.n	8002816 <HAL_SPI_TransmitReceive+0x164>
 80028da:	e0df      	b.n	8002a9c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_SPI_TransmitReceive+0x23a>
 80028e4:	8a7b      	ldrh	r3, [r7, #18]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	f040 80cb 	bne.w	8002a82 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d912      	bls.n	800291c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fa:	881a      	ldrh	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002906:	1c9a      	adds	r2, r3, #2
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002910:	b29b      	uxth	r3, r3
 8002912:	3b02      	subs	r3, #2
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	87da      	strh	r2, [r3, #62]	; 0x3e
 800291a:	e0b2      	b.n	8002a82 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	330c      	adds	r3, #12
 8002926:	7812      	ldrb	r2, [r2, #0]
 8002928:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002942:	e09e      	b.n	8002a82 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b02      	cmp	r3, #2
 8002950:	d134      	bne.n	80029bc <HAL_SPI_TransmitReceive+0x30a>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d02f      	beq.n	80029bc <HAL_SPI_TransmitReceive+0x30a>
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	2b01      	cmp	r3, #1
 8002960:	d12c      	bne.n	80029bc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b01      	cmp	r3, #1
 800296a:	d912      	bls.n	8002992 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	881a      	ldrh	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297c:	1c9a      	adds	r2, r3, #2
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b02      	subs	r3, #2
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002990:	e012      	b.n	80029b8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	330c      	adds	r3, #12
 800299c:	7812      	ldrb	r2, [r2, #0]
 800299e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d148      	bne.n	8002a5c <HAL_SPI_TransmitReceive+0x3aa>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d042      	beq.n	8002a5c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d923      	bls.n	8002a2a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	b292      	uxth	r2, r2
 80029ee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	1c9a      	adds	r2, r3, #2
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b02      	subs	r3, #2
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d81f      	bhi.n	8002a58 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	e016      	b.n	8002a58 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f103 020c 	add.w	r2, r3, #12
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	7812      	ldrb	r2, [r2, #0]
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a5c:	f7fe f9e6 	bl	8000e2c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d803      	bhi.n	8002a74 <HAL_SPI_TransmitReceive+0x3c2>
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a72:	d102      	bne.n	8002a7a <HAL_SPI_TransmitReceive+0x3c8>
 8002a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d103      	bne.n	8002a82 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002a80:	e01c      	b.n	8002abc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f47f af5b 	bne.w	8002944 <HAL_SPI_TransmitReceive+0x292>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f47f af54 	bne.w	8002944 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f98f 	bl	8002dc4 <SPI_EndRxTxTransaction>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d006      	beq.n	8002aba <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	661a      	str	r2, [r3, #96]	; 0x60
 8002ab8:	e000      	b.n	8002abc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002aba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002acc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3728      	adds	r7, #40	; 0x28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ae8:	f7fe f9a0 	bl	8000e2c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	4413      	add	r3, r2
 8002af6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002af8:	f7fe f998 	bl	8000e2c <HAL_GetTick>
 8002afc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002afe:	4b39      	ldr	r3, [pc, #228]	; (8002be4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	015b      	lsls	r3, r3, #5
 8002b04:	0d1b      	lsrs	r3, r3, #20
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	fb02 f303 	mul.w	r3, r2, r3
 8002b0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b0e:	e054      	b.n	8002bba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b16:	d050      	beq.n	8002bba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b18:	f7fe f988 	bl	8000e2c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d902      	bls.n	8002b2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d13d      	bne.n	8002baa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b46:	d111      	bne.n	8002b6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b50:	d004      	beq.n	8002b5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b5a:	d107      	bne.n	8002b6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b74:	d10f      	bne.n	8002b96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e017      	b.n	8002bda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	bf0c      	ite	eq
 8002bca:	2301      	moveq	r3, #1
 8002bcc:	2300      	movne	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d19b      	bne.n	8002b10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3720      	adds	r7, #32
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000000 	.word	0x20000000

08002be8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08a      	sub	sp, #40	; 0x28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002bfa:	f7fe f917 	bl	8000e2c <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	4413      	add	r3, r2
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002c0a:	f7fe f90f 	bl	8000e2c <HAL_GetTick>
 8002c0e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	330c      	adds	r3, #12
 8002c16:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002c18:	4b3d      	ldr	r3, [pc, #244]	; (8002d10 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	00da      	lsls	r2, r3, #3
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	0d1b      	lsrs	r3, r3, #20
 8002c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002c30:	e060      	b.n	8002cf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c38:	d107      	bne.n	8002c4a <SPI_WaitFifoStateUntilTimeout+0x62>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d104      	bne.n	8002c4a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002c48:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d050      	beq.n	8002cf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c52:	f7fe f8eb 	bl	8000e2c <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d902      	bls.n	8002c68 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d13d      	bne.n	8002ce4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c80:	d111      	bne.n	8002ca6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c8a:	d004      	beq.n	8002c96 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c94:	d107      	bne.n	8002ca6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ca4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cae:	d10f      	bne.n	8002cd0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e010      	b.n	8002d06 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d196      	bne.n	8002c32 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3728      	adds	r7, #40	; 0x28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000000 	.word	0x20000000

08002d14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d28:	d111      	bne.n	8002d4e <SPI_EndRxTransaction+0x3a>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d32:	d004      	beq.n	8002d3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3c:	d107      	bne.n	8002d4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d4c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2200      	movs	r2, #0
 8002d56:	2180      	movs	r1, #128	; 0x80
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7ff febd 	bl	8002ad8 <SPI_WaitFlagStateUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d007      	beq.n	8002d74 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d68:	f043 0220 	orr.w	r2, r3, #32
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e023      	b.n	8002dbc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d7c:	d11d      	bne.n	8002dba <SPI_EndRxTransaction+0xa6>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d86:	d004      	beq.n	8002d92 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d90:	d113      	bne.n	8002dba <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f7ff ff22 	bl	8002be8 <SPI_WaitFifoStateUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d007      	beq.n	8002dba <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dae:	f043 0220 	orr.w	r2, r3, #32
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e000      	b.n	8002dbc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f7ff ff03 	bl	8002be8 <SPI_WaitFifoStateUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d007      	beq.n	8002df8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e027      	b.n	8002e48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2180      	movs	r1, #128	; 0x80
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f7ff fe68 	bl	8002ad8 <SPI_WaitFlagStateUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d007      	beq.n	8002e1e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e12:	f043 0220 	orr.w	r2, r3, #32
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e014      	b.n	8002e48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f7ff fedc 	bl	8002be8 <SPI_WaitFifoStateUntilTimeout>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3a:	f043 0220 	orr.w	r2, r3, #32
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e000      	b.n	8002e48 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <__libc_init_array>:
 8002e50:	b570      	push	{r4, r5, r6, lr}
 8002e52:	4d0d      	ldr	r5, [pc, #52]	; (8002e88 <__libc_init_array+0x38>)
 8002e54:	4c0d      	ldr	r4, [pc, #52]	; (8002e8c <__libc_init_array+0x3c>)
 8002e56:	1b64      	subs	r4, r4, r5
 8002e58:	10a4      	asrs	r4, r4, #2
 8002e5a:	2600      	movs	r6, #0
 8002e5c:	42a6      	cmp	r6, r4
 8002e5e:	d109      	bne.n	8002e74 <__libc_init_array+0x24>
 8002e60:	4d0b      	ldr	r5, [pc, #44]	; (8002e90 <__libc_init_array+0x40>)
 8002e62:	4c0c      	ldr	r4, [pc, #48]	; (8002e94 <__libc_init_array+0x44>)
 8002e64:	f000 f820 	bl	8002ea8 <_init>
 8002e68:	1b64      	subs	r4, r4, r5
 8002e6a:	10a4      	asrs	r4, r4, #2
 8002e6c:	2600      	movs	r6, #0
 8002e6e:	42a6      	cmp	r6, r4
 8002e70:	d105      	bne.n	8002e7e <__libc_init_array+0x2e>
 8002e72:	bd70      	pop	{r4, r5, r6, pc}
 8002e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e78:	4798      	blx	r3
 8002e7a:	3601      	adds	r6, #1
 8002e7c:	e7ee      	b.n	8002e5c <__libc_init_array+0xc>
 8002e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e82:	4798      	blx	r3
 8002e84:	3601      	adds	r6, #1
 8002e86:	e7f2      	b.n	8002e6e <__libc_init_array+0x1e>
 8002e88:	08002f08 	.word	0x08002f08
 8002e8c:	08002f08 	.word	0x08002f08
 8002e90:	08002f08 	.word	0x08002f08
 8002e94:	08002f0c 	.word	0x08002f0c

08002e98 <memset>:
 8002e98:	4402      	add	r2, r0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d100      	bne.n	8002ea2 <memset+0xa>
 8002ea0:	4770      	bx	lr
 8002ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ea6:	e7f9      	b.n	8002e9c <memset+0x4>

08002ea8 <_init>:
 8002ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eaa:	bf00      	nop
 8002eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eae:	bc08      	pop	{r3}
 8002eb0:	469e      	mov	lr, r3
 8002eb2:	4770      	bx	lr

08002eb4 <_fini>:
 8002eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb6:	bf00      	nop
 8002eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eba:	bc08      	pop	{r3}
 8002ebc:	469e      	mov	lr, r3
 8002ebe:	4770      	bx	lr
